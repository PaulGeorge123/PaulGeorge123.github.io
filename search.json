[{"title":"Android Knowledge (Start)","url":"/PaulGeorge123.github.io/2020/08/09/Android-Knowledge/","content":"<p><strong>JDK</strong></p>\n<p><strong><code>JDK</code>是<code>java</code>语言的软件开发工具包，它包含了<code>java</code>的运行环境，工具集合，基础类库等内容</strong></p>\n<hr>\n<p><strong>Android SDK</strong></p>\n<p><strong>是谷歌提供的 Android 开发包，在开发Android 项目的时候 我们需要引入<code>Android SDK</code> 来使用Android 的相关<code>API</code></strong></p>\n<hr>\n<a id=\"more\"></a>\n\n<p>分析你的第一个Android程序 根目录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200809163923164.png\" alt=\"\"></p>\n<p>1 . gradle和.idea</p>\n<p>这两个目录下放置的都是Android Studio自动生成的一些文件，我们无须关心，也不要去手动编辑。</p>\n<p>2 . app</p>\n<p>项目中的代码、资源等内容几乎都是放置在这个目录下的，我们后面的开发工作也基本都是在这个目录下进行的，待会儿还会对这个目录单独展开进行讲解。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200809164747194.png\" alt=\"\"></p>\n<p>3 . build</p>\n<p>这个目录你也不需要过多关心，它主要包含了一些在编译时自动生成的文件。</p>\n<p>4 . gradle 类似php的composer</p>\n<p>这个目录下包含了gradle wrapper的配置文件，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。Android Studio默认没有启用gradle wrapper的方式，如果需要打开，可以点击Android Studio导航栏→File→Settings→Build, Execution, Deployment→Gradle，进行配置更改。</p>\n<p>5 . .gitignore</p>\n<p>这个文件是用来将指定的目录或文件排除在版本控制之外的，关于版本控制我们将在第5章中开始正式的学习。</p>\n<p>6 . build.gradle</p>\n<p>这是项目全局的gradle构建脚本，通常这个文件中的内容是不需要修改的。稍后我们将会详细分析gradle构建脚本中的具体内容。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200809164302555.png\" alt=\"\"></p>\n<p>7 . gradle.properties</p>\n<p>这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。</p>\n<p>8 . gradlew和gradlew.bat</p>\n<p>这两个文件是用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p>\n<p>9 . HelloWorld.iml</p>\n<p>iml文件是所有IntelliJ IDEA项目都会自动生成的一个文件（Android Studio是基于IntelliJ IDEA开发的），用于标识这是一个IntelliJ IDEA项目，我们不需要修改这个文件中的任何内容。</p>\n<p>10 . local.properties</p>\n<p>这个文件用于指定本机中的Android SDK路径，通常内容都是自动生成的，我们并不需要修改。除非你本机中的Android SDK位置发生了变化，那么就将这个文件中的路径改成新的位置即可。</p>\n<p>11 . settings.gradle</p>\n<p>这个文件用于指定项目中所有引入的模块。由于HelloWorld项目中就只有一个app模块，因此该文件中也就只引入了app这一个模块。通常情况下模块的引入都是自动完成的，需要我们手动去修改这个文件的场景可能比较少。</p>\n<hr>\n<p>app目录</p>\n<p>1 . build</p>\n<p>这个目录和外层的build目录类似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容会更多更杂，我们不需要过多关心。</p>\n<p>2 . libs</p>\n<p>如果你的项目中使用到了第三方jar包，就需要把这些jar包都放在libs目录下，放在这个目录下的jar包都会被自动添加到构建路径里去。</p>\n<p>3 . androidTest</p>\n<p>此处是用来编写Android Test测试用例的，可以对项目进行一些自动化测试。</p>\n<p>4 . java</p>\n<p>毫无疑问，java目录是放置我们所有Java代码的地方，展开该目录，你将看到我们刚才创建的HelloWorldActivity文件就在里面。</p>\n<p>5 . res</p>\n<p>这个目录下的内容就有点多了。简单点说，就是你在项目中使用到的所有图片、布局、字符串等资源都要存放在这个目录下。当然这个目录下还有很多子目录，</p>\n<p>图片放在drawable目录下，</p>\n<p>布局放在layout目录下，</p>\n<p>字符串放在values目录下，</p>\n<p>所以你不用担心会把整个res目录弄得乱糟糟的。</p>\n<p>6 . AndroidManifest.xml</p>\n<p>这是你整个Android项目的配置文件，你在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限声明。由于这个文件以后会经常用到，我们用到的时候再做详细说明。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.ase\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:roundIcon</span>=<span class=\"string\">\"@mipmap/ic_launcher_round\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>7 . test</p>\n<p>此处是用来编写Unit Test测试用例的，是对项目进行自动化测试的另一种方式。</p>\n<p>8 . .gitignore</p>\n<p>这个文件用于将app模块内的指定的目录或文件排除在版本控制之外，作用和外层的.gitignore文件类似。</p>\n<p>9 . app.iml</p>\n<p>IntelliJ IDEA项目自动生成的文件，我们不需要关心或修改这个文件中的内容。</p>\n<p>10 . build.gradle</p>\n<p>这是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置，我们稍后将会详细分析gradle构建脚本中的具体内容。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">30</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"30.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.ase\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">17</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">30</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        testInstrumentationRunner <span class=\"string\">\"androidx.test.runner.AndroidJUnitRunner\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android-optimize.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation fileTree(<span class=\"string\">dir:</span> <span class=\"string\">\"libs\"</span>, <span class=\"string\">include:</span> [<span class=\"string\">\"*.jar\"</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class=\"line\">    testImplementation <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    androidTestImplementation <span class=\"string\">'androidx.test.ext:junit:1.1.1'</span></span><br><span class=\"line\">    androidTestImplementation <span class=\"string\">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一行应用了一个插件，一般有两种值可选：<code>com.android.application</code>表示这是一个应用程序模块，<code>com.android.library</code>表示这是一个库模块。应用程序模块和库模块的最大区别在于，一个是可以直接运行的，一个只能作为代码库依附于别的应用程序模块来运行。</p>\n<p>接下来是一个大的android闭包，在这个闭包中我们可以配置项目构建的各种属性。其中，</p>\n<p><code>compileSdkVersion</code></p>\n<p>用于指定项目的编译版本，这里指定成30表示使用Android 7.0系统的<code>SDK</code>编译。</p>\n<p><code>buildToolsVersion</code></p>\n<p>用于指定项目构建工具的版本，目前最新的版本就是30.0.1，</p>\n<p>如果有更新的版本时，Android Studio会进行提示。</p>\n<p>然后我们看到，这里在android闭包中又嵌套了一个<code>defaultConfig</code>闭包，<code>defaultConfig</code>闭包中可以对项目的更多细节进行配置。</p>\n","categories":["Android"],"tags":["Android"]},{"title":"HTML","url":"/PaulGeorge123.github.io/2020/05/23/HTML/","content":"<h4 id=\"HTML-5-样式指南和代码约定\"><a href=\"#HTML-5-样式指南和代码约定\" class=\"headerlink\" title=\"HTML(5) 样式指南和代码约定\"></a>HTML(5) 样式指南和代码约定</h4><blockquote>\n<p>在文档的首行声明文档类型：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"HTML-meta\"><a href=\"#HTML-meta\" class=\"headerlink\" title=\"HTML meta\"></a>HTML meta</h4><blockquote>\n<p>描述性标签，它用来描述我们网站的一些信息</p>\n</blockquote>\n<h4 id=\"HTML-标题\"><a href=\"#HTML-标题\" class=\"headerlink\" title=\"HTML 标题\"></a>HTML 标题</h4><blockquote>\n<p>HTML 标题（Heading）是通过 &lt; h1 &gt; ~ &lt; h6 &gt; 等标签进行定义的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>This is a heading<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"HTML-链接\"><a href=\"#HTML-链接\" class=\"headerlink\" title=\"HTML 链接\"></a>HTML 链接</h4><blockquote>\n<p> HTML 链接是通过 <a> 标签进行定义的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.w3school.com.cn\"</span>&gt;</span>This is a link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HTML-段落\"><a href=\"#HTML-段落\" class=\"headerlink\" title=\"HTML 段落\"></a>HTML 段落</h4><blockquote>\n<p>HTML 段落是通过 <p> 标签进行定义的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is another paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"HTML-图像\"><a href=\"#HTML-图像\" class=\"headerlink\" title=\"HTML 图像\"></a>HTML 图像</h4><blockquote>\n<p>HTML 图像是通过 <img> 标签进行定义的。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"w3school.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"104\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"142\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"HTML-元素的属性：\"><a href=\"#HTML-元素的属性：\" class=\"headerlink\" title=\"HTML 元素的属性：\"></a>HTML 元素的属性：</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td><em>classname</em></td>\n<td>规定元素的类名（classname）</td>\n</tr>\n<tr>\n<td>id</td>\n<td><em>id</em></td>\n<td>规定元素的唯一 id</td>\n</tr>\n<tr>\n<td>style</td>\n<td><em>style_definition</em></td>\n<td>规定元素的行内样式（inline style）</td>\n</tr>\n<tr>\n<td>title</td>\n<td><em>text</em></td>\n<td>规定元素的额外信息（可在工具提示中显示）</td>\n</tr>\n</tbody></table>\n<h4 id=\"HTML-注释标签\"><a href=\"#HTML-注释标签\" class=\"headerlink\" title=\"HTML 注释标签\"></a>HTML 注释标签</h4><blockquote>\n<p>够通过如下语法向 HTML 源代码添加注释：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在此处写注释 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"HTML-语义元素\"><a href=\"#HTML-语义元素\" class=\"headerlink\" title=\"HTML 语义元素\"></a>HTML 语义元素</h4><table>\n<thead>\n<tr>\n<th>header</th>\n<th>定义文档或节的页眉</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nav</td>\n<td>定义导航链接的容器</td>\n</tr>\n<tr>\n<td>section</td>\n<td>定义文档中的节</td>\n</tr>\n<tr>\n<td>article</td>\n<td>定义独立的自包含文章</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>定义内容之外的内容（比如侧栏）</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>定义文档或节的页脚</td>\n</tr>\n<tr>\n<td>details</td>\n<td>定义额外的细节</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>定义 details 元素的标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"符号实体\"><a href=\"#符号实体\" class=\"headerlink\" title=\"符号实体\"></a>符号实体</h4><blockquote>\n<p>HTML 支持的数学符号(常用)</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;lt;</span>         &gt;       大于号</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">&amp;gt;</span>         <span class=\"tag\">&lt;       小于号</span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">&amp;<span class=\"attr\">amp</span>;        &amp;       引号</span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">&amp;<span class=\"attr\">quot</span>;       \"       引号</span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">&amp;<span class=\"attr\">reg</span>;                已注册     </span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">&amp;<span class=\"attr\">copy</span>;               版权</span></span><br><span class=\"line\"><span class=\"tag\">    </span></span><br><span class=\"line\"><span class=\"tag\">&amp;<span class=\"attr\">nbsp</span>;               不断行的空</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"框架标签（Frame）\"><a href=\"#框架标签（Frame）\" class=\"headerlink\" title=\"框架标签（Frame）\"></a>框架标签（Frame）</h4><blockquote>\n<p>Frame 标签定义了放置在每个框架中的 HTML 文档。</p>\n</blockquote>\n<p><em>在下面的这个例子中，我们设置了一个两列的框架集。第一列被设置为占据浏览器窗口的 25%。第二列被设置为占据浏览器窗口的 75%。HTML 文档 “frame_a.htm” 被置于第一个列中，而 HTML 文档 “frame_b.htm” 被置于第二个列中：</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"25%,75%\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"frame_a.htm\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"frame_b.htm\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建-Canvas-元素\"><a href=\"#创建-Canvas-元素\" class=\"headerlink\" title=\"创建 Canvas 元素\"></a>创建 Canvas 元素</h4><blockquote>\n<p>向 HTML5 页面添加 canvas 元素。(Echarts)</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCanvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"HTML5-Input-类型\"><a href=\"#HTML5-Input-类型\" class=\"headerlink\" title=\"HTML5 Input 类型\"></a>HTML5 Input 类型</h4><blockquote>\n<p>Input 类型 - number</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Points: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"points\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Input 类型 - email</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">E-mail: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user_email\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Input 类型 - url</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Homepage: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user_url\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Input 类型 - range</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"points\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">max</td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定允许的最大值</td>\n</tr>\n<tr>\n<td align=\"left\">min</td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定允许的最小值</td>\n</tr>\n<tr>\n<td align=\"left\">step</td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）</td>\n</tr>\n<tr>\n<td align=\"left\">value</td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定默认值</td>\n</tr>\n</tbody></table>\n<h4 id=\"表单初级验证\"><a href=\"#表单初级验证\" class=\"headerlink\" title=\"表单初级验证\"></a>表单初级验证</h4><blockquote>\n<p>常用方式</p>\n</blockquote>\n<ul>\n<li>placeholder   提示信息</li>\n<li>required   非空</li>\n<li>pattern   正则表达式</li>\n</ul>\n","categories":["HTML"],"tags":["前端"]},{"title":"AJAX 技术","url":"/PaulGeorge123.github.io/2020/05/23/AJAX/","content":"<h4 id=\"AJAX-技术\"><a href=\"#AJAX-技术\" class=\"headerlink\" title=\"AJAX 技术\"></a>AJAX 技术</h4><ul>\n<li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li>\n<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>\n<li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"jQuery（AJAX）\"><a href=\"#jQuery（AJAX）\" class=\"headerlink\" title=\"jQuery（AJAX）\"></a>jQuery（AJAX）</h4><ul>\n<li>jQuery 不是生产者，而是大自然搬运工。</li>\n<li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jQuery.ajax(...)</span><br><span class=\"line\">       部分参数：</span><br><span class=\"line\">              url：请求地址</span><br><span class=\"line\">             type：请求方式，GET、POST（<span class=\"number\">1.9</span><span class=\"number\">.0</span>之后用method）</span><br><span class=\"line\">          headers：请求头</span><br><span class=\"line\">             data：要发送的数据</span><br><span class=\"line\">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class=\"string\">\"application/x-www-form-urlencoded; \t\t\t\t   charset=UTF-8\"</span>)</span><br><span class=\"line\">            async：是否异步</span><br><span class=\"line\">          timeout：设置请求超时时间（毫秒）</span><br><span class=\"line\">       beforeSend：发送请求前执行的函数(全局)</span><br><span class=\"line\">         complete：完成之后执行的回调函数(全局)</span><br><span class=\"line\">          success：成功之后执行的回调函数(全局)</span><br><span class=\"line\">            error：失败之后执行的回调函数(全局)</span><br><span class=\"line\">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</span><br><span class=\"line\">         dataType：将服务器端返回的数据转换成指定类型</span><br><span class=\"line\">            <span class=\"string\">\"xml\"</span>: 将服务器端返回的内容转换成xml格式</span><br><span class=\"line\">           <span class=\"string\">\"text\"</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class=\"line\">           <span class=\"string\">\"html\"</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则\t\t\t\t\t 会尝试去执行。</span><br><span class=\"line\">         <span class=\"string\">\"script\"</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class=\"line\">           <span class=\"string\">\"json\"</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class=\"line\">          <span class=\"string\">\"jsonp\"</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class=\"string\">\"myurl?callback=?\"</span> jQuery 将自动替换  \t\t\t\t\t  为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>1、配置web.xml 和 springmvc的配置文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.guo.controller\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">id</span>=<span class=\"string\">\"internalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 前缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 后缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在线的CDN --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-3.1.1.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下载导入 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、jQuery ajax</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.post(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            url:<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/methods\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            type:<span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            dataType: <span class=\"string\">\"json\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            contentType:<span class=\"string\">\"application/json;charset=UTF-8\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            data:&#123;<span class=\"string\">'name'</span>:$(<span class=\"string\">\"#name\"</span>).val()&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">            success:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxController</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"meta\">@responseBody</span></span><br><span class=\"line\">      <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/methods\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">ajax1</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"info\"</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["Web"]},{"title":"Example","url":"/PaulGeorge123.github.io/2020/05/23/Example%20mybatis/","content":"<h4 id=\"一、mapper接口中的方法解析\"><a href=\"#一、mapper接口中的方法解析\" class=\"headerlink\" title=\"一、mapper接口中的方法解析\"></a>一、mapper接口中的方法解析</h4><p><strong>mapper接口中的函数及方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t        \t方法\t                                         \t  功能说明</span><br><span class=\"line\">int countByExample(UserExample example) thorws SQLException\t       按条件计数</span><br><span class=\"line\">int deleteByPrimaryKey(Integer id) thorws SQLException\t\t\t   按主键删除</span><br><span class=\"line\">int deleteByExample(UserExample example) thorws SQLException\t   按条件查询</span><br><span class=\"line\">String&#x2F;Integer insert(User record) thorws SQLException\t\t\t 插入数据（返回值为ID）</span><br><span class=\"line\">User selectByPrimaryKey(Integer id) thorws SQLException\t\t       按主键查询</span><br><span class=\"line\">ListselectByExample(UserExample example) thorws SQLException\t   按条件查询</span><br><span class=\"line\">ListselectByExampleWithBLOGs(UserExample example) thorws SQLException   按条件查询（包括BLOB字段）。</span><br><span class=\"line\">int updateByPrimaryKey(User record) thorws SQLException\t\t    \t按主键更新</span><br><span class=\"line\">int updateByPrimaryKeySelective(User record) thorws SQLException\t按主键更新值不为null的字段</span><br><span class=\"line\">int updateByExample(User record, UserExample example) thorws SQLException\t按条件更新</span><br><span class=\"line\">int updateByExampleSelective(User record, UserExample example) thorws SQLException\t按条件更新值不为null的字段</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h4 id=\"二、example实例解析\"><a href=\"#二、example实例解析\" class=\"headerlink\" title=\"二、example实例解析\"></a>二、example实例解析</h4><p><strong>mybatis的逆向工程中会生成实例及实例对应的example，example用于添加条件，相当where后面的部分</strong><br>xxxExample example = new xxxExample();<br>Criteria criteria = new Example().createCriteria();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t\t\t方法\t\t\t\t\t\t\t\t\t\t\t\t说明</span><br><span class=\"line\">example.setOrderByClause(“字段名 ASC”);\t \t\t\t添加升序排列条件，DESC为降序</span><br><span class=\"line\">example.setDistinct(false)\t\t\t\t\t去除重复，boolean型，true为选择不重复的记录。</span><br><span class=\"line\">criteria.andXxxIsNull\t\t\t\t\t\t\t 添加字段xxx为null的条件</span><br><span class=\"line\">criteria.andXxxIsNotNull\t\t\t\t\t\t 添加字段xxx不为null的条件</span><br><span class=\"line\">criteria.andXxxEqualTo(value)\t\t\t\t\t 添加xxx字段等于value条件</span><br><span class=\"line\">criteria.andXxxNotEqualTo(value)\t\t\t\t 添加xxx字段不等于value条件</span><br><span class=\"line\">criteria.andXxxGreaterThan(value)\t\t\t\t 添加xxx字段大于value条件</span><br><span class=\"line\">criteria.andXxxGreaterThanOrEqualTo(value)\t\t 添加xxx字段大于等于value条件</span><br><span class=\"line\">criteria.andXxxLessThan(value)\t\t\t\t\t 添加xxx字段小于value条件</span><br><span class=\"line\">criteria.andXxxLessThanOrEqualTo(value)\t\t\t 添加xxx字段小于等于value条件</span><br><span class=\"line\">criteria.andXxxIn(List&lt;？&gt;)\t\t\t\t\t\t添加xxx字段值在List&lt;？&gt;条件</span><br><span class=\"line\">criteria.andXxxNotIn(List&lt;？&gt;)\t\t\t\t\t添加xxx字段值不在List&lt;？&gt;条件</span><br><span class=\"line\">criteria.andXxxLike(“%”+value+”%”)\t\t\t\t 添加xxx字段值为value的模糊查询条件</span><br><span class=\"line\">criteria.andXxxNotLike(“%”+value+”%”)\t\t\t 添加xxx字段值不为value的模糊查询条件</span><br><span class=\"line\">criteria.andXxxBetween(value1,value2)\t\t\t 添加xxx字段值在value1和value2之间条件</span><br><span class=\"line\">criteria.andXxxNotBetween(value1,value2)\t\t 添加xxx字段值不在value1和value2之间条件</span><br></pre></td></tr></table></figure>\n<p><strong>1.查询</strong><br>        ① selectByPrimaryKey()</p>\n<p>User user = XxxMapper.selectByPrimaryKey(100); //相当于select * from user where id = 100</p>\n<p>② selectByExample() 和 selectByExampleWithBLOGs()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">UserExample example &#x3D; new UserExample();</span><br><span class=\"line\">Criteria criteria &#x3D; example.createCriteria();</span><br><span class=\"line\">criteria.andUsernameEqualTo(&quot;wyw&quot;);</span><br><span class=\"line\">criteria.andUsernameIsNull();</span><br><span class=\"line\">example.setOrderByClause(&quot;username asc,email desc&quot;);</span><br><span class=\"line\">List&lt;?&gt;list &#x3D; XxxMapper.selectByExample(example);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：select * from user where username &#x3D; &#39;wyw&#39; and  username is null order by username asc,email desc</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：在iBator逆向工程生成的文件XxxExample.java中包含一个static的内部类Criteria，<br>Criteria中的方法是定义SQL 语句where后的查询条件。</p>\n</blockquote>\n<hr>\n<p><strong>2.插入数据</strong><br>①insert()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user &#x3D; new User();</span><br><span class=\"line\">user.setId(&quot;dsfgsdfgdsfgds&quot;);</span><br><span class=\"line\">user.setUsername(&quot;admin&quot;);</span><br><span class=\"line\">user.setPassword(&quot;admin&quot;)</span><br><span class=\"line\">user.setEmail(&quot;wyw@163.com&quot;);</span><br><span class=\"line\">XxxMapper.insert(user);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：insert into user(ID,username,password,email) values (&#39;dsfgsdfgdsfgds&#39;,&#39;admin&#39;,&#39;admin&#39;,&#39;wyw@126.com&#39;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>3.更新数据</strong><br>①updateByPrimaryKey()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user &#x3D;new User();</span><br><span class=\"line\">user.setId(&quot;dsfgsdfgdsfgds&quot;);</span><br><span class=\"line\">user.setUsername(&quot;wyw&quot;);</span><br><span class=\"line\">user.setPassword(&quot;wyw&quot;);</span><br><span class=\"line\">user.setEmail(&quot;wyw@163.com&quot;);</span><br><span class=\"line\">XxxMapper.updateByPrimaryKey(user);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：update user set username&#x3D;&#39;wyw&#39;, password&#x3D;&#39;wyw&#39;, email&#x3D;&#39;wyw@163.com&#39; where id&#x3D;&#39;dsfgsdfgdsfgds&#39;</span><br></pre></td></tr></table></figure>\n\n<p>②updateByPrimaryKeySelective()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user &#x3D; new User();</span><br><span class=\"line\">user.setId(&quot;dsfgsdfgdsfgds&quot;);</span><br><span class=\"line\">user.setPassword(&quot;wyw&quot;);</span><br><span class=\"line\">XxxMapper.updateByPrimaryKey(user);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：update user set password&#x3D;&#39;wyw&#39; where id&#x3D;&#39;dsfgsdfgdsfgds&#39;</span><br></pre></td></tr></table></figure>\n\n<p>③ updateByExample() 和 updateByExampleSelective()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">UserExample example &#x3D; new UserExample();</span><br><span class=\"line\">Criteria criteria &#x3D; example.createCriteria();</span><br><span class=\"line\">criteria.andUsernameEqualTo(&quot;admin&quot;);</span><br><span class=\"line\">User user &#x3D; new User();</span><br><span class=\"line\">user.setPassword(&quot;wyw&quot;);</span><br><span class=\"line\">XxxMapper.updateByPrimaryKeySelective(user,example);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：update user set password&#x3D;&#39;wyw&#39; where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>updateByExample()更新所有的字段，包括字段为null的也更新，建议使用 updateByExampleSelective()更新想更新的字段</p>\n</blockquote>\n<hr>\n<p><strong>4.删除数据</strong><br>①deleteByPrimaryKey()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">XxxMapper.deleteByPrimaryKey(1);  &#x2F;&#x2F;相当于：delete from user where id&#x3D;1</span><br></pre></td></tr></table></figure>\n\n<p>②deleteByExample()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">UserExample example &#x3D; new UserExample();</span><br><span class=\"line\">Criteria criteria &#x3D; example.createCriteria();</span><br><span class=\"line\">criteria.andUsernameEqualTo(&quot;admin&quot;);</span><br><span class=\"line\">XxxMapper.deleteByExample(example);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：delete from user where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>5.查询数据数量</strong><br>①countByExample()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">UserExample example &#x3D; new UserExample();</span><br><span class=\"line\">Criteria criteria &#x3D; example.createCriteria();</span><br><span class=\"line\">criteria.andUsernameEqualTo(&quot;wyw&quot;);</span><br><span class=\"line\">int count &#x3D; XxxMapper.countByExample(example);</span><br><span class=\"line\">&#x2F;&#x2F;相当于：select count(*) from user where username&#x3D;&#39;wyw&#39;</span><br></pre></td></tr></table></figure>\n\n","categories":["工具"],"tags":["逆向工程（MyBatis）"]},{"title":"Adroid Util","url":"/PaulGeorge123.github.io/2020/08/09/Android-Utila/","content":"<h4 id=\"Android中的日志工具类是Log（android-util-Log），这个类中提供了如下5个方法来供我们打印日志。\"><a href=\"#Android中的日志工具类是Log（android-util-Log），这个类中提供了如下5个方法来供我们打印日志。\" class=\"headerlink\" title=\"Android中的日志工具类是Log（android.util.Log），这个类中提供了如下5个方法来供我们打印日志。\"></a>Android中的日志工具类是Log（android.util.Log），这个类中提供了如下5个方法来供我们打印日志。</h4><ul>\n<li>Log.v()。用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是Android日志里面级别最低的一种。</li>\n<li>Log.d()。用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose高一级。</li>\n<li>Log.i()。用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为数据。对应级别info，比debug高一级。</li>\n<li>Log.w()。用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级。</li>\n<li>Log.e()。用于打印程序中的错误信息，比如程序进入到了catch语句当中。当有错误信息打印出来的时候，一般都代表你的程序出现严重问题了，必须尽快修复。对应级别error，比warn高一级。</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>其实很简单，一共就5个方法，当然每个方法还会有不同的重载，但那对你来说肯定不是什么难理解的地方了。我们现在就在HelloWorld项目中试一试日志工具好不好用吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    String Tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(Tag,<span class=\"string\">\"OnCreate execute!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Log.d()方法中传入了两个参数：第一个参数是tag，一般传入当前的类名就好，主要用于对打印信息进行过滤；第二个参数是msg，即想要打印的具体的内容。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200809171754117.png\" alt=\"\"></p>\n<blockquote>\n<p>这里还有一个小技巧，我们在onCreate()方法的外面输入logt，然后按下Tab键，这时就会以当前的类名作为值自动生成一个TAG常量。</p>\n</blockquote>\n","categories":["Android"],"tags":["Android"]},{"title":"CSS","url":"/PaulGeorge123.github.io/2020/05/23/CSS/","content":"<h4 id=\"css引入样式\"><a href=\"#css引入样式\" class=\"headerlink\" title=\"css引入样式\"></a>css引入样式</h4><p>1.内联</p>\n<figure class=\"highlight\"><figcaption><span>1.内联</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 style=\"color: red\"&gt;我是标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.内部</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">\t<span class=\"selector-tag\">h1</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>3.外联</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 链接式 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">&lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 导入式 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">@import</span> url(<span class=\"string\">\"css/style.css\"</span>);</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>优先级：行内样式&gt;内部样式&gt;外部样式</p>\n</blockquote>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><p>类选择器：class=” “</p>\n<p>Id选择器： id=” “ 全局唯一</p>\n<p>标签选择器：a{}</p>\n<blockquote>\n<p>优先级： id&gt;class&gt;标签</p>\n</blockquote>\n<h4 id=\"选择器-1\"><a href=\"#选择器-1\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*类选择器*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t属性名 = 属性值</span></span><br><span class=\"line\"><span class=\"comment\">\t=绝对等于</span></span><br><span class=\"line\"><span class=\"comment\">\t*=包含</span></span><br><span class=\"line\"><span class=\"comment\">\t^=以这个开头</span></span><br><span class=\"line\"><span class=\"comment\">\t$=以这个结尾</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*class中有item的元素*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-attr\">[class=<span class=\"string\">\"item\"</span>]</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: antiquewhite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*选中href中以www开头的元素*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-attr\">[href^=www]</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: antiquewhite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a href=\"www.baidu.com\" class=\"item\"&gt;超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"CSS字体属性\"><a href=\"#CSS字体属性\" class=\"headerlink\" title=\"CSS字体属性\"></a>CSS字体属性</h4><table>\n<thead>\n<tr>\n<th align=\"left\">Property</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-font.html\" target=\"_blank\" rel=\"noopener\">font</a></td>\n<td align=\"left\">在一个声明中设置所有的字体属性</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-font-family.html\" target=\"_blank\" rel=\"noopener\">font-family</a></td>\n<td align=\"left\">指定文本的字体系列</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-font-size.html\" target=\"_blank\" rel=\"noopener\">font-size</a></td>\n<td align=\"left\">指定文本的字体大小</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-font-style.html\" target=\"_blank\" rel=\"noopener\">font-style</a></td>\n<td align=\"left\">指定文本的字体样式</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-font-variant.html\" target=\"_blank\" rel=\"noopener\">font-variant</a></td>\n<td align=\"left\">以小型大写字体或者正常字体显示文本。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/cssref/pr-font-weight.html\" target=\"_blank\" rel=\"noopener\">font-weight</a></td>\n<td align=\"left\">指定字体的粗细。</td>\n</tr>\n</tbody></table>\n<h4 id=\"CSS伪类\"><a href=\"#CSS伪类\" class=\"headerlink\" title=\"CSS伪类\"></a>CSS伪类</h4><h5 id=\"选择器-伪类名-属性-属性值\"><a href=\"#选择器-伪类名-属性-属性值\" class=\"headerlink\" title=\"选择器 : 伪类名 { 属性 : 属性值 }\"></a>选择器 : 伪类名 { 属性 : 属性值 }</h5><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style type=\"text/css\"&gt;</span><br><span class=\"line\"> \t<span class=\"comment\">/*取消超链接下划线*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">text-decoration</span>:none;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*超链接样式*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>    &#123; <span class=\"attribute\">color</span>: blue;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*点击过的样式*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: purple;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*悬停时的样式*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>   &#123; <span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*点击时的样式*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>  &#123; <span class=\"attribute\">color</span>: yellow;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>没有href的a标签,字体没有修饰，鼠标放上去也没反应<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span> href为#的a标签，默认蓝色，带下划线，鼠标放上去变成手 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.a.com\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>href为网址的a标签，效果同上<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h5><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*悬停时的样式*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"透明度\"><a href=\"#透明度\" class=\"headerlink\" title=\"透明度\"></a>透明度</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>:<span class=\"number\">0.4</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* filter:alpha(opacity=40); */</span> <span class=\"comment\">/* IE8 及其更早版本 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"selector-tag\">Opacity</span>属性值从0<span class=\"selector-class\">.0</span> <span class=\"selector-tag\">-</span> 1<span class=\"selector-class\">.0</span>。值越小，使得元素更加透明。</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["Web"]},{"title":"Git","url":"/PaulGeorge123.github.io/2020/05/23/GitHelp/","content":"<h3 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h3><h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">\"[email address]\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\">$ git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\">暂时将未提交的变化移除，稍后再移入</span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n","categories":["工具"],"tags":["git"]},{"title":"JSON","url":"/PaulGeorge123.github.io/2020/05/23/JSON/","content":"<h4 id=\"什么是-JSON？\"><a href=\"#什么是-JSON？\" class=\"headerlink\" title=\"什么是 JSON？\"></a>什么是 JSON？</h4><ul>\n<li><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</p>\n</li>\n<li><p>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</p>\n</li>\n<li><p>对象表示为键值对，数据由逗号分隔</p>\n</li>\n<li><p>花括号保存对象</p>\n</li>\n<li><p>方括号保存数组</p>\n</li>\n</ul>\n<p><strong>JSON 数据的书写格式是：名称/值对。</strong></p>\n<p><strong>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span> : <span class=\"string\">\"乔治\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"age\"</span>: <span class=\"string\">\"23\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"sex\"</span>: <span class=\"string\">\"男\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p><strong>JSON 对象在大括号（{}）中书写：</strong></p>\n<p><strong>对象可以包含多个名称/值对：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"乔治\"</span> , <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.pg.com\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSON-数组\"><a href=\"#JSON-数组\" class=\"headerlink\" title=\"JSON 数组\"></a>JSON 数组</h4><p><strong>JSON 数组在中括号中书写：</strong></p>\n<p><strong>数组可包含多个对象：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"sites\"</span>: [ </span><br><span class=\"line\">        &#123; <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"乔治\"</span> , <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.pg.com\"</span> &#125;,  </span><br><span class=\"line\">        &#123; <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"google\"</span> , <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.google.com\"</span> &#125;,  </span><br><span class=\"line\">        &#123; <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"百度\"</span> , <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.baidu.com\"</span> &#125; </span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSON-布尔值\"><a href=\"#JSON-布尔值\" class=\"headerlink\" title=\"JSON 布尔值\"></a>JSON 布尔值</h4><p><strong>JSON 布尔值可以是 true 或者 false：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"flag\"</span>:<span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSON-null\"><a href=\"#JSON-null\" class=\"headerlink\" title=\"JSON null\"></a>JSON null</h4><p><strong>JSON 可以设置 null 值：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"name\"</span>:<span class=\"literal\">null</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSON 和 JavaScript 对象互转</strong></p>\n<ul>\n<li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"a\": \"Hello\", \"b\": \"World\"&#125;'</span>); </span><br><span class=\"line\"><span class=\"comment\">//结果是 &#123;a: 'Hello', b: 'World'&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">a</span>: <span class=\"string\">'Hello'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'World'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//结果是 '&#123;\"a\": \"Hello\", \"b\": \"World\"&#125;'</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"fastjson-（pom-xml）\"><a href=\"#fastjson-（pom-xml）\" class=\"headerlink\" title=\"fastjson （pom.xml）\"></a>fastjson （pom.xml）</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.60<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"乱码统一解决\"><a href=\"#乱码统一解决\" class=\"headerlink\" title=\"乱码统一解决\"></a><strong>乱码统一解决</strong></h5><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span> <span class=\"attr\">register-defaults</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"objectMapper\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"failOnEmptyBeans\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"取消timestamps形式-，-自定义时间格式-封装工具类\"><a href=\"#取消timestamps形式-，-自定义时间格式-封装工具类\" class=\"headerlink\" title=\"*取消timestamps形式 ， 自定义时间格式 *(封装工具类)\"></a>*<em>取消timestamps形式 ， 自定义时间格式 *</em>(封装工具类)</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.guo.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtils</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getJson</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getJson(object,<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getJson</span><span class=\"params\">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">//不使用时间戳的方式</span></span><br><span class=\"line\">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自定义日期格式对象</span></span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(dateFormat);</span><br><span class=\"line\">        <span class=\"comment\">//指定日期格式</span></span><br><span class=\"line\">        mapper.setDateFormat(sdf);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mapper.writeValueAsString(object);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/json\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\">    Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    String json = JsonUtils.getJson(date);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["数据格式"]},{"title":"【JVM系列】-- Java的类加载机制","url":"/PaulGeorge123.github.io/2021/06/13/JVM%E7%B3%BB%E5%88%97--Java%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/","content":"<h4 id=\"什么是JVM？\"><a href=\"#什么是JVM？\" class=\"headerlink\" title=\"什么是JVM？\"></a>什么是JVM？</h4><p><strong>百度词条：</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机)，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</span><br><span class=\"line\"></span><br><span class=\"line\">引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>本篇着重介绍一下Java的类加载机制：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"什么是类的加载\"><a href=\"#什么是类的加载\" class=\"headerlink\" title=\"什么是类的加载\"></a>什么是类的加载</h4><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 <code>java.lang.Class</code>对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的 <code>Class</code>对象， <code>Class</code>对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p>\n<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误</p>\n<p><strong>加载.class文件的方式</strong></p>\n<ul>\n<li>从本地系统中直接加载</li>\n<li>通过网络下载.class文件</li>\n<li>从zip，jar等归档文件中加载.class文件</li>\n<li>从专有数据库中提取.class文件</li>\n<li>将Java源文件动态编译为.class文件</li>\n</ul>\n<h4 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h4><p>加载的过程包括了<strong>加载</strong>、<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>、<strong>初始化</strong>五个阶段。</p>\n<p><strong>加载</strong></p>\n<p>查找并加载类的二进制数据加载时类加载过程的第一个阶段，在加载阶段获取类的二进制字节流的动作是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p>\n<p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个 <code>java.lang.Class</code>类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>\n<p><strong>验证：确保被加载的类的正确性</strong></p>\n<p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<p><strong>准备：为类的 <code>静态变量分</code>配内存，并将其初始化为默认值</strong></p>\n<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。</p>\n<p><strong>解析：把类中的符号引用转换为直接引用</strong></p>\n<p>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\n<p><strong>初始化</strong></p>\n<p>初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p>\n<ul>\n<li>①声明类变量是指定初始值</li>\n<li>②使用静态代码块为类变量指定初始值</li>\n</ul>\n<p><strong>结束生命周期</strong></p>\n<p>在如下几种情况下，Java虚拟机将结束生命周期</p>\n<ul>\n<li>执行了 <code>System.exit()</code>方法</li>\n<li>程序正常执行结束</li>\n<li>程序在执行过程中遇到了异常或错误而异常终止</li>\n<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>\n</ul>\n<h4 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h4><p><strong>定义</strong></p>\n<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p>\n","categories":["JVM"],"tags":["Java","进阶"]},{"title":"JavaScript(1)","url":"/PaulGeorge123.github.io/2020/05/23/JavaScript-1/","content":"<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><h5 id=\"数值、文本、图形、音频、视频…\"><a href=\"#数值、文本、图形、音频、视频…\" class=\"headerlink\" title=\"数值、文本、图形、音频、视频…\"></a>数值、文本、图形、音频、视频…</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">js不区分小数和整数 number</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a'</span> 、<span class=\"string\">\"a\"</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h5 id=\"布尔\"><a href=\"#布尔\" class=\"headerlink\" title=\"布尔\"></a>布尔</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> 、 <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;&amp;\t\t\t都真为真</span><br><span class=\"line\">||\t\t\t一个为真，结果为真</span><br><span class=\"line\">!\t\t\t真即假，假即真</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">=</span><br><span class=\"line\">==\t\t\t等于(类型不同，值相同，结果判断为<span class=\"literal\">true</span>)</span><br><span class=\"line\">===\t\t\t绝对等于(类型相同，值相同，结果判断为<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最好使用===</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">注意: <span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> ,这个值与所有的值都不相等，包括自己</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><h5 id=\"Java的数组中类型必须相同类型的对象，JS中不需要这样\"><a href=\"#Java的数组中类型必须相同类型的对象，JS中不需要这样\" class=\"headerlink\" title=\"Java的数组中类型必须相同类型的对象，JS中不需要这样\"></a>Java的数组中类型必须相同类型的对象，JS中不需要这样</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">'hello word'</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Arry(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">'hello word'</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果数组下标越界，显示 undefined</p>\n</blockquote>\n<h4 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">对象是大括号，数组是中括号，最后一个不需要添加</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"取对象值\"><a href=\"#取对象值\" class=\"headerlink\" title=\"取对象值\"></a>取对象值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">链式取值，通过对象·的方式</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> \t全局变量</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> \t局部变量</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><h5 id=\"1、多行编写\"><a href=\"#1、多行编写\" class=\"headerlink\" title=\"1、多行编写\"></a>1、多行编写</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> msg = </span><br><span class=\"line\">    <span class=\"string\">`hello</span></span><br><span class=\"line\"><span class=\"string\">\tword</span></span><br><span class=\"line\"><span class=\"string\">\t!`</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、字符串长度\"><a href=\"#2、字符串长度\" class=\"headerlink\" title=\"2、字符串长度\"></a>2、字符串长度</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">str.length</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、substring\"><a href=\"#3、substring\" class=\"headerlink\" title=\"3、substring\"></a>3、substring</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[)</span><br><span class=\"line\"> str.substring(<span class=\"number\">1</span>)\t<span class=\"comment\">//从第一个字符截取到最后一个字符</span></span><br><span class=\"line\"> str.substring(<span class=\"number\">1</span>,<span class=\"number\">3</span>)\t\t<span class=\"comment\">//[1,3])</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组-1\"><a href=\"#数组-1\" class=\"headerlink\" title=\"数组\"></a>数组</h4><h5 id=\"Array可以包含任意类型的数据类型\"><a href=\"#Array可以包含任意类型的数据类型\" class=\"headerlink\" title=\"Array可以包含任意类型的数据类型\"></a>Array可以包含任意类型的数据类型</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1、长度\"><a href=\"#1、长度\" class=\"headerlink\" title=\"1、长度\"></a>1、长度</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.length</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：加入给 arr.length 赋值，数组大小会发生变化，如果数值小于元素个数，元素就会丢失</p>\n</blockquote>\n<h5 id=\"2、indexOf，通过元素下标获得索引\"><a href=\"#2、indexOf，通过元素下标获得索引\" class=\"headerlink\" title=\"2、indexOf，通过元素下标获得索引\"></a>2、indexOf，通过元素下标获得索引</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.indexOf(<span class=\"number\">2</span>)</span><br><span class=\"line\">字符串 <span class=\"string\">\"1\"</span> 和数字 <span class=\"number\">1</span> 是不同的</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、slice-截取Array的一部分，功能强大的方法，返回一个新的数字\"><a href=\"#3、slice-截取Array的一部分，功能强大的方法，返回一个新的数字\" class=\"headerlink\" title=\"3、slice() 截取Array的一部分，功能强大的方法，返回一个新的数字\"></a>3、slice() 截取Array的一部分，功能强大的方法，返回一个新的数字</h5><h5 id=\"4、push-，shift-头部\"><a href=\"#4、push-，shift-头部\" class=\"headerlink\" title=\"4、push() ，shift() 头部\"></a>4、push() ，shift() 头部</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">unshift: 压入头部</span><br><span class=\"line\">shift: 弹出头部的一个元素</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、排序-sort\"><a href=\"#5、排序-sort\" class=\"headerlink\" title=\"5、排序 sort()\"></a>5、排序 sort()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"A\"</span>]</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">[<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6、元素反转-reverse\"><a href=\"#6、元素反转-reverse\" class=\"headerlink\" title=\"6、元素反转 reverse()\"></a>6、元素反转 reverse()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>]</span><br><span class=\"line\">arr.reverse()</span><br><span class=\"line\">[<span class=\"string\">\"C\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"A\"</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7、concat\"><a href=\"#7、concat\" class=\"headerlink\" title=\"7、concat()\"></a>7、concat()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>]</span><br><span class=\"line\">arr.concat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">注意: concat()并没有修改数据，只是返回一个新的数组</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8、join\"><a href=\"#8、join\" class=\"headerlink\" title=\"8、join()\"></a>8、join()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>]</span><br><span class=\"line\">arr.join(<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"string\">\"A-B-C\"</span></span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["脚本语言"]},{"title":"【JVM系列】-- JVM内存结构","url":"/PaulGeorge123.github.io/2021/06/13/JVM%E7%B3%BB%E5%88%97--JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/","content":"<p><font color=#008000>什么是JVM？</font></p>\n<p><strong>百度词条：</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机)，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</span><br><span class=\"line\"></span><br><span class=\"line\">引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>本篇着重介绍一下JVM内存结构：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"JVM内存结构图\"><a href=\"#JVM内存结构图\" class=\"headerlink\" title=\"JVM内存结构图\"></a>JVM内存结构图</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" style=\"zoom:67%;\" />\n\n<p>JVM内存结构主要有三大块：<strong>堆内存</strong>、<strong>方法区</strong>和<strong>栈</strong>。堆内存是JVM中最大的一块由年轻代和老年代组成，而年轻代内存又被分成三部分，<strong>Eden空间</strong>、<strong>From Survivor空间</strong>、<strong>To Survivor空间</strong>,默认情况下年轻代按照<strong>8:1:1</strong>的比例来分配；</p>\n<p>方法区存储<strong>类信息、常量、静态变</strong>量等数据，是<strong>线程共享</strong>的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)；栈又分为java虚拟机栈和本地方法栈主要用于方法的执行。</p>\n<p><strong>线程与进程：</strong></p>\n<ul>\n<li>同步于线程：程序计数器、虚拟机栈、本地方法栈</li>\n<li>同步于进程：方法区、堆</li>\n</ul>\n<hr>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。<strong>唯一一个不会出现Stack Overflow Error 的地方。</strong></p>\n<h4 id=\"JVM栈\"><a href=\"#JVM栈\" class=\"headerlink\" title=\"JVM栈\"></a>JVM栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，<strong>它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：</strong>每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。<strong>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</strong></p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而<strong>本地方法栈则是为虚拟机使用到的Native方法服务。</strong></p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，<strong>它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</strong>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><p>1、对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中<strong>最大</strong>的一块。<strong>几乎所有的对象实例都在这里分配内存</strong>。</p>\n<p>2、Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“<strong>GC堆</strong>”。</p>\n<p><strong>控制参数</strong></p>\n<ul>\n<li>-Xms设置堆的最小空间大小。</li>\n<li>-Xmx设置堆的最大空间大小。</li>\n<li>-XX:NewSize设置新生代最小空间大小。</li>\n<li>-XX:MaxNewSize设置新生代最大空间大小。</li>\n<li>-XX:PermSize设置永久代最小空间大小。</li>\n<li>-XX:MaxPermSize设置永久代最大空间大小。</li>\n<li>-Xss设置每个线程的堆栈大小。</li>\n</ul>\n<p>没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。</p>\n<blockquote>\n<p>老年代空间大小=堆空间大小-年轻代大空间大小</p>\n</blockquote>\n<h4 id=\"内存结构相关包含\"><a href=\"#内存结构相关包含\" class=\"headerlink\" title=\"内存结构相关包含\"></a>内存结构相关包含</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-21_01-13-25.png\" style=\"zoom:80%;\" />","categories":["JVM"],"tags":["Java","进阶"]},{"title":"【JVM系列】-- JVM垃圾回收机制","url":"/PaulGeorge123.github.io/2021/06/13/JVM%E7%B3%BB%E5%88%97--JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/","content":"<p><strong>写在前面</strong></p>\n<p>为啥要写这篇文章呢？还要从很久之前的一次问答说起！</p>\n<p><font color=#008000>什么是 Java 垃圾回收机制？（ JC 哥问我）</font></p>\n<p>我：就是收集一些不被用到的对象，然后集中销毁吧~</p>\n<p><font color=#008000>那应该如何来判断那些对象不被用到呢？</font></p>\n<p>我：好像是 … … 我真的不知道</p>\n<p><font color=#008000>仔细想想</font></p>\n<p>我：莫非是判断此对象有没有它的引用？或者说有没有指针指向它？</p>\n<p><font color=#008000>我就说嘛，想想能知道的，继续</font></p>\n<p>我：继续不下去了，按照我做前端的经验，难道是通过价格标志位来判断的？</p>\n<p><font color=#008000>是个办法，具体呢？</font></p>\n<p>我：xxx xxx</p>\n<p>…</p>\n<p>…</p>\n<p>最后，我还是决定回去好好看一下相关的知识吧！（算是感谢他对于我的帮助）</p>\n<p><strong>本篇着重介绍一下JVM垃圾回收机制：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"Java垃圾回收机制\"><a href=\"#Java垃圾回收机制\" class=\"headerlink\" title=\"Java垃圾回收机制\"></a>Java垃圾回收机制</h3><p>在 java 中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。</p>\n<p>在<code>JVM</code>中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫描那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。</p>\n<p><font color=#008000>回去好好看一下什么是 GC ，那GC 是什么？</font></p>\n<h3 id=\"GC-是什么？为什么要-GC\"><a href=\"#GC-是什么？为什么要-GC\" class=\"headerlink\" title=\"GC 是什么？为什么要 GC\"></a>GC 是什么？为什么要 GC</h3><p>GC 垃圾收集（Gabage Collection），内存处理是编程人员容易出现问题的地方，忘记或者错误的内存。</p>\n<p>不当的回收可能会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。</p>\n<p>对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。</p>\n<p><font color=#008000>首先来看一下 Java 中都有哪些引用类型吧</font></p>\n<h3 id=\"Java-中的引用类型\"><a href=\"#Java-中的引用类型\" class=\"headerlink\" title=\"Java 中的引用类型\"></a>Java 中的引用类型</h3><ol>\n<li>强引用：发生 gc 的时候不会被回收。</li>\n<li>软引用：有用但不是必须的对象，在发生内存溢出之前会被回收。</li>\n<li>弱引用：有用但不是必须的对象，在下一次GC时会被回收。</li>\n<li>虚引用（幽灵引用/幻影引用）：无法通过虚引用获得对象，用 PhantomReference 实现虚引用，虚引用的用途是在 gc 时返回一个通知。</li>\n</ol>\n<p><font color=#008000>我之前说通过标记位（flag）来判断对象是否被引用，算是说对了一点点吧</font></p>\n<h3 id=\"如何判断对象是否可以被回收？什么时候被回收？\"><a href=\"#如何判断对象是否可以被回收？什么时候被回收？\" class=\"headerlink\" title=\"如何判断对象是否可以被回收？什么时候被回收？\"></a>如何判断对象是否可以被回收？什么时候被回收？</h3><p><strong>一般有两种方法来判断：</strong></p>\n<ol>\n<li><strong>引用计数器法</strong><br>为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。但是他有一个缺点是不能解决循环引用的问题。</li>\n</ol>\n<ol start=\"2\">\n<li><strong>可达性分析算法</strong><br>从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</li>\n</ol>\n<blockquote>\n<p>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。</p>\n</blockquote>\n<p><font color=#008000>说了这么多，既然是算法都分别有哪些呢？</font></p>\n<h3 id=\"JVM-的垃圾回收算法？\"><a href=\"#JVM-的垃圾回收算法？\" class=\"headerlink\" title=\"JVM 的垃圾回收算法？\"></a>JVM 的垃圾回收算法？</h3><ul>\n<li><p>标记-清除算法</p>\n</li>\n<li><p>标记-复制算法</p>\n</li>\n<li><p>标记-整理算法</p>\n</li>\n<li><p>分代-收集算法</p>\n</li>\n</ul>\n<h4 id=\"标记-清除算法（mark-sweep）\"><a href=\"#标记-清除算法（mark-sweep）\" class=\"headerlink\" title=\"标记-清除算法（mark-sweep）\"></a>标记-清除算法（mark-sweep）</h4><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>该算法分为两个阶段，<strong>标记和清除</strong>。</p>\n<p>标记阶段标记所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><p>执行速度快</p>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>执行效率不稳定，大量的标记、清除</li>\n<li>内存碎片严重化，后续可能发生对象不能找到利用空间的问题</li>\n</ol>\n<h4 id=\"标记-复制算法（mark-cope）\"><a href=\"#标记-复制算法（mark-cope）\" class=\"headerlink\" title=\"标记-复制算法（mark-cope）\"></a>标记-复制算法（mark-cope）</h4><p>标记-复制算法也称为【半区复制】</p>\n<h5 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>按内存容量将内存划分为等大小的两块。</p>\n<p>每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉。</p>\n<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><p>内存连续</p>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><p>内存使用率不高，只有原来的一半，浪费内存空间</p>\n<h4 id=\"标记-整理算法（mark-compact）\"><a href=\"#标记-整理算法（mark-compact）\" class=\"headerlink\" title=\"标记-整理算法（mark-compact）\"></a>标记-整理算法（mark-compact）</h4><h5 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>改进于标记-标记-清除算法，通过标记后将存活的对象移动向内存的一端，然后清除端边界外的对象。</p>\n<h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><p>保证了内存的连续性，不会浪费内存。</p>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li><p>效率低（需要移动内存对象）</p>\n</li>\n<li><p>移动时会有并发问题。</p>\n</li>\n</ol>\n<p><font color=#008000>重点说一下分代-收集算法</font></p>\n<h4 id=\"分代-收集算法（generation-collect）\"><a href=\"#分代-收集算法（generation-collect）\" class=\"headerlink\" title=\"分代-收集算法（generation-collect）\"></a>分代-收集算法（generation-collect）</h4><h5 id=\"原理-3\"><a href=\"#原理-3\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>根据对象存活周期的不同将内存划分为几块，一般是<strong>新生代</strong>和<strong>老年代</strong>，新生代基本采用标记-复制算法，老年代采用标记-整理算法和标记-清除算法。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-21_02-26-58.png\" alt=\"\"></p>\n<p>新生代每次垃圾回收大偶会后大批的对象死去，每次回收存活后的少量对象在阈值将去到老年代。</p>\n<h5 id=\"回收\"><a href=\"#回收\" class=\"headerlink\" title=\"回收\"></a>回收</h5><p><strong>对象优先在 Eden 区分配：</strong></p>\n<p>多数情况，对象都在新生代 Eden 区分配。</p>\n<p>当 Eden 区分配没有足够的空间进行分配时，虚拟机将会发起一次 Minor GC。</p>\n<p>如果本次 GC 后还是没有足够的空间，则将启用分配担保机制在老年代中分配内存。</p>\n<ul>\n<li><strong>Minor GC</strong> 是指发生在新生代的 GC，因为 Java 对象大多都是朝生夕死，所有 Minor GC 非常频繁，一般回收速度也非常快；</li>\n<li><strong>Major GC/Full GC</strong> 是指发生在老年代的 GC，出现了 Major GC 通常会伴随至少一次 Minor GC。Major GC 的速度通常会比 Minor GC 慢 10 倍以上。</li>\n</ul>\n<p><strong>大对象直接进入老年代</strong></p>\n<p>新生代使用的是标记-清除算法来处理垃圾回收的，如果大对象直接在新生代分配就会导致 Eden 区和两个 Survivor 区之间发生大量的内存复制。</p>\n<p>所谓大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。</p>\n<p>大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来 “安置” 它们。<br>        虚拟机提供了一个<code>XX:PretenureSizeThreshold</code>参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制（新生代采用的是复制算法）。</p>\n<p><strong>长期存活对象将进入老年代</strong></p>\n<p>虚拟机采用分代收集的思想来管理内存，那么内存回收时就必须判断哪些对象应该放在新生代，哪些对象应该放在老年代。</p>\n<p>因此虚拟机给每个对象定义了一个对象年龄的计数器，如果对象在 Eden 区出生，并且能够被 Survivor 容纳，将被移动到 Survivor 空间中，这时设置对象年龄为 1。</p>\n<p>对象在 Survivor 区中每过一次 Minor GC 年龄就加 1，当年龄达到一定程度（默认 15） 就会被晋升到老年代。</p>\n","categories":["JVM"],"tags":["Java","进阶"]},{"title":"JavaScript(3)","url":"/PaulGeorge123.github.io/2020/05/23/JavaScript-3/","content":"<h4 id=\"操作BOM对象\"><a href=\"#操作BOM对象\" class=\"headerlink\" title=\"操作BOM对象\"></a>操作BOM对象</h4><h5 id=\"location-代表当前页面的URL信息\"><a href=\"#location-代表当前页面的URL信息\" class=\"headerlink\" title=\"location 代表当前页面的URL信息\"></a>location 代表当前页面的URL信息</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(location.href);</span><br><span class=\"line\">chrome-extension:<span class=\"comment\">//nnnkddnnlpamobajfibfdgfnbcnkgngh/pages/newtab.html</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"Window-对象\"><a href=\"#Window-对象\" class=\"headerlink\" title=\"Window 对象\"></a>Window 对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.document.getElementById(<span class=\"string\">\"header\"</span>);</span><br><span class=\"line\">与此相同：</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document()\"></a>document()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.title</span><br><span class=\"line\"><span class=\"string\">\"百度一下，你就知道\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\"><span class=\"string\">\"BIDUPSID=B5A33A7723E31891D11081193B8BAD69; PSTM=1575547435; BD_UPN=12314753; sug=3; sugstore=0; ORIGIN=0; bdime=0; BAIDUID=B5A33A7723E31891C98C04C5D2C415D3:SL=0:NR=10:FG=1; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; H_PS_PSSID=; BDRCVFR[BCzcNGRrF63]=mk3SLVN4HKm; delPer=0; BD_HOME=0; BD_CK_SAM=1; PSINO=7; H_PS_645EC=68ebIOGcQ%2F4HK5HwBH8P8L%2FiK8ixVLlPeV17sV9O3KKNDcFLWxrGpER1wrknAgyiyOwPI2U\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Window-History\"><a href=\"#Window-History\" class=\"headerlink\" title=\"Window History\"></a>Window History</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">history.back() - 与在浏览器点击后退按钮相同</span><br><span class=\"line\">history.forward() - 与在浏览器中点击向前按钮相同</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"操作BOM对象-1\"><a href=\"#操作BOM对象-1\" class=\"headerlink\" title=\"操作BOM对象()\"></a>操作BOM对象()</h4><ul>\n<li>更新DOM节点</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>first<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>p1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"p2\"</span>&gt;</span>p2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">var</span> h1 = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"h1\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"keyword\">var</span> p2 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"p2\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).innerHTML=<span class=\"string\">\"新文本!\"</span>;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>遍历DOM节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除DOM节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>first<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>p1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"p2\"</span>&gt;</span>p2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var father = document.getElementById(\"father\");</span><br><span class=\"line\">father.removeChild(p1)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加DOM节点</p>\n<blockquote>\n<p>获得了DOM节点，假设dom节点是空的，我们可以通过innerHTML来增加一个元素，但是此DOM节点已经存在元素，我们就不能够这样做！</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"操作表单\"><a href=\"#操作表单\" class=\"headerlink\" title=\"操作表单\"></a>操作表单</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>用<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id名\"</span>).value来获取</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>通过form表单中的id名或者name名来获取</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">是否选中:</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"checkbox\"</span> name=<span class=\"string\">\"box\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">var</span> check = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(check.checked);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"MD5-加密\"><a href=\"#MD5-加密\" class=\"headerlink\" title=\"MD5 加密\"></a>MD5 加密</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- MD5工具类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/blueimp-md5/1.1.0/js/md5.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"submit()\"</span> &gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> username = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> password = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"password\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(username.value);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//MD5 加密算法</span></span></span><br><span class=\"line\">        password.value = md5(password.value);</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(password.value)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>定时器</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">setTimeout():方法用于在指定的毫秒数后调用函数或计算表达式。//只执行 code 一次</span><br><span class=\"line\">setInterval():方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> myVar;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\">        myVar = setTimeout(alertFunc, 3000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertFunc</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"Hello!\"</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> myVar;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\">        myVar = setInterval(alertFunc, 3000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertFunc</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"Hello!\"</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout用于延迟执行某方法或功能</span><br><span class=\"line\">setInterval则一般用于刷新表单，对于一些表单的假实时指定时间刷新同步</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["脚本语言"]},{"title":"Junit测试","url":"/PaulGeorge123.github.io/2021/02/13/Junit%E6%B5%8B%E8%AF%95/","content":"<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>在最开始的时候，我做程序的时候通常都是在实现一个功能后启动整个项目，然后对此功能进行自测，但是随着项目的体量主键庞大后，测试的时间效率反而越来越低了，那么有没有不启动项目就可以进行专项功能测试的方法呢？</p>\n<p>当然是有的啦，单元测试（Junit testing）就很好的解决了上述的问题。</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><ol>\n<li><p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。在Java中单元测试的最小单元是类。</p>\n</li>\n<li><p>单元测试是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。执行单元测试，就是为了证明这 段代码的行为和我们期望是否一致。</p>\n</li>\n</ol>\n<h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><h5 id=\"单元测试引用：\"><a href=\"#单元测试引用：\" class=\"headerlink\" title=\"单元测试引用：\"></a>单元测试引用：</h5><ol>\n<li>通过spring initialize创建的Spring Boot项目会在Maven中自动携带很多starter依赖，其中包含了一个名为<code>spring-boot-starter-test</code>的依赖</li>\n<li>Spring Boot中引入单元测试很简单，添加如下依赖（即<code>spring-boot-starter-test</code>依赖）</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"单元测试的作用\"><a href=\"#单元测试的作用\" class=\"headerlink\" title=\"单元测试的作用\"></a>单元测试的作用</h5><p>在没有接触单元测试之前我们是怎么做测试的？一般有两个方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">弊端</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1、启动整个项目，模拟正常的用户操作，点击之类的操作，调用API</td>\n<td align=\"center\">测试的时候需要启动整个项目</td>\n</tr>\n<tr>\n<td align=\"center\">2、在代码的某个地方写一个临时的入口，用于测试某个类或某个方法</td>\n<td align=\"center\">入口用完需要删除，否则会影响运行速度或效率</td>\n</tr>\n</tbody></table>\n<p>我认为写单元测试的两个目的：</p>\n<ol>\n<li><p>保证或验证实现功能。</p>\n</li>\n<li><p>保护已经实现的功能不被破坏。</p>\n</li>\n</ol>\n<h5 id=\"Service层的单元测试\"><a href=\"#Service层的单元测试\" class=\"headerlink\" title=\"Service层的单元测试\"></a>Service层的单元测试</h5><p>位置：Spring Boot中单元测试类写在src/test/java目录下；</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">JUtServiceTest</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JUtService jUtService;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">conflictTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        LocalDate start = LocalDate.parse(<span class=\"string\">\"2020-10-26\"</span>, dtf);</span><br><span class=\"line\">        LocalDate end = LocalDate.parse(<span class=\"string\">\"2020-10-31\"</span>, dtf);</span><br><span class=\"line\">        Integer integer = XXXService.ConflictTime(<span class=\"string\">\"10000001\"</span>, start, end);</span><br><span class=\"line\">        Assert.assertThat(integer, Matchers.notNullValue());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注解解释：</p>\n<ul>\n<li><code>@SpringBootTest</code>：获取启动类，加载配置，寻找主配置启动类（被 @SpringBootApplication 注解的）</li>\n<li><code>@RunWith(SpringRunner.class)</code>：让JUnit运行Spring的测试环境,获得Spring环境的上下文的支持</li>\n</ul>\n<h5 id=\"Controller层的单元测试\"><a href=\"#Controller层的单元测试\" class=\"headerlink\" title=\"Controller层的单元测试\"></a>Controller层的单元测试</h5><p>位置：Spring Boot中单元测试类写在src/test/java目录下；</p>\n<p>举个荔枝1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">AutoConfigureMockMvc</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">JutControllerTest</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"><span class=\"meta\">@Before</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"---------------start---------------\"</span>);</span><br><span class=\"line\">       save();</span><br><span class=\"line\">get();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"================end================\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注解解释：</p>\n<ul>\n<li><code>@SpringBootTest</code>：获取启动类，加载配置，寻找主配置启动类（被 @SpringBootApplication 注解的）</li>\n<li><code>@RunWith(SpringRunner.class)</code>：让JUnit运行Spring的测试环境,获得Spring环境的上下文的支持</li>\n<li><code>@AutoConfigureMockMvc</code>：用于自动配置MockMvc,配置后MockMvc类可以直接注入,相当于new MockMvc </li>\n<li><code>@Before</code>:初始化方法 ,对于每一个测试方法都要执行一次</li>\n</ul>\n<p>举个荔枝2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders</span><br><span class=\"line\">                .get(<span class=\"string\">\"/balabala/get\"</span>)</span><br><span class=\"line\">                .param(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"**********\"</span>)</span><br><span class=\"line\">                .header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Bearer ********-****-****-****-************\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        resultActions.andReturn().getResponse().setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        resultActions.andExpect(MockMvcResultMatchers.status().isOk()).andDo(print());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注解解释：</p>\n<ol>\n<li><code>mockMvc.perform</code>：执行一个请求</li>\n<li><code>MockMvcRequestBuilders.get(“/balabala/get”)</code>：构造一个请求，如果是<code>Post</code>请求使用.post方法</li>\n<li><code>contentType(MediaType.APPLICATION_JSON_VALUE)</code>：代表发送端发送的数据格式是application/json;charset=UTF-8</li>\n<li><code>accept(MediaType.APPLICATION_JSON)</code>：代表客户端希望接受的数据类型为application/json;charset=UTF-8</li>\n<li><code>header(“Authorization”,“Bearer XXXX”)</code>：代表在报文头添加一些必须的信息，这里添加的是token</li>\n<li><code>ResultActions.andExpect</code>：添加执行完成后的断言</li>\n<li><code>ResultActions.andExpect(MockMvcResultMatchers.status().isOk())</code>：方法看请求的状态响应码是否为200如果不是则抛异常，测试不通过</li>\n<li><code>ResultActions.andDo</code>：添加一个结果处理器，表示要对结果做点什么事情，比如此处使用print()：输出整个响应结果信息</li>\n</ol>\n<h4 id=\"JUnit-5测试\"><a href=\"#JUnit-5测试\" class=\"headerlink\" title=\"JUnit 5测试\"></a>JUnit 5测试</h4><h5 id=\"JUnit-生命周期\"><a href=\"#JUnit-生命周期\" class=\"headerlink\" title=\"JUnit 生命周期\"></a>JUnit 生命周期</h5><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">JUnit5Test</span> &#123;</span><br><span class=\"line\">    @BeforeAll</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeAll</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Before All\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterAll</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">afterAll</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"After All\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @BeforeEach</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">before</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Before\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterEach</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">after</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"After\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Test 1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Test 2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<p>@Test：表示方法是测试方法；</p>\n<p>@BeforeAll：表示被注解的方法应该在当前类的<font color=#008000>所有</font>@Test方法<font color=#008000>之前</font>执行；</p>\n<p>@AfterAll：表示被注解的方法应该在当前类的<font color=#008000>所有</font>@Test方法<font color=#008000>之后</font>执行；</p>\n<p>@BeforeEach：表示被注解的方法应在当前类的<font color=#FFA500>每个</font>@Test方法<font color=#FFA500>之前</font>执行；</p>\n<p>@AfterEach：表示被注解的方法应在当前类的<font color=#FFA500>每个</font>@Test方法<font color=#FFA500>之后</font>执行；</p>\n<h5 id=\"编写断言\"><a href=\"#编写断言\" class=\"headerlink\" title=\"编写断言\"></a>编写断言</h5><ol>\n<li>简单断言</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">assertEquals</td>\n<td align=\"center\">判断两个对象或两个原始类型是否相等</td>\n</tr>\n<tr>\n<td align=\"center\">assertNotEquals</td>\n<td align=\"center\">判断两个对象或两个原始类型是否不相等</td>\n</tr>\n<tr>\n<td align=\"center\">assertSame</td>\n<td align=\"center\">判断两个对象引用是否指向同一个对象</td>\n</tr>\n<tr>\n<td align=\"center\">assertNotSame</td>\n<td align=\"center\">判断两个对象引用是否指向不同的对象</td>\n</tr>\n<tr>\n<td align=\"center\">assertTrue</td>\n<td align=\"center\">判断给定的布尔值是否为 true</td>\n</tr>\n<tr>\n<td align=\"center\">assertFalse</td>\n<td align=\"center\">判断给定的布尔值是否为 false</td>\n</tr>\n<tr>\n<td align=\"center\">assertNull</td>\n<td align=\"center\">判断给定的对象引用是否为 null</td>\n</tr>\n<tr>\n<td align=\"center\">assertNotNull</td>\n<td align=\"center\">判断给定的对象引用是否不为 null</td>\n</tr>\n</tbody></table>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testAssertion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    assertTrue(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    assertEquals(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">\"两个数相等\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前面断言失败，后面不会继续执行</p>\n</blockquote>\n<ol start=\"2\">\n<li>数组断言</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">@DisplayName(<span class=\"string\">\"array assertion\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">array</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    assertArrayEquals(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>组合断言</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">@DisplayName(<span class=\"string\">\"assert all\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">all</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"> assertAll(<span class=\"string\">\"Math\"</span>,</span><br><span class=\"line\">    () -&gt; assertEquals(<span class=\"number\">2</span>, <span class=\"number\">1</span> + <span class=\"number\">1</span>),</span><br><span class=\"line\">    () -&gt; assertTrue(<span class=\"number\">1</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>异常断言</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">@DisplayName(<span class=\"string\">\"异常测试\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionTest</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ArithmeticException exception = assertThrows(</span><br><span class=\"line\">        <span class=\"comment\">//扔出断言异常</span></span><br><span class=\"line\">        ArithmeticException.class, () -&gt; System.out.println(1 % 0));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>超时断言</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">@DisplayName(<span class=\"string\">\"超时测试\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">timeoutTest</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果测试方法时间超过1s将会异常</span></span><br><span class=\"line\">    assertTimeout(Duration.ofMillis(<span class=\"number\">1000</span>), () -&gt; Thread.sleep(<span class=\"number\">500</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>快速断言</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">@DisplayName(<span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouldFail</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"> \tfail(<span class=\"string\">\"This should fail\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h5><p>显示名称【@DisplayName】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"A special test case\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayNameDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"Custom test name containing spaces\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWithDisplayNameContainingSpaces</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"╯°□°）╯\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWithDisplayNameContainingSpecialCharacters</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"😱\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWithDisplayNameContainingEmoji</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>禁用测试【@Disabled】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Disabled</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisabledTestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">//@Disabled</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testDisabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重复测试【@RepeatedTest】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RepeatedTestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RepeatedTest</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testRepeated10Times</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>附带标签【@RepeatedTest】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Tag</span>(<span class=\"string\">\"taggedTest\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@Tag</span>(<span class=\"string\">\"taggedTest1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWithTag1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@Tag</span>(<span class=\"string\">\"taggedTest2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWithTag2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>嵌套测试【@Nested】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"外层测试\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NestedDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testOuter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nested</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"内层测试\"</span>)</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerTestDemo</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testInner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["规范"],"tags":["测试"]},{"title":"JavaScript(2)","url":"/PaulGeorge123.github.io/2020/05/23/JavaScript-2/","content":"<h4 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h4><h5 id=\"1、对象赋值\"><a href=\"#1、对象赋值\" class=\"headerlink\" title=\"1、对象赋值\"></a>1、对象赋值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">person.name = <span class=\"string\">\"gyh\"</span></span><br><span class=\"line\"><span class=\"string\">\"gyh\"</span></span><br><span class=\"line\">person.name</span><br><span class=\"line\"><span class=\"string\">\"gyh\"</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h5 id=\"2、使用一个不存在的对象属性，不会报错（undefined）\"><a href=\"#2、使用一个不存在的对象属性，不会报错（undefined）\" class=\"headerlink\" title=\"2、使用一个不存在的对象属性，不会报错（undefined）\"></a>2、使用一个不存在的对象属性，不会报错（undefined）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">person.haha</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3、动态的删减属性，通过delete删除对象的属性\"><a href=\"#3、动态的删减属性，通过delete删除对象的属性\" class=\"headerlink\" title=\"3、动态的删减属性，通过delete删除对象的属性\"></a>3、动态的删减属性，通过delete删除对象的属性</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> person.name </span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JavaScript-循环\"><a href=\"#JavaScript-循环\" class=\"headerlink\" title=\"JavaScript 循环\"></a>JavaScript 循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cars.length; i++) &#123; </span><br><span class=\"line\">    text += cars[i] + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">text += cars[<span class=\"number\">0</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>; </span><br><span class=\"line\">text += cars[<span class=\"number\">1</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>; </span><br><span class=\"line\">text += cars[<span class=\"number\">2</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>; </span><br><span class=\"line\">text += cars[<span class=\"number\">3</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>; </span><br><span class=\"line\">text += cars[<span class=\"number\">4</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>; </span><br><span class=\"line\">text += cars[<span class=\"number\">5</span>] + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h4><h5 id=\"for-循环的语法如下：\"><a href=\"#for-循环的语法如下：\" class=\"headerlink\" title=\"for 循环的语法如下：\"></a>for 循环的语法如下：</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (语句 1; 语句 2; 语句 3) &#123;</span><br><span class=\"line\">     要执行的代码块</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for-in-循环\"><a href=\"#for-in-循环\" class=\"headerlink\" title=\"for  in  循环\"></a>for  in  循环</h4><h5 id=\"JavaScript-for-in-语句遍历对象的属性：\"><a href=\"#JavaScript-for-in-语句遍历对象的属性：\" class=\"headerlink\" title=\"JavaScript for/in 语句遍历对象的属性：\"></a>JavaScript for/in 语句遍历对象的属性：</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var person &#x3D; &#123;fname:&quot;Bill&quot;, lname:&quot;Gates&quot;, age:62&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">var text &#x3D; &quot;&quot;;</span><br><span class=\"line\">var x;</span><br><span class=\"line\">for (x in person) &#123;</span><br><span class=\"line\">    text +&#x3D; person[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><h5 id=\"Date-对象方法\"><a href=\"#Date-对象方法\" class=\"headerlink\" title=\"Date 对象方法\"></a>Date 对象方法</h5><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_Date.asp\" target=\"_blank\" rel=\"noopener\">Date()</a></td>\n<td align=\"left\">返回当日的日期和时间。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_getDate.asp\" target=\"_blank\" rel=\"noopener\">getDate()</a></td>\n<td align=\"left\">从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_getDay.asp\" target=\"_blank\" rel=\"noopener\">getDay()</a></td>\n<td align=\"left\">从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_getMonth.asp\" target=\"_blank\" rel=\"noopener\">getMonth()</a></td>\n<td align=\"left\">从 Date 对象返回月份 (0 ~ 11)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_getFullYear.asp\" target=\"_blank\" rel=\"noopener\">getFullYear()</a></td>\n<td align=\"left\">从 Date 对象以四位数字返回年份。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/jsref_getTime.asp\" target=\"_blank\" rel=\"noopener\">getTime()</a></td>\n<td align=\"left\">返回 1970 年 1 月 1 日至今的毫秒数。</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"javascript-Date-format-js日期格式化\"><a href=\"#javascript-Date-format-js日期格式化\" class=\"headerlink\" title=\"javascript Date format(js日期格式化)\"></a>javascript Date format(js日期格式化)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对Date的扩展，将 Date 转化为指定格式的String   </span></span><br><span class=\"line\"><span class=\"comment\">// 月(M)、日(d)、小时(H)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，   </span></span><br><span class=\"line\"><span class=\"comment\">// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)   </span></span><br><span class=\"line\"><span class=\"comment\">// 例子：   </span></span><br><span class=\"line\"><span class=\"comment\">// (new Date()).Format(\"yyyy-MM-dd HH:mm:ss.S\") ==&gt; 2006-07-02 08:09:04.423   </span></span><br><span class=\"line\"><span class=\"comment\">// (new Date()).Format(\"yyyy-M-d H:m:s.S\")      ==&gt; 2006-7-2 8:9:4.18   </span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fmt</span>)   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//author: meizz   </span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;   </span><br><span class=\"line\">    <span class=\"string\">\"M+\"</span> : <span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">1</span>,                 <span class=\"comment\">//月份   </span></span><br><span class=\"line\">    <span class=\"string\">\"d+\"</span> : <span class=\"keyword\">this</span>.getDate(),                    <span class=\"comment\">//日   </span></span><br><span class=\"line\">    <span class=\"string\">\"h+\"</span> : <span class=\"keyword\">this</span>.getHours(),                   <span class=\"comment\">//小时   </span></span><br><span class=\"line\">    <span class=\"string\">\"m+\"</span> : <span class=\"keyword\">this</span>.getMinutes(),                 <span class=\"comment\">//分   </span></span><br><span class=\"line\">    <span class=\"string\">\"s+\"</span> : <span class=\"keyword\">this</span>.getSeconds(),                 <span class=\"comment\">//秒   </span></span><br><span class=\"line\">    <span class=\"string\">\"q+\"</span> : <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">3</span>)/<span class=\"number\">3</span>), <span class=\"comment\">//季度   </span></span><br><span class=\"line\">    <span class=\"string\">\"S\"</span>  : <span class=\"keyword\">this</span>.getMilliseconds()             <span class=\"comment\">//毫秒   </span></span><br><span class=\"line\">  &#125;;   </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"regexp\">/(y+)/</span>.test(fmt))   </span><br><span class=\"line\">    fmt=fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"keyword\">this</span>.getFullYear()+<span class=\"string\">\"\"</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length));   </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\"</span>+ k +<span class=\"string\">\")\"</span>).test(fmt))   </span><br><span class=\"line\">  fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length==<span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">\"00\"</span>+ o[k]).substr((<span class=\"string\">\"\"</span>+ o[k]).length)));   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> fmt;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var time1 &#x3D; new Date().format(&quot;yyyy-MM-dd HH:mm:ss&quot;);     </span><br><span class=\"line\">  </span><br><span class=\"line\">var time2 &#x3D; new Date().format(&quot;yyyy-MM-dd&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(XXXXXXXXX)</span><br><span class=\"line\">now.toLocaleString</span><br><span class=\"line\">now.toLocaleString()</span><br><span class=\"line\"><span class=\"string\">\"2020/2/18 上午10:49:35\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h4><h5 id=\"json-stringify\"><a href=\"#json-stringify\" class=\"headerlink\" title=\"json.stringify()\"></a>json.stringify()</h5><blockquote>\n<p>JSON.stringify()的作用是将 JavaScript 对象转换为 JSON 字符串，而JSON.parse()可以将JSON字符串转为一个对象。</p>\n<p>我用 JSON.stringify() 将对象 a 变成了字符串 c ，那么我就可以用 JSON.parse() 将字符串 c 还原成对象 a。</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(arr); <span class=\"comment\">//'[1,2,3]'  =&gt; 将对象 arr 变成了字符串 arr。</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">JSON</span>.stringify(arr); <span class=\"comment\">//string  =&gt; 输出类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"string\">'[1,2,3]'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(string)) <span class=\"comment\">//[1,2,3] =&gt; (3) [1, 2, 3]</span></span><br><span class=\"line\">                                                <span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\">                                                <span class=\"number\">1</span>: <span class=\"number\">2</span></span><br><span class=\"line\">                                                <span class=\"number\">2</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">JSON</span>.parse(string)) <span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在使用 <strong>JSON.parse()</strong> 需要注意一点，由于此方法是将JSON字符串转换成对象，所以<strong>你的字符串必须符合JSON格式，即键值都必须使用双引号包裹</strong>：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'[\"1\",\"2\"]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"['1','2']\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(a));<span class=\"comment\">// Array [1,2]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(b));<span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>JSON.stringify()的几种妙用</strong></p>\n<p><strong>1.判断数组是否包含某对象，或者判断对象是否相等。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断数组是否包含某对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'echo'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'听风是风'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'天子笑'</span>&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    val = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'天子笑'</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(data).indexOf(<span class=\"built_in\">JSON</span>.stringify(val)) !== <span class=\"number\">-1</span>;<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断两数组/对象是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a) === <span class=\"built_in\">JSON</span>.stringify(b);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.让localStorage/sessionStorage可以存储对象。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLocalStorage</span>(<span class=\"params\">key,val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.localStorage.setItem(key,<span class=\"built_in\">JSON</span>.stringify(val));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocalStorage</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">window</span>.localStorage.getItem(key));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\">setLocalStorage(<span class=\"string\">'demo'</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span>  a = getLocalStorage(<span class=\"string\">'demo'</span>);<span class=\"comment\">//[1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、JSON.stringify()与toString()的区别</strong></p>\n<p><strong><em>这两者虽然都可以将目标值转为字符串，但本质上还是有区别的，比如</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [1,2,3];</span><br><span class=\"line\">JSON.stringify(arr);&#x2F;&#x2F;&#39;[1,2,3]&#39;</span><br><span class=\"line\">arr.toString();&#x2F;&#x2F;1,2,3</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["脚本语言"]},{"title":"Kafka","url":"/PaulGeorge123.github.io/2021/04/03/Kafka/","content":"<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/kafka.png\" style=\"zoom: 50%;\" />\n\n\n\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"一、Kafka-是什么？\"><a href=\"#一、Kafka-是什么？\" class=\"headerlink\" title=\"一、Kafka 是什么？\"></a>一、Kafka 是什么？</h4><p>Kafka。在流式计算中，Kafka 一般用来缓存数据，例如 Flink 通过消费 Kafka 的数据进行计算。</p>\n<p><strong>kafka是什么？</strong></p>\n<ol>\n<li>Apache Kafka 是一个开源 <strong>「消息」</strong> 系统，由 Scala 写成。是由 Apache 软件基金会开发的 一个开源消息系统项目。</li>\n<li>Kafka 最初是由 LinkedIn 公司开发，用作 LinkedIn 的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础，现在它已被多家不同类型的公司作为多种类型的数据管道和消息系统使用。</li>\n<li><strong>「Kafka 是一个分布式消息队列」</strong>。Kafka 对消息保存时根据 Topic 进行归类，发送消息 者称为 Producer，消息接受者称为 Consumer，此外 kafka 集群有多个 kafka 实例组成，每个 实例(server)称为 broker。</li>\n<li>无论是 kafka 集群，还是 consumer 都依赖于 <strong>「Zookeeper」</strong> 集群保存一些 meta 信息， 来保证系统可用性。</li>\n</ol>\n<h4 id=\"二、为什么要有-Kafka\"><a href=\"#二、为什么要有-Kafka\" class=\"headerlink\" title=\"二、为什么要有 Kafka?\"></a>二、为什么要有 Kafka?</h4><p><strong>「kafka」</strong> 之所以受到越来越多的青睐，与它所扮演的三大角色是分不开的的：</p>\n<ul>\n<li><strong>「消息系统」</strong>：kafka与传统的消息中间件都具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。与此同时，kafka还提供了大多数消息系统难以实现的消息顺序性保障及回溯性消费的功能。</li>\n<li><strong>「存储系统」</strong>：kafka把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效的降低了消息丢失的风险。这得益于其消息持久化和多副本机制。也可以将kafka作为长期的存储系统来使用，只需要把对应的数据保留策略设置为“永久”或启用主题日志压缩功能。</li>\n<li><strong>「流式处理平台」</strong>：kafka为流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理框架，比如窗口、连接、变换和聚合等各类操作。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Kafka</th>\n<th align=\"left\">特性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">分布式</td>\n<td align=\"left\">具备经济、快速、可靠、易扩充、数据共享、设备共享、通讯方便、灵活等，分布式所具备的特性</td>\n</tr>\n<tr>\n<td align=\"left\">高吞吐量</td>\n<td align=\"left\">同时为数据生产者和消费者提高吞吐量</td>\n</tr>\n<tr>\n<td align=\"left\">高可靠性</td>\n<td align=\"left\">支持多个消费者，当某个消费者失败的时候，能够自动负载均衡</td>\n</tr>\n<tr>\n<td align=\"left\">离线</td>\n<td align=\"left\">能将消息持久化，进行批量处理</td>\n</tr>\n<tr>\n<td align=\"left\">解耦</td>\n<td align=\"left\">作为各个系统连接的桥梁，避免系统之间的耦合</td>\n</tr>\n</tbody></table>\n<h4 id=\"三、Kafka-基本概念\"><a href=\"#三、Kafka-基本概念\" class=\"headerlink\" title=\"三、Kafka 基本概念\"></a>三、Kafka 基本概念</h4><p>在深入理解 Kafka 之前，可以先了解下 Kafka 的基本概念。</p>\n<p>一个典型的 Kafka 包含若干Producer、若干 Broker、若干 Consumer 以及一个 Zookeeper 集群。Zookeeper 是 Kafka 用来负责集群元数据管理、控制器选举等操作的。Producer 是负责将消息发送到 Broker 的，Broker 负责将消息持久化到磁盘，而 Consumer 是负责从Broker 订阅并消费消息。Kafka体系结构如下所示：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/kafka_1.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"概念一：生产者（Producer）与消费者（Consumer）\"><a href=\"#概念一：生产者（Producer）与消费者（Consumer）\" class=\"headerlink\" title=\"概念一：生产者（Producer）与消费者（Consumer）\"></a>概念一：生产者（Producer）与消费者（Consumer）</h5><p>对于 Kafka 来说客户端有两种基本类型：<strong>「生产者」</strong>（Producer）和 <strong>「消费者」</strong>（Consumer）。除此之外，还有用来做数据集成的 Kafka Connect API 和流式处理的 <strong>「Kafka Streams」</strong> 等高阶客户端，但这些高阶客户端底层仍然是生产者和消费者API，只不过是在上层做了封装。</p>\n<ul>\n<li><strong>「Producer」</strong> ：消息生产者，就是向 Kafka broker 发消息的客户端；</li>\n<li><strong>「Consumer」</strong> ：消息消费者，向 Kafka broker 取消息的客户端；</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/kafka_2.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"概念二：Broker-和集群（Cluster）\"><a href=\"#概念二：Broker-和集群（Cluster）\" class=\"headerlink\" title=\"概念二：Broker 和集群（Cluster）\"></a>概念二：Broker 和集群（Cluster）</h5><p>一个 Kafka 服务器也称为 <strong>「Broker」</strong>，它接受生产者发送的消息并存入磁盘；Broker 同时服务消费者拉取分区消息的请求，返回目前已经提交的消息。使用特定的机器硬件，一个 Broker 每秒可以处理成千上万的分区和百万量级的消息。</p>\n<p>若干个 Broker 组成一个 <strong>「集群」</strong>（<strong>「Cluster」</strong>），其中集群内某个 Broker 会成为集群控制器（Cluster Controller），它负责管理集群，包括分配分区到 Broker、监控 Broker 故障等。在集群内，一个分区由一个 Broker 负责，这个 Broker 也称为这个分区的 Leader；当然一个分区可以被复制到多个 Broker 上来实现冗余，这样当存在 Broker 故障时可以将其分区重新分配到其他 Broker 来负责。下图是一个样例：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/kafka_3.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"概念三：主题（Topic）与分区（Partition）\"><a href=\"#概念三：主题（Topic）与分区（Partition）\" class=\"headerlink\" title=\"概念三：主题（Topic）与分区（Partition）\"></a>概念三：主题（Topic）与分区（Partition）</h5><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/kafka_4.png\" style=\"zoom:67%;\" />\n\n<p>在 Kafka 中，消息以 <strong>「主题」</strong>（<strong>「Topic」</strong>）来分类，每一个主题都对应一个「<strong>「消息队列」</strong>」，这有点儿类似于数据库中的表。但是如果我们把所有同类的消息都塞入到一个“中心”队列中，势必缺少可伸缩性，无论是生产者/消费者数目的增加，还是消息数量的增加，都可能耗尽系统的性能或存储。</p>\n<p>我们使用一个生活中的例子来说明：现在 A 城市生产的某商品需要运输到 B 城市，走的是公路，那么单通道的高速公路不论是在「A 城市商品增多」还是「现在 C 城市也要往 B 城市运输东西」这样的情况下都会出现「吞吐量不足」的问题。所以我们现在引入 <strong>「分区」</strong>（<strong>「Partition」</strong>）的概念，类似“允许多修几条道”的方式对我们的主题完成了水平扩展。</p>\n","categories":["中间件"],"tags":["消息队列"]},{"title":"Linux常用命令","url":"/PaulGeorge123.github.io/2021/05/20/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h4 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h4><blockquote>\n<p>因为在日常工作中会遇到远程控制、部署程序的问题，总会使用到 linux 的相关命令，所以在此总结一些常用的 linux 命令。</p>\n</blockquote>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/linux_logo1.png\" style=\"zoom:67%;\" />\n\n\n\n<a id=\"more\"></a>\n\n<h4 id=\"Linux-的系统目录结构\"><a href=\"#Linux-的系统目录结构\" class=\"headerlink\" title=\"Linux 的系统目录结构\"></a>Linux 的系统目录结构</h4><p><strong>如下图</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/d0c50-linux2bfile2bsystem2bhierarchy.jpg\" style=\"zoom: 50%;\" />\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /bin        <span class=\"comment\">## 二进制文件，系统常规命令</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /boot       <span class=\"comment\">## 系统启动分区，系统启动时读取的文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /dev        <span class=\"comment\">## 设备文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /etc        <span class=\"comment\">## 大多数配置文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /home       <span class=\"comment\">## 普通用户的家目录</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /lib        <span class=\"comment\">## 32位函数库</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /lib64      <span class=\"comment\">## 64位库</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /media      <span class=\"comment\">## 手动临时挂载点</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /mnt        <span class=\"comment\">## 手动临时挂载点</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /opt        <span class=\"comment\">## 第三方软件安装位置</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /proc       <span class=\"comment\">## 进程信息及硬件信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /root       <span class=\"comment\">## 临时设备的默认挂载点</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /sbin       <span class=\"comment\">## 系统管理命令</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /srv        <span class=\"comment\">## 数据</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /var        <span class=\"comment\">## 数据</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /sys        <span class=\"comment\">## 内核相关信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /tmp        <span class=\"comment\">## 临时文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> /usr        <span class=\"comment\">## 用户相关设定</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h4 id=\"命令的组成\"><a href=\"#命令的组成\" class=\"headerlink\" title=\"命令的组成\"></a>命令的组成</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ 示例：命令 参数名 参数值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><h5 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h5><p>【作用】：列出目录内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ls</span><br><span class=\"line\">[root@localhost ~]# ll</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h5><p>【作用】：显示树形目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# tree</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要 yum install -y tree 安装</p>\n</blockquote>\n<hr>\n<h5 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h5><p>【作用】：更改当前目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cd ..</span><br><span class=\"line\">[root@localhost ~]# cd /</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h5><p>【作用】：在当前目录下创建下一级目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir test</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h5><p>【作用】：仅可以删除空白目录（不可以删除包含内容的目录）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rmdir test</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h5><p>【作用】：创建空白文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# touch test.txt</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h5><p>【作用】：删除文件</p>\n<ul>\n<li>删除文件<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rm [文件名]（删除时会询问是否删除）</span><br><span class=\"line\">[root@localhost ~]# rm -f [文件名]（强制删除）</span><br><span class=\"line\">[root@localhost ~]# rm -v [文件名]（可视化删除）</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>删除目录<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rm -r [文件名]（删除时会询问是否删除）</span><br><span class=\"line\">[root@localhost ~]# rm -rf [文件名]（强制删除，若目录不存在，此命令依旧可以执行，不报错）</span><br><span class=\"line\">[root@localhost ~]# rm -rv [文件名]（可视化强制）</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>删除目录和文件时，先删除文件在删除目录</p>\n</blockquote>\n<hr>\n<h5 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h5><p>【作用】：源文件始终不变，仅仅是对目标文件进行改变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cp [源文件] [目标文件]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h5><p>【作用】：mv命令使源文件的状态发生改变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mv [源文件] [目标文件]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>若果目录存在，则会将原目录移动到目标目录下；如果目录不存在，则相当于移动并重命名</p>\n</blockquote>\n<hr>\n<h5 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h5><p>【作用】：正序查看文件内容</p>\n<ul>\n<li>参数-A 查看所有内容，$代表每行的结尾</li>\n<li>参数-n 显示行号</li>\n</ul>\n<p><strong>全文搜索</strong></p>\n<p>从前往后搜索：可以输入 <code>/</code>（其中代表要搜索的内容），搜索到的内容会高亮度显示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat -An /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h5><p>【作用】：用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# tail [参数] [文件]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h5><p>【作用】：更改当前目录权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# chmod 777 [文件]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h5><p>【作用】：打包与解压</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# tar -zcvf 打包压缩后的文件名 要打包的文件</span><br><span class=\"line\">[root@localhost ~]# tar -zxvf a.tar       //解包至当前目录</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h5><p>【作用】：查看网络地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ifconfig</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h5><p>【作用】：查看进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ps -ef         //查看所有正在运行的进程</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h5><p>【作用】：结束进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# kill pid       //杀死该pid的进程 </span><br><span class=\"line\">[root@localhost ~]# kill -9 pid    //强制杀死该进程</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h5><p>【作用】：查看与此IP地址的连接情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ping www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h5><p>【作用】：快速清屏</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# clear</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"firewalld\"><a href=\"#firewalld\" class=\"headerlink\" title=\"firewalld\"></a>firewalld</h5><h6 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl status firewalld</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"开启防火墙\"><a href=\"#开启防火墙\" class=\"headerlink\" title=\"开启防火墙\"></a>开启防火墙</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start firewalld</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"设置对外开放访问的端口\"><a href=\"#设置对外开放访问的端口\" class=\"headerlink\" title=\"设置对外开放访问的端口\"></a>设置对外开放访问的端口</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# firewall-cmd --add-service=http –permanent </span><br><span class=\"line\">[root@localhost ~]# firewall-cmd --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"重新载入\"><a href=\"#重新载入\" class=\"headerlink\" title=\"重新载入\"></a>重新载入</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"查看已开放的端口号\"><a href=\"#查看已开放的端口号\" class=\"headerlink\" title=\"查看已开放的端口号\"></a>查看已开放的端口号</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# firewall-cmd --list-all</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"vim-编译\"><a href=\"#vim-编译\" class=\"headerlink\" title=\"vim 编译\"></a>vim 编译</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:<span class=\"built_in\">set</span> number    --vim显示行号 （一次性）</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["linux"]},{"title":"MongoDB概念","url":"/PaulGeorge123.github.io/2021/05/21/MongoDB%E6%A6%82%E5%BF%B5/","content":"<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Rbed7d6f380416eaf9643a51d41748c6a.jfif\" style=\"zoom:15%;\" />\n\n\n\n<a id=\"more\"></a>\n\n\n\n<p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。</p>\n<p>下表将更容易理解Mongo中的一些概念：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SQL术语/概念</th>\n<th align=\"left\">MongoDB术语/概念</th>\n<th align=\"left\">解释/说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">database</td>\n<td align=\"left\">database</td>\n<td align=\"left\">数据库</td>\n</tr>\n<tr>\n<td align=\"left\">table</td>\n<td align=\"left\">collection</td>\n<td align=\"left\">数据库表/集合</td>\n</tr>\n<tr>\n<td align=\"left\">row</td>\n<td align=\"left\">document</td>\n<td align=\"left\">数据记录行/文档</td>\n</tr>\n<tr>\n<td align=\"left\">column</td>\n<td align=\"left\">field</td>\n<td align=\"left\">数据字段/域</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n</tr>\n<tr>\n<td align=\"left\">table joins</td>\n<td align=\"left\"></td>\n<td align=\"left\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td align=\"left\">primary key</td>\n<td align=\"left\">primary key</td>\n<td align=\"left\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>一个mongodb中可以建立多个数据库。</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p>\n<p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>\n<p><strong>“show dbs”</strong> 命令可以显示所有数据的列表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./mongo  MongoDB shell version: 3.0.6  connecting to: <span class=\"built_in\">test</span>  &gt; show dbs  <span class=\"built_in\">local</span>  0.078GB  <span class=\"built_in\">test</span>   0.078GB  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <strong>“db”</strong> 命令可以显示当前数据库对象或集合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./mongo  MongoDB shell version: 3.0.6  connecting to: <span class=\"built_in\">test</span>  &gt; db  <span class=\"built_in\">test</span>  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行”use”命令，可以连接到一个指定的数据库。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; use local  switched to db local  &gt; db  local  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例命令中，”local” 是你要链接的数据库。</p>\n<p>在下一个章节我们将详细讲解MongoDB中命令的使用。</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（””)。</li>\n<li>不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<ul>\n<li><strong>admin</strong>： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li><strong>local:</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li><strong>config</strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<hr>\n<h4 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h4><p>文档是一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;site&quot;:&quot;www.runoob.com&quot;, &quot;name&quot;:&quot;菜鸟教程&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下表列出了 RDBMS 与 MongoDB 对应的术语：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">RDBMS</th>\n<th align=\"left\">MongoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库</td>\n<td align=\"left\">数据库</td>\n</tr>\n<tr>\n<td align=\"center\">表格</td>\n<td align=\"left\">集合</td>\n</tr>\n<tr>\n<td align=\"center\">行</td>\n<td align=\"left\">文档</td>\n</tr>\n<tr>\n<td align=\"center\">列</td>\n<td align=\"left\">字段</td>\n</tr>\n<tr>\n<td align=\"center\">表联合</td>\n<td align=\"left\">嵌入文档</td>\n</tr>\n<tr>\n<td align=\"center\">主键</td>\n<td align=\"left\">主键 (MongoDB 提供了 key 为 _id )</td>\n</tr>\n<tr>\n<td align=\"center\">数据库服务和客户端</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Mysqld/Oracle</td>\n<td align=\"left\">mongod</td>\n</tr>\n<tr>\n<td align=\"center\">mysql/sqlplus</td>\n<td align=\"left\">mongo</td>\n</tr>\n</tbody></table>\n<p>需要注意的是：</p>\n<ol>\n<li>文档中的键/值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ol>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有\\0 (空字符)。这个字符用来表示键的结尾。</li>\n<li>.和$有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线”_”开头的键是保留的(不是严格要求的)。</li>\n</ul>\n<hr>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p>\n<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;site&quot;:&quot;www.baidu.com&quot;&#125;  &#123;&quot;site&quot;:&quot;www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;&#125;  &#123;&quot;site&quot;:&quot;www.runoob.com&quot;,&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;num&quot;:5&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当第一个文档插入时，集合就会被创建。</p>\n<h5 id=\"合法的集合名\"><a href=\"#合法的集合名\" class=\"headerlink\" title=\"合法的集合名\"></a>合法的集合名</h5><ul>\n<li>集合名不能是空字符串””。</li>\n<li>集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。</li>\n<li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。　</li>\n</ul>\n<p>如下实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.col.findOne()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"capped-collections\"><a href=\"#capped-collections\" class=\"headerlink\" title=\"capped collections\"></a>capped collections</h5><p>Capped collections 就是固定大小的collection。</p>\n<p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。</p>\n<p>Capped collections是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的collection不同，你必须要显式的创建一个capped collection， 指定一个collection的大小，单位是字节。collection的数据存储空间值提前分配的。</p>\n<p>要注意的是指定的存储大小包含了数据库的头信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.createCollection(&quot;mycoll&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在capped collection中，你能添加新的对象。</li>\n<li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li>\n<li>数据库不允许进行删除。使用drop()方法删除collection所有的行。</li>\n<li>注意: 删除之后，你必须显式的重新创建这个collection。</li>\n<li>在32bit机器中，capped collection最大存储为1e9( 1X109)个字节。</li>\n</ul>\n<hr>\n<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>数据库的信息是存储在集合中。它们使用了系统的命名空间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbname.system.*</span><br></pre></td></tr></table></figure>\n\n<p>在MongoDB数据库中名字空间 <dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">集合命名空间</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">dbname.system.namespaces</td>\n<td align=\"left\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.indexes</td>\n<td align=\"left\">列出所有索引。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.profile</td>\n<td align=\"left\">包含数据库概要(profile)信息。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.users</td>\n<td align=\"left\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.local.sources</td>\n<td align=\"left\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody></table>\n<p>对于修改系统集合中的对象有如下限制。</p>\n<p>在插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p>\n是可修改的。 是可删除的。\n\n<hr>\n<h4 id=\"MongoDB-数据类型\"><a href=\"#MongoDB-数据类型\" class=\"headerlink\" title=\"MongoDB 数据类型\"></a>MongoDB 数据类型</h4><p>下表为MongoDB中常用的几种数据类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">String</td>\n<td align=\"left\">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td align=\"left\">Integer</td>\n<td align=\"left\">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">布尔值。用于存储布尔值（真/假）。</td>\n</tr>\n<tr>\n<td align=\"left\">Double</td>\n<td align=\"left\">双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td align=\"left\">Min/Max keys</td>\n<td align=\"left\">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td align=\"left\">Arrays</td>\n<td align=\"left\">用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td align=\"left\">Timestamp</td>\n<td align=\"left\">时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td align=\"left\">Object</td>\n<td align=\"left\">用于内嵌文档。</td>\n</tr>\n<tr>\n<td align=\"left\">Null</td>\n<td align=\"left\">用于创建空值。</td>\n</tr>\n<tr>\n<td align=\"left\">Symbol</td>\n<td align=\"left\">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td align=\"left\">Date</td>\n<td align=\"left\">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td align=\"left\">Object ID</td>\n<td align=\"left\">对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td align=\"left\">Binary Data</td>\n<td align=\"left\">二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td align=\"left\">Code</td>\n<td align=\"left\">代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td align=\"left\">Regular expression</td>\n<td align=\"left\">正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n<p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。</p>\n<p>下表将帮助您更容易理解Mongo中的一些概念：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SQL术语/概念</th>\n<th align=\"left\">MongoDB术语/概念</th>\n<th align=\"left\">解释/说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">database</td>\n<td align=\"left\">database</td>\n<td align=\"left\">数据库</td>\n</tr>\n<tr>\n<td align=\"left\">table</td>\n<td align=\"left\">collection</td>\n<td align=\"left\">数据库表/集合</td>\n</tr>\n<tr>\n<td align=\"left\">row</td>\n<td align=\"left\">document</td>\n<td align=\"left\">数据记录行/文档</td>\n</tr>\n<tr>\n<td align=\"left\">column</td>\n<td align=\"left\">field</td>\n<td align=\"left\">数据字段/域</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n</tr>\n<tr>\n<td align=\"left\">table joins</td>\n<td align=\"left\"></td>\n<td align=\"left\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td align=\"left\">primary key</td>\n<td align=\"left\">primary key</td>\n<td align=\"left\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h4 id=\"数据库-1\"><a href=\"#数据库-1\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>一个mongodb中可以建立多个数据库。</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p>\n<p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>\n<p><strong>“show dbs”</strong> 命令可以显示所有数据的列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;mongo  MongoDB shell version: 3.0.6  connecting to: test  &gt; show dbs  local  0.078GB  test   0.078GB  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <strong>“db”</strong> 命令可以显示当前数据库对象或集合。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;mongo  MongoDB shell version: 3.0.6  connecting to: test  &gt; db  test  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行”use”命令，可以连接到一个指定的数据库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; use local  switched to db local  &gt; db  local  &gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例命令中，”local” 是你要链接的数据库。</p>\n<p>在下一个章节我们将详细讲解MongoDB中命令的使用。</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（””)。</li>\n<li>不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<ul>\n<li><strong>admin</strong>： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li><strong>local:</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li><strong>config</strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<hr>\n<h4 id=\"文档-1\"><a href=\"#文档-1\" class=\"headerlink\" title=\"文档\"></a>文档</h4><p>文档是一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>一个简单的文档例子如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;site&quot;:&quot;www.runoob.com&quot;, &quot;name&quot;:&quot;菜鸟教程&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下表列出了 RDBMS 与 MongoDB 对应的术语：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">RDBMS</th>\n<th align=\"left\">MongoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库</td>\n<td align=\"left\">数据库</td>\n</tr>\n<tr>\n<td align=\"center\">表格</td>\n<td align=\"left\">集合</td>\n</tr>\n<tr>\n<td align=\"center\">行</td>\n<td align=\"left\">文档</td>\n</tr>\n<tr>\n<td align=\"center\">列</td>\n<td align=\"left\">字段</td>\n</tr>\n<tr>\n<td align=\"center\">表联合</td>\n<td align=\"left\">嵌入文档</td>\n</tr>\n<tr>\n<td align=\"center\">主键</td>\n<td align=\"left\">主键 (MongoDB 提供了 key 为 _id )</td>\n</tr>\n<tr>\n<td align=\"center\">数据库服务和客户端</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Mysqld/Oracle</td>\n<td align=\"left\">mongod</td>\n</tr>\n<tr>\n<td align=\"center\">mysql/sqlplus</td>\n<td align=\"left\">mongo</td>\n</tr>\n</tbody></table>\n<p>需要注意的是：</p>\n<ol>\n<li>文档中的键/值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ol>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有\\0 (空字符)。这个字符用来表示键的结尾。</li>\n<li>.和$有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线”_”开头的键是保留的(不是严格要求的)。</li>\n</ul>\n<hr>\n<h4 id=\"集合-1\"><a href=\"#集合-1\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p>\n<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;site&quot;:&quot;www.baidu.com&quot;&#125;  &#123;&quot;site&quot;:&quot;www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;&#125;  &#123;&quot;site&quot;:&quot;www.runoob.com&quot;,&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;num&quot;:5&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当第一个文档插入时，集合就会被创建。</p>\n<h5 id=\"合法的集合名-1\"><a href=\"#合法的集合名-1\" class=\"headerlink\" title=\"合法的集合名\"></a>合法的集合名</h5><ul>\n<li>集合名不能是空字符串””。</li>\n<li>集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。</li>\n<li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。　</li>\n</ul>\n<p>如下实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.col.findOne()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"capped-collections-1\"><a href=\"#capped-collections-1\" class=\"headerlink\" title=\"capped collections\"></a>capped collections</h5><p>Capped collections 就是固定大小的collection。</p>\n<p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。</p>\n<p>Capped collections是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的collection不同，你必须要显式的创建一个capped collection， 指定一个collection的大小，单位是字节。collection的数据存储空间值提前分配的。</p>\n<p>要注意的是指定的存储大小包含了数据库的头信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.createCollection(&quot;mycoll&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在capped collection中，你能添加新的对象。</li>\n<li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li>\n<li>数据库不允许进行删除。使用drop()方法删除collection所有的行。</li>\n<li>注意: 删除之后，你必须显式的重新创建这个collection。</li>\n<li>在32bit机器中，capped collection最大存储为1e9( 1X109)个字节。</li>\n</ul>\n<hr>\n<h4 id=\"元数据-1\"><a href=\"#元数据-1\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>数据库的信息是存储在集合中。它们使用了系统的命名空间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbname.system.*</span><br></pre></td></tr></table></figure>\n\n<p>在MongoDB数据库中名字空间 <dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">集合命名空间</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">dbname.system.namespaces</td>\n<td align=\"left\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.indexes</td>\n<td align=\"left\">列出所有索引。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.profile</td>\n<td align=\"left\">包含数据库概要(profile)信息。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.system.users</td>\n<td align=\"left\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td align=\"left\">dbname.local.sources</td>\n<td align=\"left\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody></table>\n<p>对于修改系统集合中的对象有如下限制。</p>\n<p>在插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p>\n是可修改的。 是可删除的。\n\n<hr>\n<h4 id=\"MongoDB-数据类型-1\"><a href=\"#MongoDB-数据类型-1\" class=\"headerlink\" title=\"MongoDB 数据类型\"></a>MongoDB 数据类型</h4><p>下表为MongoDB中常用的几种数据类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">String</td>\n<td align=\"left\">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td align=\"left\">Integer</td>\n<td align=\"left\">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">布尔值。用于存储布尔值（真/假）。</td>\n</tr>\n<tr>\n<td align=\"left\">Double</td>\n<td align=\"left\">双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td align=\"left\">Min/Max keys</td>\n<td align=\"left\">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td align=\"left\">Arrays</td>\n<td align=\"left\">用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td align=\"left\">Timestamp</td>\n<td align=\"left\">时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td align=\"left\">Object</td>\n<td align=\"left\">用于内嵌文档。</td>\n</tr>\n<tr>\n<td align=\"left\">Null</td>\n<td align=\"left\">用于创建空值。</td>\n</tr>\n<tr>\n<td align=\"left\">Symbol</td>\n<td align=\"left\">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td align=\"left\">Date</td>\n<td align=\"left\">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td align=\"left\">Object ID</td>\n<td align=\"left\">对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td align=\"left\">Binary Data</td>\n<td align=\"left\">二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td align=\"left\">Code</td>\n<td align=\"left\">代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td align=\"left\">Regular expression</td>\n<td align=\"left\">正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n","categories":["数据库"],"tags":["MongoDB"]},{"title":"MySQL(语句)","url":"/PaulGeorge123.github.io/2020/05/23/MySQL-2/","content":"<h3 id=\"select-完整语句\"><a href=\"#select-完整语句\" class=\"headerlink\" title=\"select 完整语句\"></a>select 完整语句</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">写的顺序: <span class=\"keyword\">select</span> ... </span><br><span class=\"line\">\t\tfrom... </span><br><span class=\"line\">\t\twhere.... </span><br><span class=\"line\">\t\t<span class=\"keyword\">group</span> by... </span><br><span class=\"line\">\t\thaving... </span><br><span class=\"line\">\t\t<span class=\"keyword\">order</span> by..</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">执行顺序: from...</span><br><span class=\"line\">\t\twhere...</span><br><span class=\"line\">\t\t<span class=\"keyword\">group</span> by...</span><br><span class=\"line\">\t\thaving.... </span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> ... </span><br><span class=\"line\">\t\t<span class=\"keyword\">order</span> by...</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"组函数\"><a href=\"#组函数\" class=\"headerlink\" title=\"组函数\"></a>组函数</h4><p><strong>常用的组函数</strong></p>\n<ul>\n<li>AVG</li>\n<li>COUNT</li>\n<li>MAX</li>\n<li>MIN</li>\n<li>SUM</li>\n</ul>\n<p><strong>组函数的语法:（Group By）</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">column</span>,]group_function(<span class=\"keyword\">column</span>),...</span><br><span class=\"line\"><span class=\"keyword\">FORM</span> \t\t<span class=\"keyword\">table</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> condition]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span>\t<span class=\"keyword\">column</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>\t<span class=\"keyword\">column</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 组函数不能在WHERE子句中使用</p>\n<p>在组函数中可以使用 Distinct 关键字用于去重</p>\n</blockquote>\n<p><strong>过滤分组：HAVING 子句</strong></p>\n<ul>\n<li>使用 HAVING 过滤分组</li>\n<li>1、行已使用被分组</li>\n<li>2、使用了组函数</li>\n<li>3、满足 HAVING 子句中条件的分组将被显示</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">column</span>,]group_function(<span class=\"keyword\">column</span>),...</span><br><span class=\"line\"><span class=\"keyword\">FORM</span> \t\t<span class=\"keyword\">table</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> condition]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span>\tgroup_by_expression]</span><br><span class=\"line\">[<span class=\"keyword\">HAVING</span> group_condition]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>\t<span class=\"keyword\">column</span>];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 组函数不能嵌套使用</p>\n</blockquote>\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><ul>\n<li>为了给主要查询提供数据而先执行的查询称之为子查询<ul>\n<li>子查询要包含在括号内</li>\n<li>将子查询放在比较条件的右侧</li>\n</ul>\n</li>\n<li>单行子查询<ul>\n<li>= / &gt; / &gt;= / &lt; / &lt;= / &lt;&gt; / !=</li>\n</ul>\n</li>\n<li>多行子查询<ul>\n<li>IN / ANY /ALL</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p><strong>4个特性</strong></p>\n<ul>\n<li>A 原子性：事务必须是一个自动工作的单元，要么全部执行，要么全部不执行。</li>\n<li>C 一致性：事务把数据库从一个一致状态带入到另一个一致状态，事务结束的时候，所有的内部数据都是正确的。</li>\n<li>I 隔离性：并发多个事务时，一个事务的执行不受其他事务的影响。</li>\n<li>D 持久性：事务提交之后，数据是永久性的，不可再回滚，不受关机等事件的影响。</li>\n</ul>\n<p><strong>事务在如下情况终止：</strong></p>\n<ol>\n<li>遇到<strong>rollback</strong> 或<strong>commit</strong>命令</li>\n<li>遇到DDL或者DCL语句.</li>\n<li>系统发生错误，崩溃或者退出。</li>\n</ol>\n<h4 id=\"序列的使用\"><a href=\"#序列的使用\" class=\"headerlink\" title=\"序列的使用\"></a>序列的使用</h4><ul>\n<li>MySQL 序列是以升序生成的一组整数：1，2，3，…，宇宇生成主要识别的唯一数字，即主键。</li>\n<li>可以在列上设置AUTO_INCREMENT属性，这通常是主键列。</li>\n</ul>\n<h4 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h4><ul>\n<li>UUID代表通用唯一表示符。UUID是基于 “RFC 4122” 通用唯一标识符定义的。</li>\n<li>UUID被设计为在空间和时间全球独一无二的数组。预期两个UUID值是不同的。</li>\n<li>在MySQL中，UUID值是一个128位的数字，表示为以下格式的十五进制数字的utf-8字符串：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>要生成UUID值，需要使用 UUID() 函数</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">UUID()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 如果是有效的字符串格式UUID，IS_UUID()函数将返回 1 。如果参数不是有效的字符串格式UUID，则IS_UUID函数返回 0，如果参数为 NULL ，则IS_UUID() 函数返回 NULL。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> BIN_TO_UUID(<span class=\"keyword\">id</span>) <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"SQL-约束\"><a href=\"#SQL-约束\" class=\"headerlink\" title=\"SQL 约束\"></a>SQL 约束</h4><ul>\n<li>NOT NULL                =&gt;  <strong>约束强制列不接受 NULL 值</strong></li>\n<li>UNIQUE                    =&gt;  <strong>约束唯一标识数据库表中的每条记录</strong></li>\n<li>PRIMARY KEY           =&gt;  <strong>约束唯一标识数据库表中的每条记录(主键必须包含唯一的值、主键列不能包含 NULL 值)</strong></li>\n<li>FOREIGN KEY           =&gt;  <strong>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY</strong></li>\n<li>CHECK                       =&gt;  <strong>CHECK 约束用于限制列中的值的范围</strong></li>\n<li>DEFAULT                   =&gt;  <strong>DEFAULT 约束用于向列中插入默认值（如果没有规定其他的值，那么会将默认值添加到所有的新记录）</strong></li>\n</ul>\n<h4 id=\"客户端连接设置字符集\"><a href=\"#客户端连接设置字符集\" class=\"headerlink\" title=\"客户端连接设置字符集\"></a>客户端连接设置字符集</h4><ul>\n<li>MySQL连接器允许设置字符集：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">jdbc:mysql://127.0.0.1:3306/?characterEncoding=utf-8&amp;useSSL=true</span><br></pre></td></tr></table></figure>\n\n<p><strong>复制表结构</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dept_copy</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> department</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span>=<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>","categories":["数据库"],"tags":["MySQL"]},{"title":"MySQL(初识MySQL)","url":"/PaulGeorge123.github.io/2020/05/23/MySQL-1/","content":"<h4 id=\"什么是数据库\"><a href=\"#什么是数据库\" class=\"headerlink\" title=\"什么是数据库\"></a>什么是数据库</h4><p><strong>数据库 （DB， DataBase）</strong></p>\n<h4 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h4><p><strong>关系型数据库:(SQL)</strong></p>\n<ul>\n<li>MySQL，Oracle，DB2</li>\n<li>通过表和表之间，行和行之间的关系进行数据存储</li>\n</ul>\n<p><strong>非关系型数据库:(NoSQL)</strong></p>\n<ul>\n<li>Redis，MongoDB</li>\n<li>菲关系型数据库，对象存储，通过对象的自身属性来决定</li>\n</ul>\n<p><strong>DBMS（数据库管理系统）</strong></p>\n<ul>\n<li>数据库管理软件</li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h4><p><strong>MySQL 数据量不区分大小写</strong></p>\n<p>1、创建数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure>\n\n<p>2、删除数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>\n<p>3、选择数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">USE</span>  数据库名;</span><br></pre></td></tr></table></figure>\n\n<p>4、查看数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">DATABASE</span>; \t\t<span class=\"comment\">--查看所有数据库</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"数据库列的类型\"><a href=\"#数据库列的类型\" class=\"headerlink\" title=\"数据库列的类型\"></a>数据库列的类型</h5><blockquote>\n<p>数值    （常用）</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">int\t\t\t标准的整数\t\t4个字节</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>字符串    （常用）</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">char\t\t\t字符串固定大小\t\t0~255</span><br><span class=\"line\">varchar\t\t\t可变字符串\t\t 0~65535   \t\t常用变量String</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>日期    （常用）        java.utile.Date</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">date\t\tYYYY-MM-DD\t\t日期</span><br><span class=\"line\">time\t\tHH:mm:ss\t\t时间格式</span><br><span class=\"line\">datetime\tYYYY-MM-DD HH:mm:ss\t\t最常用的时间格式</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>null    </p>\n</blockquote>\n<h4 id=\"字段属性\"><a href=\"#字段属性\" class=\"headerlink\" title=\"字段属性\"></a>字段属性</h4><p><strong>Unsigned</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">无符号的整数</span><br><span class=\"line\">声明该列不能声明为负数</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>zerofill</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">0填充的</span><br><span class=\"line\">不足的位数用0来填充\t\tint(3)   005</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>自增</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">自增，+1（默认）</span><br><span class=\"line\">可以自定义设计主键的起始值和步长</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>NULL  not  null</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果不给他赋值，就会报错！</span><br><span class=\"line\">sex，默认值为如果不指定其列值，则会有默认值！</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>创建数据库表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name (column_name column_type);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除数据库表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> table_name ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数据库关联\"><a href=\"#数据库关联\" class=\"headerlink\" title=\"数据库关联\"></a>数据库关联</h4><p><strong>外键</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">为表添加外键的语法：</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> 外键名称 </span><br><span class=\"line\"><span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span> (外键字段名称) <span class=\"keyword\">references</span> 外表表名(主键字段名称)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>删除有外键的表的时候，必须要先删除<strong>从表</strong>，再删除<strong>主表</strong></p>\n</blockquote>\n<h4 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h4><p><strong>1、插入数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( value1, value2,...valueN )</span><br></pre></td></tr></table></figure>\n<p><strong>2、删除数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name </span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、更新数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name </span><br><span class=\"line\"><span class=\"keyword\">SET</span> field1=<span class=\"keyword\">new</span>-value1, field2=<span class=\"keyword\">new</span>-value2</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>\n<p><strong>4、查询数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name,column_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询 - 别名 =&gt;  AS </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(<span class=\"string\">'姓名:'</span>,<span class=\"keyword\">name</span>) <span class=\"keyword\">AS</span> 别名</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 如果数据是字符型或者日期，必须使用单引号或者双引号</p>\n</blockquote>\n<p><strong>去重</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Like子句</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> field1, field2,...fieldN </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> field1 <span class=\"keyword\">LIKE</span> <span class=\"string\">'value1'</span> [<span class=\"keyword\">AND</span>/ <span class=\"keyword\">OR</span>] filed2 = <span class=\"string\">'value2'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>MySQL 排序</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> field1, field2,...fieldN </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name1, table_name2...</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> field1 [<span class=\"keyword\">ASC</span> /<span class=\"keyword\">DESC</span>]\t\t=&gt;[默认 <span class=\"keyword\">ASC</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>GROUP BY 语法</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, <span class=\"keyword\">function</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>MySQL WHERE 子句</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">等号，检测两个值是否相等，如果相等返回true</td>\n<td align=\"left\">(A = B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&gt;, !=</td>\n<td align=\"left\">不等于，检测两个值是否相等，如果不相等返回true</td>\n<td align=\"left\">(A != B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td>\n<td align=\"left\">(A &gt; B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td>\n<td align=\"left\">(A &lt; B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td>\n<td align=\"left\">(A &gt;= B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td>\n<td align=\"left\">(A &lt;= B) 返回 true。</td>\n</tr>\n</tbody></table>\n<h4 id=\"分页和排序\"><a href=\"#分页和排序\" class=\"headerlink\" title=\"分页和排序\"></a>分页和排序</h4><p><strong>排序 ： 升序 ASC   降序DESC</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--ORDER BY</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>分页</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--分页，每页显示的数据（几条）</span></span><br><span class=\"line\"><span class=\"comment\">--语法: limit 当前页，页面大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">LIMIT 1,5   1:起始    5:条数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>语法:  limit（查询起始下标，pageSize）</p>\n</blockquote>\n","categories":["数据库"],"tags":["MySQL"]},{"title":"Mysql存储过程","url":"/PaulGeorge123.github.io/2020/05/27/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/","content":"<p><strong>写在前面</strong></p>\n<p><font color=#008000>什么是Mysql存储过程？</font></p>\n<p>存储过程是一组为了完成特定功能的 SQL 语句集合。MySQL 5.0 已经支持存储过程，它是数据库中最重要的功能。</p>\n<p><strong>本篇着重介绍一下 MySQL 创建存储过程：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h4><p>将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a><strong>优点</strong></h4><ol>\n<li><p>封装性</p>\n<p>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</p>\n</li>\n<li><p>可增强 SQL 语句的功能和灵活性</p>\n<p>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p>\n</li>\n<li><p>可减少网络流量</p>\n<p>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</p>\n</li>\n<li><p>高性能</p>\n<p>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</p>\n</li>\n<li><p>提高数据库的安全性和数据的完整性</p>\n<p>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</p>\n</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li><p>如果使用大量存储过程，那么使用这些存储过程的每个连接的内存使用量将会大大增加。</p>\n</li>\n<li><p>存储过程的构造使得开发具有复杂业务逻辑的存储过程变得更加困难；</p>\n</li>\n<li><p>很难调试存储过程。只有少数数据库管理系统允许您调试存储过程。</p>\n</li>\n<li><p>开发和维护存储过程并不容易。</p>\n<p>开发和维护存储过程通常需要一个不是所有应用程序开发人员拥有的专业技能。这可能会导致应用程序开发和维护阶段的问题。</p>\n</li>\n</ol>\n<h4 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h4><p>声明语句结束符，可以自定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">或</span><br><span class=\"line\">DELIMITER &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>声明存储过程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE demo_in_parameter(IN p_in int)</span><br></pre></td></tr></table></figure>\n\n<p>存储过程开始和结束符号:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BEGIN .... END</span><br></pre></td></tr></table></figure>\n\n<p>变量赋值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET @p_in&#x3D;1</span><br></pre></td></tr></table></figure>\n\n<p>变量定义:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE l_int int unsigned default 100;</span><br></pre></td></tr></table></figure>\n\n<p>创建mysql存储过程、存储函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create procedure 存储过程名(参数)</span><br></pre></td></tr></table></figure>\n\n<p>存储过程体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create function 存储函数名(参数)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>举个荔枝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $$　　#将语句的结束符号从分号;临时改为两个$$(可以是自定义) </span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE &#96;mySun&#96;(IN &#96;salary&#96; INT ,OUT sum INT)    </span><br><span class=\"line\">\t-&gt; BEGIN    </span><br><span class=\"line\">\t-&gt; 　 DECLARE a int unsigned default 10; </span><br><span class=\"line\">\t-&gt;    SET a &#x3D; 100; </span><br><span class=\"line\">\t-&gt;    SET sum &#x3D; Salary * a;</span><br><span class=\"line\">\t-&gt; END$$ </span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec) </span><br><span class=\"line\">mysql&gt; delimiter;　　#将语句的结束符号恢复为分号</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：</p>\n<p><strong>存储过程体</strong></p>\n<ul>\n<li><p>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</p>\n</li>\n<li><p>过程体格式：以begin开始，以end结束(可嵌套)</p>\n</li>\n<li><p>每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块，则不需要分号。</p>\n</li>\n</ul>\n<h4 id=\"存储过程的参数\"><a href=\"#存储过程的参数\" class=\"headerlink\" title=\"存储过程的参数\"></a>存储过程的参数</h4><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATEPROCEDURE 存储过程名([[IN |OUT |INOUT ] 参数名 数据类形...])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）</li>\n<li>OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）</li>\n<li>INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96; PROCEDURE &#96;mysun&#96;(INOUT salary INT,INOUT sum INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\tDECLARE a int unsigned default 10;</span><br><span class=\"line\">\tSELECT salary as &#39;计算前的数据&#39;;</span><br><span class=\"line\">    SET a &#x3D; 100; \t</span><br><span class=\"line\">\tSET sum &#x3D; salary * a;</span><br><span class=\"line\">\tSELECT sum  as &#39;计算后的数据&#39;;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><h5 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLAREvariable_name [,variable_name...] datatype [DEFAULT value];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>declare</code>用于声明变量；</li>\n<li><code>variable_name</code>表示变量名称；</li>\n<li><code>datatype</code>为 MySQL 的数据类型；</li>\n<li><code>default</code>用于声明默认值;</li>\n</ul>\n<p>举个荔枝:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE l_int int unsigned default 100;   </span><br><span class=\"line\">DECLARE l_numeric number(8,2) </span><br><span class=\"line\">DEFAULT 9.95;   </span><br><span class=\"line\">DECLARE l_date date DEFAULT &#39;1999-12-31&#39;;   </span><br><span class=\"line\">DECLARE l_datetime datetime </span><br><span class=\"line\">DEFAULT &#39;1999-12-31 23:59:59&#39;;   </span><br><span class=\"line\">DECLARE l_varchar varchar(255) DEFAULT &#39;This will not be padded&#39;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET 变量名 &#x3D; 表达式值 [,variable_name &#x3D; expression ...]</span><br></pre></td></tr></table></figure>\n\n<p>举个荔枝:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET a &#x3D; 100;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>两个横杆 <strong>–</strong>：该风格一般用于单行注释</p>\n<h4 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h4><h5 id=\"if-条件语句\"><a href=\"#if-条件语句\" class=\"headerlink\" title=\"if 条件语句\"></a>if 条件语句</h5><p><code>IF</code> 语句包含多个条件判断，根据结果为 <code>TRUE</code>、<code>FALSE</code>执行语句</p>\n<p>定义存储过程，输入一个整数，使用 if 语句判断是正数还是负数</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 创建过程</span><br><span class=\"line\">create procedure mypro2(in num int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">if num&lt;0 then -- 条件开始</span><br><span class=\"line\">select &#39;负数&#39;;</span><br><span class=\"line\">elseif num&#x3D;0 then</span><br><span class=\"line\">select &#39;不是正数也不是负数&#39;;</span><br><span class=\"line\">else</span><br><span class=\"line\">select &#39;正数&#39;;</span><br><span class=\"line\">end if;-- 条件结束</span><br><span class=\"line\">end;</span><br><span class=\"line\">-- 调用过程</span><br><span class=\"line\">call mypro2(-1);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"case-条件语句\"><a href=\"#case-条件语句\" class=\"headerlink\" title=\"case 条件语句\"></a>case 条件语句</h5><p><code>case</code>是另一个条件判断的语句</p>\n<p>定义存储过程，输入一个整数，使用 case 语句判断是正数还是负数</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 创建过程</span><br><span class=\"line\">create procedure mypro3(in num int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">case -- 条件开始</span><br><span class=\"line\">when num&lt;0 then select &#39;负数&#39;;</span><br><span class=\"line\">when num&#x3D;0 then select &#39;不是正数也不是负数&#39;;</span><br><span class=\"line\">else select &#39;正数&#39;;</span><br><span class=\"line\">end case; -- 条件结束</span><br><span class=\"line\">end;</span><br><span class=\"line\">-- 调用过程</span><br><span class=\"line\">call mypro3(1);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"while-循环语句\"><a href=\"#while-循环语句\" class=\"headerlink\" title=\"while 循环语句\"></a>while 循环语句</h5><p><code>while</code>语句的用法和 <code>java</code>中的 <code>while</code>循环类似</p>\n<p>定义存储过程，使用 while 循环输出 1 到 10 的累加和</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 创建过程</span><br><span class=\"line\">create procedure mypro5(out sum int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">declare num int default 0;</span><br><span class=\"line\">set sum &#x3D; 0;</span><br><span class=\"line\">while num&lt;10 do -- 循环开始</span><br><span class=\"line\">set num &#x3D; num+1;</span><br><span class=\"line\">set sum &#x3D; sum+num;</span><br><span class=\"line\">end while; -- 循环结束</span><br><span class=\"line\">end;</span><br><span class=\"line\">-- 调用过程</span><br><span class=\"line\">call mypro5(@sum);</span><br><span class=\"line\">-- 查询变量值</span><br><span class=\"line\">select @sum;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"repeat-循环语句\"><a href=\"#repeat-循环语句\" class=\"headerlink\" title=\"repeat 循环语句\"></a>repeat 循环语句</h5><p><code>repeat</code>语句的用法和 <code>java</code>中的 <code>do…while</code> 语句类似</p>\n<p>定义存储过程，使用 repeat 循环输出 1 到 10 的累加和</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 创建过程</span><br><span class=\"line\">create procedure mypro6(out sum int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">declare num int default 0;</span><br><span class=\"line\">set sum &#x3D; 0;</span><br><span class=\"line\">repeat-- 循环开始</span><br><span class=\"line\">set num &#x3D; num+1;</span><br><span class=\"line\">set sum &#x3D; sum+num;</span><br><span class=\"line\">until num&gt;&#x3D;10</span><br><span class=\"line\">end repeat; -- 循环结束</span><br><span class=\"line\">end;</span><br><span class=\"line\">-- 调用过程</span><br><span class=\"line\">call mypro6(@sum);</span><br><span class=\"line\">-- 查询变量值</span><br><span class=\"line\">select @sum;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"loop-循环语句\"><a href=\"#loop-循环语句\" class=\"headerlink\" title=\"loop 循环语句\"></a>loop 循环语句</h5><p>循环语句，用来重复执行某些语句</p>\n<p>执行过程中可使用 leave语句或 iterate 跳出循环，也可以嵌套 IF等判断语句。</p>\n<ul>\n<li><p>leave语句效果相当于 java 中的 break，用来终止循环；</p>\n</li>\n<li><p>iterate语句效果相当于 java 中的 continue，用来结束本次循环操作，进入下一次循环。</p>\n</li>\n</ul>\n<p>定义存储过程，使用 loop 循环输出 1 到 10 的累加和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 创建过程</span><br><span class=\"line\">create procedure mypro7(out sum int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">declare num int default 0;</span><br><span class=\"line\">set sum &#x3D; 0;</span><br><span class=\"line\">loop_sum:loop-- 循环开始</span><br><span class=\"line\">set num &#x3D; num+1;</span><br><span class=\"line\">set sum &#x3D; sum+num;</span><br><span class=\"line\">if num&gt;&#x3D;10 then</span><br><span class=\"line\">leave loop_sum;</span><br><span class=\"line\">end if;</span><br><span class=\"line\">end loop loop_sum; -- 循环结束</span><br><span class=\"line\">end;</span><br><span class=\"line\">-- 调用过程</span><br><span class=\"line\">call mypro7(@sum);</span><br><span class=\"line\">-- 查询变量值</span><br><span class=\"line\">select @sum;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"存储过程的管理\"><a href=\"#存储过程的管理\" class=\"headerlink\" title=\"存储过程的管理\"></a>存储过程的管理</h4><p>显示存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW PROCEDURE STATUS;</span><br></pre></td></tr></table></figure>\n\n<p>显示特定数据库的存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW PROCEDURE status where db &#x3D; &#39;test&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>显示特定模式的存储过程，要求显示名称中包含“my”的存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW PROCEDURE status where name like &#39;%my%&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>显示存储过程“mypro1”的源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW CREATE PROCEDURE mypro1;</span><br></pre></td></tr></table></figure>\n\n<p>删除存储过程“mypro1”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop PROCEDURE mypro1;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据库"],"tags":["MySQL"]},{"title":"Nginx","url":"/PaulGeorge123.github.io/2021/04/18/Nginx/","content":"<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/nginx_logo.jpg\" style=\"zoom: 50%;\" />\n\n\n\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"初识Nginx\"><a href=\"#初识Nginx\" class=\"headerlink\" title=\"初识Nginx:\"></a>初识Nginx:</h4><p><strong>作用</strong></p>\n<blockquote>\n<p>简单来说就是真实的服务器不能直接被外部网络访问,想要访问必须通过代理</p>\n</blockquote>\n<h4 id=\"查看版本号\"><a href=\"#查看版本号\" class=\"headerlink\" title=\"查看版本号\"></a>查看版本号</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -v</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Nginx的启动、停止与重启\"><a href=\"#Nginx的启动、停止与重启\" class=\"headerlink\" title=\"Nginx的启动、停止与重启\"></a>Nginx的启动、停止与重启</h4><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p><strong>启动代码格式：nginx安装目录地址 -c nginx配置文件地址</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>例如：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"关闭-Nginx\"><a href=\"#关闭-Nginx\" class=\"headerlink\" title=\"关闭 Nginx\"></a>关闭 Nginx</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost sbin]<span class=\"comment\"># ./nginx -s stop</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h4><p><strong>nginx的停止有三种方式</strong></p>\n<h4 id=\"从容停止\"><a href=\"#从容停止\" class=\"headerlink\" title=\"从容停止\"></a>从容停止</h4><p><strong>1、查看进程号</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ps -ef|grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、杀死进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# kill -QUIT 29321</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速停止\"><a href=\"#快速停止\" class=\"headerlink\" title=\"快速停止\"></a>快速停止</h4><p><strong>1、查看进程号</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ps -ef|grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、杀死进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# kill -TERM 29321 </span><br><span class=\"line\">或</span><br><span class=\"line\">[root@localhost ~]# kill -INT 29321</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"强制停止\"><a href=\"#强制停止\" class=\"headerlink\" title=\"强制停止\"></a>强制停止</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# pkill -9 nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h4><p><strong>1、验证nginx配置文件是否正确</strong></p>\n<p><strong>进入nginx安装目录sbin下，输入命令./nginx -t</strong></p>\n<p><strong>2、重启Nginx服务</strong></p>\n<p><strong>进入nginx可执行目录sbin下，输入命令  <code>./nginx -s reload</code>  即可</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ./nginx -s reload</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Nginx-文件结构\"><a href=\"#Nginx-文件结构\" class=\"headerlink\" title=\"Nginx 文件结构\"></a>Nginx 文件结构</h4><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\">...              #全局块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;         <span class=\"comment\">#events块</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">http</span>      <span class=\"comment\">#http块</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...   #http全局块</span><br><span class=\"line\">    <span class=\"attribute\">server</span>        <span class=\"comment\">#server块</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        ...       #server全局块</span><br><span class=\"line\">        <span class=\"attribute\">location</span> [PATTERN]   <span class=\"comment\">#location块</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> [PATTERN] </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...     #http全局块</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><ul>\n<li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>\n<li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>\n<li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>\n<li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>\n<li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>\n</ul>\n<hr>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">########### 每个指令必须有分号结束。#################</span></span><br><span class=\"line\"><span class=\"comment\">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span></span><br><span class=\"line\"><span class=\"comment\">#worker_processes 2;  #允许生成的进程数，默认为1</span></span><br><span class=\"line\"><span class=\"comment\">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span> log/error.log <span class=\"literal\">debug</span>;  <span class=\"comment\">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;   <span class=\"comment\">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class=\"line\">    <span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;  <span class=\"comment\">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class=\"line\">    <span class=\"comment\">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;    <span class=\"comment\">#最大连接数，默认为512</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;   <span class=\"comment\">#文件扩展名与文件类型映射表</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream; <span class=\"comment\">#默认文件类型，默认为text/plain</span></span><br><span class=\"line\">    <span class=\"comment\">#access_log off; #取消服务日志    </span></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span> myFormat <span class=\"string\">'<span class=\"variable\">$remote_addr</span>–<span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] <span class=\"variable\">$request</span> <span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> <span class=\"variable\">$http_referer</span> <span class=\"variable\">$http_user_agent</span> <span class=\"variable\">$http_x_forwarded_for</span>'</span>; <span class=\"comment\">#自定义格式</span></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> log/access.log myFormat;  <span class=\"comment\">#combined为日志格式的默认值</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;   <span class=\"comment\">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile_max_chunk</span> <span class=\"number\">100k</span>;  <span class=\"comment\">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;  <span class=\"comment\">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">upstream</span> mysvr &#123;   </span><br><span class=\"line\">      <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:7878</span>;</span><br><span class=\"line\">      <span class=\"attribute\">server</span> <span class=\"number\">192.168.10.121:3333</span> backup;  <span class=\"comment\">#热备</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> https://www.baidu.com; <span class=\"comment\">#错误页</span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">keepalive_requests</span> <span class=\"number\">120</span>; <span class=\"comment\">#单连接请求上限次数。</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">4545</span>;   <span class=\"comment\">#监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  <span class=\"number\">127.0.0.1</span>;   <span class=\"comment\">#监听地址       </span></span><br><span class=\"line\">        <span class=\"attribute\">location</span>  ~*^.+$ &#123;       <span class=\"comment\">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class=\"line\">           <span class=\"comment\">#root path;  #根目录</span></span><br><span class=\"line\">           <span class=\"comment\">#index vv.txt;  #设置默认页</span></span><br><span class=\"line\">           <span class=\"attribute\">proxy_pass</span>  http://mysvr;  <span class=\"comment\">#请求转向mysvr 定义的服务器列表</span></span><br><span class=\"line\">           <span class=\"attribute\">deny</span> <span class=\"number\">127.0.0.1</span>;  <span class=\"comment\">#拒绝的ip</span></span><br><span class=\"line\">           <span class=\"attribute\">allow</span> <span class=\"number\">172.18.5.54</span>; <span class=\"comment\">#允许的ip           </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是nginx的基本配置，需要注意的有以下几点：</p>\n<p>1、几个常见配置项：</p>\n<ul>\n<li>1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</li>\n<li>2.$remote_user ：用来记录客户端用户名称；</li>\n<li>3.$time_local ： 用来记录访问时间与时区；</li>\n<li>4.$request ： 用来记录请求的url与http协议；</li>\n<li>5.$status ： 用来记录请求状态；成功是200；</li>\n<li>6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li>\n<li>7.$http_referer ：用来记录从那个页面链接访问过来的；</li>\n<li>8.$http_user_agent ：记录客户端浏览器的相关信息；</li>\n</ul>\n<p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能</p>\n<p>3、<font color=#FF8C00>每个指令必须有分号结束</font></p>\n","categories":["服务器"],"tags":["反向代理"]},{"title":"RabbitMQ","url":"/PaulGeorge123.github.io/2021/04/05/RabbitMQ/","content":"<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/rabbitMQ.jpg\" style=\"zoom:67%;\" />\n\n\n\n<a id=\"more\"></a>\n\n<h2 id=\"一、RabbitMQ-消息队列\"><a href=\"#一、RabbitMQ-消息队列\" class=\"headerlink\" title=\"一、RabbitMQ 消息队列\"></a>一、RabbitMQ 消息队列</h2><p><strong>消息</strong>指的是两个应用间传递的数据。数据的类型有很多种形式，可能只包含文本字符串，也可能包含嵌入对象。</p>\n<p><strong>“消息队列(Message Queue)”是在消息的传输过程中保存消息的容器</strong>。在消息队列中，通常有生产者和消费者两个角色。生产者只负责发送数据到消息队列，谁从消息队列中取出数据处理，他不管。消费者只负责从消息队列中取出数据处理，他不管这是谁发送的数据。</p>\n<h3 id=\"1、AMQP\"><a href=\"#1、AMQP\" class=\"headerlink\" title=\"1、AMQP\"></a>1、AMQP</h3><p><strong>Publisher</strong></p>\n<p>消息的生产者。也是一个向交换器Exchange发送消息的客户端应用程序。</p>\n<p><strong>Consumer</strong></p>\n<p>消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。</p>\n<p><strong>Server/Broker</strong></p>\n<p>又称Broker，接受客户端的连接，实现AMQP实体服务。</p>\n<p><strong>Virtual host</strong></p>\n<p>虚拟地址，用于进行逻辑隔离，最上层的消息路由。</p>\n<p>表示一批交换器，消息队列和相关对象。一个Virtual Host里面可以有若干个Exchange和Queue，同一个Virtual Host里面不能有相同名称的Exchange和Queue。</p>\n<p>虚拟主机是共享相同的身份认证和加密环境的独立服务器域，每个vhost本质上就是一个mini版本的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是“/”。</p>\n<p><strong>Message</strong></p>\n<p>消息，服务器和应用程序之间传送的数据。消息是不具名的，由Properties和Body组成（消息头和消息体）。Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body这就是消息体内容。</p>\n<p><strong>Exchange</strong></p>\n<p>交换机，接收生产者发送的消息，根据路由键转发消息到绑定的队列。</p>\n<p>三种常见的交换机类型：</p>\n<p>1、direct（发布与订阅，完全匹配）</p>\n<p>2、fanout（广播）</p>\n<p>3、topic（主题，规则匹配）</p>\n<p><strong>Binding</strong></p>\n<p>绑定。Exchange和Queue之间的虚拟连接，binding中可以包含routing key。</p>\n<p>一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p>\n<p><strong>Routing key</strong></p>\n<p>路由键。一个路由规则，虚拟机可用它来确定如何路由一个特定消息。</p>\n<p>队列通过路由键绑定到交换机。</p>\n<p>消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的。RabbitMQ也会将其和绑定使用的路由键进行匹配。</p>\n<p>如果匹配，消息将投递到该队列；如果不匹配，消息将会进入黑洞。</p>\n<p><strong>Connection</strong></p>\n<p>连接，应用程序与Broker的TCP网络连接。</p>\n<p><strong>Channel</strong></p>\n<p>网络信道，是TCP里面的虚拟连接。几乎所有的操作都在Channel中进行， Channel是进行消息读写的通道。客户端可以建立多个Channel，每个Channel代表一个会话任务（类似数据库中Connection中的session）。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。</p>\n<p>TCP一旦打开，就会创建AMQP信道。</p>\n<p>无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。</p>\n<p>RabbitMQ为什么需要信道？为什么不是直接通信？</p>\n<p>1、TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手；</p>\n<p>2、如果不用信道，那应用程序就会以TCP连接RabbitMQ，高峰时每秒成千上万条连接会造成资源巨大浪费，而且操作系统每秒处理TCP连接数也是有限制的，必定造成性能瓶颈；</p>\n<p>3、信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP连接。一条TCP连接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能瓶颈。</p>\n<p><strong>Queue</strong></p>\n<p>也称为Message Queue（消费者创建），消息队列，保存消息并将它们转发给消费者。它是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列上将其取走。</p>\n<h3 id=\"2、RabbitMQ-交换机\"><a href=\"#2、RabbitMQ-交换机\" class=\"headerlink\" title=\"2、RabbitMQ 交换机\"></a>2、RabbitMQ 交换机</h3><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-26_15-45-17.png\" alt=\"\"></p>\n<p>Exchange交换机，接收消息，并根据路由键转发消息所绑定的队列。</p>\n<p><strong>交换机属性：</strong></p>\n<p>Name：交换机名称</p>\n<p>Type：交换机类型direct、topic、fanout、headers</p>\n<p>Durability：是否需要持久化（true表示需要持久化）</p>\n<p>Auto Delete：当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange</p>\n<p>Internal：当前Exchange是否用于RabbitMQ内部使用，默认为false（很多场景都不会用到该设置）</p>\n<p>Arguments：扩展参数，用于扩展AMQP协议自制定化使用</p>\n<h5 id=\"1、Direct-Exchange\"><a href=\"#1、Direct-Exchange\" class=\"headerlink\" title=\"1、Direct Exchange\"></a>1、Direct Exchange</h5><p>所有发送到Direct Exchange的消息被转发到RouteKey中指定Queue。</p>\n<p>注意：Direct模式可以使用RabbitMQ自带的Exchange：default Exchange，所以不需要将Exchange进行任何绑定（binding）操作，消息传递时，RouteKey必须完全匹配才会被队列接收，否则该消息会抛弃。</p>\n<h5 id=\"2、Topic-Exchange\"><a href=\"#2、Topic-Exchange\" class=\"headerlink\" title=\"2、Topic Exchange\"></a>2、Topic Exchange</h5><p>所有发送到Topic Exchange的消息被转发到所有关心RouteKey中指定Topic的Queue上。</p>\n<p>Exchange将RouteKey和某个Topic进行模糊匹配，此时队列需要绑定一个Topic。</p>\n<p>注：可以使用通配符进行模糊匹配。</p>\n<h5 id=\"3、Fanout-Exchange\"><a href=\"#3、Fanout-Exchange\" class=\"headerlink\" title=\"3、Fanout Exchange\"></a>3、Fanout Exchange</h5><p>Fanout（群发）不处理路由键，只需要简单的将队列绑定到交换机上。</p>\n<p>发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。</p>\n<p>Fanout交换机转发消息是最快的。</p>\n<h3 id=\"3、RabbitMQ-消息可靠性\"><a href=\"#3、RabbitMQ-消息可靠性\" class=\"headerlink\" title=\"3、RabbitMQ 消息可靠性\"></a>3、RabbitMQ 消息可靠性</h3><h4 id=\"1-可靠性投递\"><a href=\"#1-可靠性投递\" class=\"headerlink\" title=\"1. 可靠性投递\"></a>1. 可靠性投递</h4><p>什么是生产端的可靠性投递？</p>\n<ol>\n<li>保障消息的成功发出；</li>\n<li>保障MQ节点的成功接收；</li>\n<li>发送端收到MQ节点（Broker）确认应答ACK；</li>\n<li>完善的消息进行补偿机制。</li>\n</ol>\n<h4 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h4><h5 id=\"1、消息落库-持久化\"><a href=\"#1、消息落库-持久化\" class=\"headerlink\" title=\"1、消息落库/持久化\"></a>1、消息落库/持久化</h5><p>消息信息落库（即消息持久化），对消息状态进行打标：</p>\n<p>这种方案需要对数据库进行两次持久化操作</p>\n<h5 id=\"2-延迟投递\"><a href=\"#2-延迟投递\" class=\"headerlink\" title=\"2.延迟投递\"></a>2.延迟投递</h5><p>消息落库在高并发场景下，数据库IO压力大，不适用。互联网大厂一般采用的是延迟投递，做二次检查，回调检查。</p>\n<h3 id=\"4、RabbitMQ-消息幂等性\"><a href=\"#4、RabbitMQ-消息幂等性\" class=\"headerlink\" title=\"4、RabbitMQ 消息幂等性\"></a>4、RabbitMQ 消息幂等性</h3><h4 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h4><p>幂等性即对数据进行若干次操作，仍然保证正确。</p>\n<p>消费端实现幂等性，就意味着，我们的消息永远不会消费多次，即使收到多条一样的消息。</p>\n<hr>\n<h2 id=\"二、RabbitMQ-消息队列的使用\"><a href=\"#二、RabbitMQ-消息队列的使用\" class=\"headerlink\" title=\"二、RabbitMQ 消息队列的使用\"></a>二、RabbitMQ 消息队列的使用</h2><p>主要有三个作用：</p>\n<ul>\n<li>解耦</li>\n<li>异步</li>\n<li>削峰</li>\n</ul>\n<h3 id=\"RabbitMQ几种典型模式\"><a href=\"#RabbitMQ几种典型模式\" class=\"headerlink\" title=\"RabbitMQ几种典型模式\"></a>RabbitMQ几种典型模式</h3><ul>\n<li><strong>单模式Simple</strong></li>\n<li><strong>工作模式Work</strong></li>\n<li><strong>发布订阅模式Publish/Subscribe</strong></li>\n<li><strong>路由模式Routing</strong></li>\n<li><strong>通配符模式Topics</strong></li>\n<li><strong>远程调用模式RPC</strong></li>\n</ul>\n<h4 id=\"模式1：简单模式\"><a href=\"#模式1：简单模式\" class=\"headerlink\" title=\"模式1：简单模式\"></a>模式1：简单模式</h4><p>【Simple / HelloWorld 单生产单消费】</p>\n<p>简单的发送与接收，没有特别的处理。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/20181113170451647.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"模式2：工作模式\"><a href=\"#模式2：工作模式\" class=\"headerlink\" title=\"模式2：工作模式\"></a>模式2：工作模式</h4><p>【Work单发送多接收，拿到消息即销毁】</p>\n<p>一个生产者端，多个消费者端。示例中为了保证消息发送的可靠性，不丢失消息，使消息持久化了。同时为了防止接收端在处理消息时down掉，只有在消息处理完成后才发送消息确认。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/20181113170522132.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"模式3：发布、订阅模式\"><a href=\"#模式3：发布、订阅模式\" class=\"headerlink\" title=\"模式3：发布、订阅模式\"></a>模式3：发布、订阅模式</h4><p>【Publish/Subscribe】</p>\n<p>使用场景：发布、订阅模式，生产者端发送消息，多个消费者同时接收所有的消息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/20181113170540476.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"模式4：路由模式\"><a href=\"#模式4：路由模式\" class=\"headerlink\" title=\"模式4：路由模式\"></a>模式4：路由模式</h4><p>【Routing】（direct 直接的）</p>\n<p>生产者按routing key发送消息，不同的消费者端按不同的routing key接收消息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/20181113170555287.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"模式5：通配符（或主题）模式\"><a href=\"#模式5：通配符（或主题）模式\" class=\"headerlink\" title=\"模式5：通配符（或主题）模式\"></a>模式5：通配符（或主题）模式</h4><p>【Topics ，按topic发送接收】</p>\n<p>生产者端不只按固定的routing key发送消息，而是按字符串“匹配”发送，消费者端同样如此。<br>与之前的路由模式相比，它将信息的传输类型的key更加细化，以“key1.key2.keyN…”的模式来指定信息传输的key的大类型和大类型下面的小类型，让消费者端可以更加精细的确认自己想要获取的信息类型。而在消费者端，不用精确的指定具体到哪一个大类型下的小类型的key，而是可以使用类似正则表达式(但与正则表达式规则完全不同)的通配符在指定一定范围或符合某一个字符串匹配规则的key，来获取想要的信息。“通配符交换机”（Topic Exchange）将路由键和某模式进行匹配。此时队列需要绑定在一个模式上。符号“#”匹配一个或多个词，符号“*”仅匹配一个词。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img1/20181113170631174.png\" alt=\"\"></p>\n","categories":["中间件"],"tags":["消息队列"]},{"title":"PageHelper","url":"/PaulGeorge123.github.io/2021/03/15/PageHelper/","content":"<p><strong>PageHelper是一款好用的开源免费的Mybatis第三方物理分页插件</strong></p>\n<ul>\n<li>Github地址:<a href=\"https://github.com/pagehelper/Mybatis-PageHelper\" target=\"_blank\" rel=\"noopener\">https://github.com/pagehelper/Mybatis-PageHelper</a></li>\n<li>官方地址：<a href=\"https://pagehelper.github.io/\" target=\"_blank\" rel=\"noopener\">https://pagehelper.github.io/</a>**</li>\n</ul>\n<h4 id=\"如何使用分页插件\"><a href=\"#如何使用分页插件\" class=\"headerlink\" title=\"如何使用分页插件\"></a>如何使用分页插件</h4><h4 id=\"使用-Maven\"><a href=\"#使用-Maven\" class=\"headerlink\" title=\"使用 Maven\"></a>使用 Maven</h4><ul>\n<li><strong>在 pom.xml 中添加如下依赖：</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入PageHelper依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<ul>\n<li><strong>配置PageHelper相关属性</strong></li>\n</ul>\n<h4 id=\"方法一：在application-yml文件中配置\"><a href=\"#方法一：在application-yml文件中配置\" class=\"headerlink\" title=\"方法一：在application.yml文件中配置\"></a>方法一：在application.yml文件中配置</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置pagehelper参数</span></span><br><span class=\"line\"><span class=\"attr\">pagehelper:</span></span><br><span class=\"line\">    <span class=\"attr\">helperDialect:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">reasonable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">supportMethodsArguments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span> <span class=\"string\">count=countSql</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二：创建一个配置类配置-PageHelper\"><a href=\"#方法二：创建一个配置类配置-PageHelper\" class=\"headerlink\" title=\"方法二：创建一个配置类配置 PageHelper\"></a>方法二：创建一个配置类配置 PageHelper</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageHelperConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PageHelper <span class=\"title\">getPageHelper</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        PageHelper pageHelper=<span class=\"keyword\">new</span> PageHelper();</span><br><span class=\"line\">        Properties properties=<span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"helperDialect\"</span>,<span class=\"string\">\"mysql\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"reasonable\"</span>,<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"supportMethodsArguments\"</span>,<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        properties.setProperty(<span class=\"string\">\"params\"</span>,<span class=\"string\">\"count=countSql\"</span>);</span><br><span class=\"line\">        pageHelper.setProperties(properties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageHelper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>PageInfo类源码的属性如下：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageInfo</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"comment\">//当前页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageNum;</span><br><span class=\"line\">    <span class=\"comment\">//每页的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageSize;</span><br><span class=\"line\">    <span class=\"comment\">//当前页的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//由于startRow和endRow不常用，这里说个具体的用法</span></span><br><span class=\"line\">    <span class=\"comment\">//可以在页面中\"显示startRow到endRow 共size条数据\"</span></span><br><span class=\"line\">    <span class=\"comment\">//当前页面第一个元素在数据库中的行号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> startRow;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//当前页面最后一个元素在数据库中的行号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> endRow;</span><br><span class=\"line\">    <span class=\"comment\">//总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> total;</span><br><span class=\"line\">    <span class=\"comment\">//总页数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pages;</span><br><span class=\"line\">    <span class=\"comment\">//结果集</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; list;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//前一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> prePage;</span><br><span class=\"line\">    <span class=\"comment\">//下一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> nextPage;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//是否为第一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isFirstPage = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否为最后一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLastPage = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否有前一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasPreviousPage = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否有下一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasNextPage = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//导航页码数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> navigatePages;</span><br><span class=\"line\">    <span class=\"comment\">//所有导航页号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] navigatepageNums;</span><br><span class=\"line\">    <span class=\"comment\">//导航条上的第一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> navigateFirstPage;</span><br><span class=\"line\">    <span class=\"comment\">//导航条上的最后一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> navigateLastPage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>前端请求接口方法</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/getPerson\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> List&lt;TbPersonPO&gt; <span class=\"title\">getSomePerson</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"pageNum\"</span>,defaultValue=<span class=\"string\">\"1\"</span>)</span> <span class=\"keyword\">int</span> pageNum )</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//pageNum:表示第几页  pageSize:表示一页展示的数据</span></span><br><span class=\"line\">       PageHelper.startPage(pageNum,<span class=\"number\">3</span>);</span><br><span class=\"line\">       List&lt;TbPersonPO&gt; list=tbPersonDao.queryPerosn();</span><br><span class=\"line\">       <span class=\"comment\">//将查询到的数据封装到PageInfo对象</span></span><br><span class=\"line\">       PageInfo&lt;TbPersonPO&gt; pageInfo=<span class=\"keyword\">new</span> PageInfo(list,<span class=\"number\">3</span>);</span><br><span class=\"line\">       <span class=\"comment\">//分割数据成功</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>PageHelper是不是用起来感觉为我们节省了不少的时间呢？</p>\n</blockquote>\n","categories":["工具"],"tags":["分页插件"]},{"title":"Redis--基本语句","url":"/PaulGeorge123.github.io/2021/05/21/Redis--%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/","content":"<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Redis-Logo.wine.png\" style=\"zoom: 18%;\" />\n\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"key–操作数据库\"><a href=\"#key–操作数据库\" class=\"headerlink\" title=\"key–操作数据库\"></a>key–操作数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ 插入数据/更新key的值 <span class=\"built_in\">set</span> key_name value </span><br><span class=\"line\"></span><br><span class=\"line\">$ 查询数据 get key_name</span><br><span class=\"line\"></span><br><span class=\"line\">$ 删除键值 del key_name </span><br><span class=\"line\"></span><br><span class=\"line\">$ 验证键是否存在 exists key_name</span><br><span class=\"line\"></span><br><span class=\"line\">$ 返回所有 key  keys *       </span><br><span class=\"line\"></span><br><span class=\"line\">$ 返回所有 xxx开头的 key  keys xxx*</span><br><span class=\"line\"></span><br><span class=\"line\">$ 设置一个 key 的过期时间(单位:秒) expire key_name 10</span><br><span class=\"line\"></span><br><span class=\"line\">$ 移除给定 key 的过期时间 persist key_name </span><br><span class=\"line\"></span><br><span class=\"line\">$ 选择数据库[0..15] select index</span><br><span class=\"line\"></span><br><span class=\"line\">$ 将当前数据库中的 key 转移到其它数据库中 move key_name 1 </span><br><span class=\"line\"></span><br><span class=\"line\">$ 返回值的类型 <span class=\"built_in\">type</span> key_name</span><br><span class=\"line\"></span><br><span class=\"line\">$ 更新key的值返回原来的值 getset key_name value</span><br><span class=\"line\"></span><br><span class=\"line\">$ 测试连接是否存活 ping</span><br><span class=\"line\"></span><br><span class=\"line\">$ 返回当前数据库中 key 的数目 dbsize</span><br><span class=\"line\"></span><br><span class=\"line\">$ 监视--实时转储收到的请求 monitor</span><br><span class=\"line\"></span><br><span class=\"line\">$ 删除当前选择数据库中的所有 key flushdb</span><br><span class=\"line\"></span><br><span class=\"line\">$ 删除所有数据库中的所有 key flushall</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Redis数据类型–string\"><a href=\"#Redis数据类型–string\" class=\"headerlink\" title=\"Redis数据类型–string\"></a>Redis数据类型–string</h4><ul>\n<li><p>string 是最简单的类型 ，一个 key 对应一个value</p>\n</li>\n<li><p>redis 的 string 可以包含任何数据， 比如 jpg 图片或者序列化的对象，从内部实现来看其实 string 可以看作 byte 数组，最大上限是 1G 字节。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>:插入数据/更新key的值 <span class=\"built_in\">set</span> name dhee</span><br><span class=\"line\"></span><br><span class=\"line\">get:查询数据 get key_name</span><br><span class=\"line\"></span><br><span class=\"line\">mset:一次设置多个 key 的值 mset key1 dhc key2 jhc</span><br><span class=\"line\"></span><br><span class=\"line\">mget :一次获取多个 key 的值 mget key1 key2 key3</span><br><span class=\"line\"></span><br><span class=\"line\">setnx:如果 key 已经存在，返回 0 ,setnx name dhee</span><br><span class=\"line\"></span><br><span class=\"line\">setex:指定此键值对应的有效期,时间单位为秒 ,setex name 120 dhee</span><br><span class=\"line\"></span><br><span class=\"line\">setrange:设置指定 key 的 value 值的子字符串 ，从指定的位置开始替换字符 ,setrange name 3 @dhc.com</span><br><span class=\"line\"></span><br><span class=\"line\">getrange:获取指定 key 的 value 值的子字符串 getrange name 0 6</span><br><span class=\"line\"></span><br><span class=\"line\">** expire:设置key失效时间 expire key_name 3</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Redis-哈希-Hash\"><a href=\"#Redis-哈希-Hash\" class=\"headerlink\" title=\"Redis 哈希(Hash)\"></a>Redis 哈希(Hash)</h4><ul>\n<li><p>一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n</li>\n<li><p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset :设置 <span class=\"built_in\">hash</span> field 为指定值,hset myhash name dhee</span><br><span class=\"line\"></span><br><span class=\"line\">hget :获取指定的 <span class=\"built_in\">hash</span> field,hget myhash name</span><br><span class=\"line\"></span><br><span class=\"line\">** hmset:同时设置 <span class=\"built_in\">hash</span> 的多个 field,hmset myhash name dhee age 20</span><br><span class=\"line\"></span><br><span class=\"line\">** hmget :获取全部指定的 <span class=\"built_in\">hash</span> filed,hmget myhash name age password</span><br><span class=\"line\"></span><br><span class=\"line\">** hlen :返回指定 <span class=\"built_in\">hash</span> 的 field 数量,hlen myhash</span><br><span class=\"line\"></span><br><span class=\"line\">hdel :删除一个或多个哈希表字段,hdel myhash age</span><br><span class=\"line\"></span><br><span class=\"line\">hkeys:返回 <span class=\"built_in\">hash</span> 的所有 field,hkeys myhash</span><br><span class=\"line\"></span><br><span class=\"line\">hvals :返回 <span class=\"built_in\">hash</span> 的所有 value:hvals myhash</span><br><span class=\"line\"></span><br><span class=\"line\">hgetall :获取某个 <span class=\"built_in\">hash</span> 中全部的 filed及value,hgetall myhash</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Redis-列表-List\"><a href=\"#Redis-列表-List\" class=\"headerlink\" title=\"Redis 列表(List)\"></a>Redis 列表(List)</h4><ul>\n<li><p>简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n</li>\n<li><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lpush:在 key 对应 list 的头部添加字符串元素 ,lpush mylist world lpush mylist hello </span><br><span class=\"line\"></span><br><span class=\"line\">lrange: lrange mylist 0 1</span><br><span class=\"line\"></span><br><span class=\"line\">** rpush :在 key 对应 list 的尾部添加字符串元素 , rpush mylist world rpush mylist hello </span><br><span class=\"line\"></span><br><span class=\"line\">** linsert :在 key 对应 list 的特定位置前或后添加字符串 ,linsert mylist before world dhee</span><br><span class=\"line\"></span><br><span class=\"line\">** lset :设置 list 中指定下标的元素值(下标从 0 开始) ,lset mylist 0 dhc</span><br><span class=\"line\"></span><br><span class=\"line\">`lrem` :从 key 对应 list 中删除 count 个和 value 相同的元素,lrem mylist 2 hello</span><br><span class=\"line\"></span><br><span class=\"line\">** ltrim :保留指定 key 的值范围内的数据, ltrim mylist 1 3</span><br><span class=\"line\"></span><br><span class=\"line\">lpop :从 list 的头部删除元素，并返回删除元素, lpop mylist</span><br><span class=\"line\"></span><br><span class=\"line\">** rpop :从 list 的尾部删除元素，并返回删除元素, rpop mylist</span><br><span class=\"line\"></span><br><span class=\"line\">** lindex :返回名称为 key 的 list 中 index 位置的元素 ,lindex mylist 0</span><br><span class=\"line\"></span><br><span class=\"line\">** llen :返回 key 对应 list 的长度 ,llen mylist</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Redis-集合-Set\"><a href=\"#Redis-集合-Set\" class=\"headerlink\" title=\"Redis 集合(Set)\"></a>Redis 集合(Set)</h4><ul>\n<li><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n</li>\n<li><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n</li>\n<li><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">`sadd` ： sadd myset hello</span><br><span class=\"line\"></span><br><span class=\"line\">`smembers` ：查看 myset 中的所有元素 , smembers myset</span><br><span class=\"line\"></span><br><span class=\"line\">`srem` ：删除名称为 key 的 <span class=\"built_in\">set</span> 中的元素 member, srem myset hello</span><br><span class=\"line\"></span><br><span class=\"line\">spop ：随机删除名称为 key 的 se t 中一个元素,spop myset</span><br><span class=\"line\"></span><br><span class=\"line\">sdiff:返回第一个 <span class=\"built_in\">set</span>集合与第二个 <span class=\"built_in\">set</span>集合的差集,sdiff myset2 myset1</span><br><span class=\"line\"></span><br><span class=\"line\">sdiffstore :返回第一个 <span class=\"built_in\">set</span>集合与第二个 <span class=\"built_in\">set</span>集合的差集 ，并将结果存为另一个 <span class=\"built_in\">set</span>, sdiffstore</span><br><span class=\"line\"></span><br><span class=\"line\">myset3 myset2 myset1</span><br><span class=\"line\"></span><br><span class=\"line\">sinter:返回所有给定 key 的交集 ,sinter myset1 myset2</span><br><span class=\"line\"></span><br><span class=\"line\">sinterstore :返回所有给定 key 的交集，并将结果存为另一个 key ,sinterstore myset4 myset2 </span><br><span class=\"line\"></span><br><span class=\"line\">myset1</span><br><span class=\"line\"></span><br><span class=\"line\">`sunion`:返回所有给定 key 的并集 ,sunion myset2 myset1</span><br><span class=\"line\"></span><br><span class=\"line\">sunionstore :返回所有给定 key 的并集，并将结果存为另一个key </span><br><span class=\"line\"></span><br><span class=\"line\">sunionstore myset5 myset2 myset1</span><br><span class=\"line\"></span><br><span class=\"line\">`scard`:返回名称为 key 的 <span class=\"built_in\">set</span> 的元素个数 ,scard myset2</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Redis-有序集合-sorted-set\"><a href=\"#Redis-有序集合-sorted-set\" class=\"headerlink\" title=\"Redis 有序集合(sorted set)\"></a>Redis 有序集合(sorted set)</h4><ul>\n<li><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>\n</li>\n<li><p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n</li>\n<li><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n</li>\n<li><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">`zadd`：向名称为 key 的 zset 中添加元素 member， score 用于设定分数。如果该元素已经存在，则根据</span><br><span class=\"line\"></span><br><span class=\"line\">`score` 更新该元素的分数。zadd key score member,zrange myzset 0 -1 withscores</span><br><span class=\"line\"></span><br><span class=\"line\">`zrem` :删除名称为 key 的 zset 中的元素 member ,zrem myzset two</span><br><span class=\"line\"></span><br><span class=\"line\">`zincrby`：给成员增加指定分数 zincrby myzset 1 one</span><br><span class=\"line\"></span><br><span class=\"line\">`zrank` ：返回zset 中名称为 key 的 member 元素的排名(按 score 从小到大排序)即下标 zrank myzset two</span><br><span class=\"line\"></span><br><span class=\"line\">`zrevrank`：返回zset 中名称为 key 的 member 元素的排名(按 score 从大到小排序)即下标 zrevrank myzset two</span><br><span class=\"line\"></span><br><span class=\"line\">`zrevrange` ：按 score 从大到小排序，再取出全部元素 ,zrevrange myzset 0 -1 withscores</span><br><span class=\"line\"></span><br><span class=\"line\">`zrangebyscore` ：返回集合中 score 在给定区间的元素,zrangebyscore myzset 2 3 withscores</span><br><span class=\"line\"></span><br><span class=\"line\">`zcount` ：返回集合中 score 在给定区间的数量 ,zcount myzset 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">`zcard` ：返回集合中元素个数 zcard myzset (key 的个数)</span><br><span class=\"line\"></span><br><span class=\"line\">`zscore` ：返回给定元素对应的 score ,zscore myzset two (key 的 score 数量)</span><br><span class=\"line\"></span><br><span class=\"line\">zremrangebyrank ：删除集合中排名在给定区间的元素 ,zremrangebyrank myzset 3 3</span><br><span class=\"line\"></span><br><span class=\"line\">zremrangebyscore ：删除集合中 score 在给定区间的元素,zremrangebyscore myzset 1 2</span><br></pre></td></tr></table></figure>","categories":["数据库"],"tags":["Redis"]},{"title":"如何将Sass编译成CSS","url":"/PaulGeorge123.github.io/2021/02/18/Sass/","content":"<h4 id=\"命令编译\"><a href=\"#命令编译\" class=\"headerlink\" title=\"命令编译\"></a>命令编译</h4><p>命令编译就是在终端中输入 <code>sass</code> 命令来编译 Sass 代码，这种编译方式使用起来很简单。</p>\n<p><strong>示例：</strong></p>\n<p>假设现在有一个Sass文件，文件名为 <code>style.scss</code> （Sass 文件的扩展名名 <code>.scss</code>），我们需要将这个文件中的代码编译成 CSS 代码，可以执行如下命令：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.css</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>命令执行成功后，会自动创建一个 <code>style.css</code> 文件。但是这样有一个问题，就是每次更改了 <code>style.scss</code> 文件中的内容，都需要执行一次编译命令，就会很麻烦。</p>\n<p>如果要解决上述问题，可以使用监听命令 <code>--watch</code> ，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">--watch</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span><span class=\"selector-pseudo\">:style.css</span></span><br></pre></td></tr></table></figure>\n\n<p>如果项目中有很多的 sass 文件，可以监听整个目录：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Sass四种输出格式\"><a href=\"#Sass四种输出格式\" class=\"headerlink\" title=\"Sass四种输出格式\"></a>Sass四种输出格式</h4><p>在编译 Sass 代码时，我们可以指定 Sass 的编译输出格式，这需要用到 <code>--style</code> 指令，这个指定后面可接如下四种 Sass 输出格式：</p>\n<ul>\n<li><code>nested</code>：嵌套输出格式，默认格式。</li>\n<li><code>expanded</code>：展开输出方式。</li>\n<li><code>compact</code>：紧凑输出方式 。</li>\n<li><code>compressed</code>：压缩输出方式 。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>例如以 <code>style.scss</code> 文件为例，内容如下所示：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.xkd</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一种：使用-nested-编译排版格式输出，可以执行如下命令：\"><a href=\"#第一种：使用-nested-编译排版格式输出，可以执行如下命令：\" class=\"headerlink\" title=\"第一种：使用 nested 编译排版格式输出，可以执行如下命令：\"></a>第一种：使用 <strong><code>nested</code></strong> 编译排版格式输出，可以执行如下命令：</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span><span class=\"selector-pseudo\">:style.css</span> <span class=\"selector-tag\">--style</span> <span class=\"selector-tag\">nested</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后的 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.xkd</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.xkd</span> <span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种：使用-expanded-编译排版格式输出，可以执行如下命令：\"><a href=\"#第二种：使用-expanded-编译排版格式输出，可以执行如下命令：\" class=\"headerlink\" title=\"第二种：使用 expanded 编译排版格式输出，可以执行如下命令：\"></a>第二种：使用 <strong><code>expanded</code></strong> 编译排版格式输出，可以执行如下命令：</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span><span class=\"selector-pseudo\">:style.css</span> <span class=\"selector-tag\">--style</span> <span class=\"selector-tag\">expanded</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后的 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.xkd</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.xkd</span> <span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三种：使用-compact-编译排版格式输出，可以执行如下命令：\"><a href=\"#第三种：使用-compact-编译排版格式输出，可以执行如下命令：\" class=\"headerlink\" title=\"第三种：使用 compact 编译排版格式输出，可以执行如下命令：\"></a>第三种：使用 <strong><code>compact</code></strong> 编译排版格式输出，可以执行如下命令：</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span><span class=\"selector-pseudo\">:style.css</span> <span class=\"selector-tag\">--style</span> <span class=\"selector-tag\">compact</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后的 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.xkd</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>; <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.xkd</span> <span class=\"selector-class\">.box</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>; <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第四种：使用-compressed-编译排版格式输出，可以执行如下命令：\"><a href=\"#第四种：使用-compressed-编译排版格式输出，可以执行如下命令：\" class=\"headerlink\" title=\"第四种：使用 compressed 编译排版格式输出，可以执行如下命令：\"></a>第四种：使用 <strong><code>compressed</code></strong> 编译排版格式输出，可以执行如下命令：</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sass</span> <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span><span class=\"selector-pseudo\">:style.css</span> <span class=\"selector-tag\">--style</span> <span class=\"selector-tag\">compressed</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后的 CSS 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.xkd</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#ccc</span>&#125;<span class=\"selector-class\">.xkd</span> <span class=\"selector-class\">.box</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;<span class=\"attribute\">border-radius</span>:<span class=\"number\">5px</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>这四种输出格式中，一般我会选择使用第二种输出格式，也就是 <code>expanded</code> 格式。这种格式和我们手写的 CSS 样式差不多，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</p>\n","categories":["前端"],"tags":["Web"]},{"title":"Restful","url":"/PaulGeorge123.github.io/2020/07/06/Restful/","content":"<h3 id=\"什么是RESTful？\"><a href=\"#什么是RESTful？\" class=\"headerlink\" title=\"什么是RESTful？\"></a>什么是RESTful？</h3><p><strong>REST</strong>：指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是<strong>RESTful</strong>。</p>\n<h3 id=\"如何设计RESTful应用程序的API\"><a href=\"#如何设计RESTful应用程序的API\" class=\"headerlink\" title=\"如何设计RESTful应用程序的API?\"></a>如何设计RESTful应用程序的API?</h3><p><strong>路径设计</strong>：数据库设计完毕之后，基本上就可以确定有哪些资源要进行操作，相对应的路径也可以设计出来。</p>\n<p><strong>动词设计</strong>：也就是针对资源的具体操作类型，有HTTP动词表示，常用的HTTP动词如下：POST、DELETE、PUT、GET</p>\n<a id=\"more\"></a>\n\n<h3 id=\"几个注解\"><a href=\"#几个注解\" class=\"headerlink\" title=\"几个注解\"></a>几个注解</h3><p><strong>在讲述使用之前，想要理解SpringMVC的几个常用注解：</strong></p>\n<ul>\n<li>@Controller：修饰class，用来创建处理http请求的对象</li>\n<li>@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要- - @ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。</li>\n<li>@RequestMapping：配置url映射</li>\n<li>@PostMapping: 这个是@RequestMapping+POST方法的简写</li>\n<li>@RequestHeader: 请求Header参数</li>\n<li>@PathVariable: URL路径参数，比如/user/{id}中的id参数</li>\n<li>@RequestParam: URL请求参数，比如/user?id=1中的id参数</li>\n<li>@RequestBody: 请求Body参数</li>\n</ul>\n<hr>\n<blockquote>\n<p>常用响应状态码（在RESTful 中有重要应用）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>响应状态码</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td>OK //客户端请求成功</td>\n</tr>\n<tr>\n<td>400</td>\n<td>Bad Request //客户端请求有语法错误，不能被服务器所理解</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unanthorized //服务器收到请求，但是服务器拒绝提供服务</td>\n</tr>\n<tr>\n<td>404</td>\n<td>404 Not Found //请求资源不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Serval Error //服务器发生不可预期的错误</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Server Unavailable // 服务器当前不能处理客户端的请求</td>\n</tr>\n</tbody></table>\n<h3 id=\"RESTful-API设计示例\"><a href=\"#RESTful-API设计示例\" class=\"headerlink\" title=\"RESTful API设计示例\"></a>RESTful API设计示例</h3><table>\n<thead>\n<tr>\n<th align=\"left\">模块</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">URL</th>\n<th align=\"left\">HTTP请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">用户</td>\n<td align=\"left\">用户注册</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Fusers%2Fregister\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/users/register</a></td>\n<td align=\"left\">POST</td>\n</tr>\n<tr>\n<td align=\"left\">用户</td>\n<td align=\"left\">用户登录</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Fusers%2Flogin\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/users/login</a></td>\n<td align=\"left\">POST</td>\n</tr>\n<tr>\n<td align=\"left\">文章</td>\n<td align=\"left\">发表文章</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Farticles\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/articles</a></td>\n<td align=\"left\">POST</td>\n</tr>\n<tr>\n<td align=\"left\">文章</td>\n<td align=\"left\">查看文章</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Farticles%2F%3Aid\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/articles/:id</a></td>\n<td align=\"left\">GET</td>\n</tr>\n<tr>\n<td align=\"left\">文章</td>\n<td align=\"left\">修改文章</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Farticles%2F%3Aid\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/articles/:id</a></td>\n<td align=\"left\">PUT</td>\n</tr>\n<tr>\n<td align=\"left\">文章</td>\n<td align=\"left\">删除文章</td>\n<td align=\"left\"><a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapi.demo.com%2F1.0%2Faritcles%2F%3Aid\" target=\"_blank\" rel=\"noopener\">http://api.demo.com/1.0/aritcles/:id</a></td>\n<td align=\"left\">DELETE</td>\n</tr>\n</tbody></table>\n<h3 id=\"Request\"><a href=\"#Request\" class=\"headerlink\" title=\"Request\"></a>Request</h3><h3 id=\"HTTP方法\"><a href=\"#HTTP方法\" class=\"headerlink\" title=\"HTTP方法\"></a>HTTP方法</h3><p><strong>通过标准HTTP方法对资源CRUD：</strong></p>\n<p><strong>GET：查询</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /zoos</span><br><span class=\"line\">GET /zoos/<span class=\"number\">1</span></span><br><span class=\"line\">GET /zoos/<span class=\"number\">1</span>/employees</span><br></pre></td></tr></table></figure>\n\n<p><strong>POST：创建单个资源。POST一般向“资源集合”型uri发起</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /animals  <span class=\"comment\">//新增动物</span></span><br><span class=\"line\">POST /zoos/<span class=\"number\">1</span>/employees <span class=\"comment\">//为id为1的动物园雇佣员工</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH 负责部分更新，客户端提供要更新的那些字段。PUT/PATCH一般向“单个资源”型uri发起</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /animals/<span class=\"number\">1</span></span><br><span class=\"line\">PUT /zoos/<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>DELETE：删除</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE /zoos/<span class=\"number\">1</span>/employees/<span class=\"number\">2</span></span><br><span class=\"line\">DELETE /zoos/<span class=\"number\">1</span>/employees/<span class=\"number\">2</span>;<span class=\"number\">4</span>;<span class=\"number\">5</span></span><br><span class=\"line\">DELETE /zoos/<span class=\"number\">1</span>/animals  <span class=\"comment\">//删除id为1的动物园内的所有动物</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><p>RESTful API具体设计如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">请求类型</th>\n<th align=\"left\">URL</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">/users</td>\n<td align=\"left\">查询用户列表</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">/users</td>\n<td align=\"left\">创建一个用户</td>\n</tr>\n<tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">/users/{id}</td>\n<td align=\"left\">根据id查询用户</td>\n</tr>\n<tr>\n<td align=\"left\">PUT</td>\n<td align=\"left\">/users/{id}</td>\n<td align=\"left\">根据id更新用户</td>\n</tr>\n<tr>\n<td align=\"left\">DELTE</td>\n<td align=\"left\">/users/{id}</td>\n<td align=\"left\">更加id删除用户</td>\n</tr>\n</tbody></table>\n<p><strong>1.POST</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//POST方式</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = &#123;&#125;;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">//accepts: \"application/json\",</span></span><br><span class=\"line\">        contentType: <span class=\"string\">\"application/json\"</span>,</span><br><span class=\"line\">        url: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        data: <span class=\"built_in\">JSON</span>.stringify(list),</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//。。。</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e.status);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e.responseText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.GET方式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//GET方式</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = &#123;&#125;;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">//自动添加时间戳，避免缓存。</span></span><br><span class=\"line\">        cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        url: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            $.each(data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, item</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//数据处理</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.PUT方式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PUT方式</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = &#123;&#125;;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">\"PUT\"</span>,</span><br><span class=\"line\">        url: uri + <span class=\"string\">\"/\"</span> + $(<span class=\"string\">\"#edit-id\"</span>).val(),</span><br><span class=\"line\">        <span class=\"comment\">//accepts: \"application/json\",</span></span><br><span class=\"line\">        contentType: <span class=\"string\">\"application/json\"</span>,</span><br><span class=\"line\">        data: <span class=\"built_in\">JSON</span>.stringify(item),</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//。。。</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e.status);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e.responseText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.Delete方式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: uri + <span class=\"string\">\"/\"</span> + id,</span><br><span class=\"line\">        type: <span class=\"string\">\"DELETE\"</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">            getData();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":["规范"],"tags":["随笔"]},{"title":"Thymeleaf","url":"/PaulGeorge123.github.io/2020/05/16/Thymeleaf/","content":"<h4 id=\"Thymeleaf概述\"><a href=\"#Thymeleaf概述\" class=\"headerlink\" title=\"Thymeleaf概述\"></a>Thymeleaf概述</h4><p><strong>使用Thymeleaf首先需要引入命名空间</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h4><ul>\n<li><strong>引用web静态资源<br>Thymeleaf通过”@{}”来引用web静态资源，例如：</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;bootstrap/js/boostrap.min.js&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>访问model模型中的数据，例如访问一个user对象的name属性</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>数据迭代<br>例如迭代一个userlist集合</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"user : $&#123;userlist&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span>&gt;</span>tyrone<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.age&#125;\"</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用th:each做循环迭代，并使用${对象.属性}来访问具体的值</p>\n</blockquote>\n<p><strong>进阶</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"user,userStat:$&#123;userlist&#125;\"</span> <span class=\"attr\">th:class</span>=<span class=\"string\">\"$&#123;userStat.odd&#125;?'odd':'even'\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.username&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.password&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.petname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>判断是否为空</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;messages.empty&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">\"3\"</span>&gt;</span>No messages<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>在Javascript中访问model模型数据</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">\"javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> user = [[$&#123;user&#125;]]</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(user.name + <span class=\"string\">\"\\t\"</span> + user.age);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过添加th:inline=”javascript”到script标签来访问model模型数据<br>通过”[[${}]]”这种格式来获取具体的值</p>\n</blockquote>\n<h4 id=\"具体\"><a href=\"#具体\" class=\"headerlink\" title=\"具体\"></a>具体</h4><p><strong>表达式</strong></p>\n<p>*<em>简单表达式 *</em></p>\n<ul>\n<li>可用值表达式(后台设置): ${…}</li>\n<li>所有可用值表达式: *{…}</li>\n</ul>\n<blockquote>\n<p>比如*{name} 从可用值中查找name，如果有上下文，比如上层是object，则查object中的name属性。</p>\n</blockquote>\n<ul>\n<li>消息表达式: #{…} </li>\n</ul>\n<blockquote>\n<p>国际化时使用，也可以使用内置的对象，比如date格式化数据</p>\n</blockquote>\n<ul>\n<li>链接表达式: @{…}<br>用来配合link src href使用的语法</li>\n<li>片段表达式: ~{…}<br>用来引入公共部分代码片段，并进行传值操作使用的语法。</li>\n</ul>\n<p>*<em>替换：|The name is ${name}| *</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;|/name/$&#123;test.size()&#125;|&#125;\"</span>&gt;</span>链接地址：<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> </span><br><span class=\"line\">//渲染后的结果 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/name/3\"</span>&gt;</span>链接地址：<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>布尔操作</strong></p>\n<ul>\n<li>一元 :  and   or</li>\n<li>二元 :  !  ,  not</li>\n</ul>\n<p><strong>比较</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">比较：&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class=\"line\">等于：== , != ( eq , ne )</span><br></pre></td></tr></table></figure>\n\n<p><strong>条件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">If-then: (<span class=\"keyword\">if</span>) ? (then)</span><br><span class=\"line\">If-then-<span class=\"keyword\">else</span>: (<span class=\"keyword\">if</span>) ? (then) : (<span class=\"keyword\">else</span>)</span><br><span class=\"line\">Default: (value) ?: (defaultvalue)</span><br></pre></td></tr></table></figure>\n\n<p><strong>常用操作</strong></p>\n<ul>\n<li>日期格式化</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(content.createDate,'yyyy-MM-dd HH:mm:ss')&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下拉选择</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"subId\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"subId\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"channelsub:$&#123;subchannels&#125;\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;channelsub.id == subId&#125;\"</span>    <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;channelsub.id&#125;\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;channelsub.name&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"js取值\"><a href=\"#js取值\" class=\"headerlink\" title=\"js取值\"></a>js取值</h4><p><strong>有时候需要传递参数到js中</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">\"javascript\"</span>  &gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> size= [[$&#123;test.size()&#125;]];</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.info(size)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"css取值\"><a href=\"#css取值\" class=\"headerlink\" title=\"css取值\"></a>css取值</h4><p><strong>首先需要后台设置classname、align的值</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">\"css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    .<span class=\"selector-attr\">[[$&#123;classname&#125;]</span>] &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">text-align</span>: <span class=\"selector-attr\">[[$&#123;align&#125;]</span>];</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["后端"],"tags":["Web"]},{"title":"SpringBoot+MyBatis整合","url":"/PaulGeorge123.github.io/2020/06/09/SpringBoot-MyBatis/","content":"<p><strong>首先我们需要在pom.xml中引入两个依赖，依赖如下：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis逆向工程jar包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>src/main/resources/generator/generatorConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p><strong>需要注意的是，src/main/resources/generator/generatorConfig.xml<br>中的内容一定要写generatorConfig.xml从src开始的全路径，因为在执行逆向工程的时候会根据这个路径去读取generatorConfig.xml中的配置。</strong></p>\n<p><strong>在resources包下创建一个generator文件夹，然后在文件夹中创建generatorConfig.xml文件，即：src/main/resources/generator/generatorConfig.xml</strong><br><strong>generatorConfig.xml中的配置人如下：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">generatorConfiguration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">\"E:/REPOSITORY/repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"DB2Tables\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- JavaBean 实现 序列化 接口 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.SerializablePlugin\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成toString --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.ToStringPlugin\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/test1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"root\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                            <span class=\"attr\">password</span>=<span class=\"string\">\"root\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 类型转换 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span> &gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否使用bigDecimal,</span></span><br><span class=\"line\"><span class=\"comment\">                false: 把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer(默认)</span></span><br><span class=\"line\"><span class=\"comment\">                true:  把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.heqiang.springboot_user.pojo\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 默认false 是否允许子包 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 默认false 是否对model添加 构造函数 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"constructorBased\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 默认false 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"immutable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 默认false 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"Mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.heqiang.springboot_user.dao\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- &lt;table tableName=\"risk_model_order\" domainObjectName=\"DSRiskModelOrder\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table tableName=\"tel_bill_record\" domainObjectName=\"DSTelBillRecord\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"&gt;&lt;/table&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果逆向工程配置完毕</li>\n</ul>\n<p><strong>一、mapper.xml在src/main/java目录下</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面在启动类里加上注解用于给出需要扫描的mapper文件路径</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.gyh.mapper\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>SpringBootApplication.class</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.gyh.mapper\"</span>) <span class=\"comment\">//扫描的mapper</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSpringApplication.run(DemoApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置完了之后，我们就可执行逆向工程了，点击右侧的Maven，就能看到下面的结构，然后根据如果的路径找到mybatis-generator,双击运行即可</strong></p>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># Tomcat 服务器端口号</span></span><br><span class=\"line\"><span class=\"symbol\">server:</span></span><br><span class=\"line\">  <span class=\"symbol\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">spring:</span></span><br><span class=\"line\">  <span class=\"symbol\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"symbol\">mode:</span> HTML5</span><br><span class=\"line\">    <span class=\"symbol\">encoding:</span> UTF-<span class=\"number\">8</span></span><br><span class=\"line\">    content-<span class=\"symbol\">type:</span> text/html</span><br><span class=\"line\">    <span class=\"comment\"># 开发禁用缓存</span></span><br><span class=\"line\">    <span class=\"symbol\">cache:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"symbol\">datasource:</span></span><br><span class=\"line\">    <span class=\"symbol\">url:</span> <span class=\"symbol\">jdbc:</span><span class=\"symbol\">mysql:</span>/<span class=\"regexp\">/localhost:3306/ssm</span>Db?characterEncoding=UTF-<span class=\"number\">8</span>&amp;useSSL=<span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"symbol\">username:</span> root</span><br><span class=\"line\">    <span class=\"symbol\">password:</span> password</span><br><span class=\"line\">    <span class=\"comment\"># 可省略驱动配置, sprin-boot 会由url检测出驱动类型</span></span><br><span class=\"line\">    <span class=\"comment\"># driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"symbol\">hikari:</span></span><br><span class=\"line\">      connection-<span class=\"symbol\">timeout:</span> <span class=\"number\">60000</span> </span><br><span class=\"line\"><span class=\"symbol\">mybatis:</span></span><br><span class=\"line\">  <span class=\"comment\"># 配置实体类包别名</span></span><br><span class=\"line\">  <span class=\"symbol\">typeAliasesPackage:</span> cn.gyh.entity</span><br><span class=\"line\"><span class=\"comment\"># spring-boot默认打印输出info级别以上的，可在此处修改输出级别</span></span><br><span class=\"line\"><span class=\"symbol\">logging:</span></span><br><span class=\"line\">  <span class=\"symbol\">level:</span></span><br><span class=\"line\">    <span class=\"symbol\">root:</span> info</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>二、mapper.xml在src/main/resources目录下</strong></p>\n<p><strong>（1）spring-boot配置</strong><br> 不少人都Properties资源文件来配置，不过这种文件在idea编码的默认设置是ISO-8859-1，需要修改idea的设置才能显示中文。因此我比较喜欢用yml文件来配置，一个是结构明显，另外一个不用考虑编码的问题。</p>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">spring:</span></span><br><span class=\"line\">  <span class=\"symbol\">thymeleaf:</span></span><br><span class=\"line\">    <span class=\"symbol\">mode:</span> HTML5</span><br><span class=\"line\">    <span class=\"symbol\">encoding:</span> UTF-<span class=\"number\">8</span></span><br><span class=\"line\">    content-<span class=\"symbol\">type:</span> text/html</span><br><span class=\"line\">    <span class=\"comment\"># 开发禁用缓存</span></span><br><span class=\"line\">    <span class=\"symbol\">cache:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"symbol\">datasource:</span></span><br><span class=\"line\">    <span class=\"symbol\">url:</span> <span class=\"symbol\">jdbc:</span><span class=\"symbol\">mysql:</span>/<span class=\"regexp\">/localhost:3306/ssm</span>Db?characterEncoding=UTF-<span class=\"number\">8</span>&amp;useSSL=<span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"symbol\">username:</span> root</span><br><span class=\"line\">    <span class=\"symbol\">password:</span> password</span><br><span class=\"line\">    <span class=\"comment\"># 可省略驱动配置, sprin-boot 会由url检测出驱动类型</span></span><br><span class=\"line\">    <span class=\"comment\"># driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"symbol\">hikari:</span></span><br><span class=\"line\">      connection-<span class=\"symbol\">timeout:</span> <span class=\"number\">60000</span> </span><br><span class=\"line\"><span class=\"symbol\">mybatis:</span></span><br><span class=\"line\">  <span class=\"comment\">#配置mapper</span></span><br><span class=\"line\">  <span class=\"symbol\">mapperLocations:</span> <span class=\"symbol\">classpath:</span>mapper/*.xml</span><br><span class=\"line\">  <span class=\"comment\">#配置实体类</span></span><br><span class=\"line\">  <span class=\"symbol\">typeAliasesPackage:</span> com.gyh.entity</span><br><span class=\"line\"><span class=\"comment\"># spring-boot默认打印输出info级别以上的，可在此处修改输出级别</span></span><br><span class=\"line\"><span class=\"symbol\">logging:</span></span><br><span class=\"line\">  <span class=\"symbol\">config:</span> <span class=\"symbol\">classpath:</span>logback-spring.xml</span><br><span class=\"line\">  <span class=\"symbol\">level:</span></span><br><span class=\"line\">    <span class=\"symbol\">root:</span> info</span><br></pre></td></tr></table></figure>\n\n<p><strong>2）日志打印logback-spring.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 控制台输出 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stdout\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;80&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file-info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY <span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>./logs/info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;80&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file-debug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY <span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>./logs/debug.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;80&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file—error\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY <span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">FileNamePattern</span>&gt;</span>./logs/error.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">FileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">MaxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">MaxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;80&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.apache.ibatis\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Connection\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.Statement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql.PreparedStatement\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"stdout\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"file-info\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包工程\"><a href=\"#打包工程\" class=\"headerlink\" title=\"打包工程\"></a>打包工程</h3><p><strong>使用package命令给工程打包成jar包</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn <span class=\"keyword\">package</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>此时会在target下生成一个jar包，启动即可：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">-jar</span> <span class=\"selector-tag\">target</span>\\<span class=\"selector-tag\">testSpringBoot-0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1-SNAPSHOT</span><span class=\"selector-class\">.jar</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出如下：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">λ java -jar target\\testSpringBoot-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\"></span><br><span class=\"line\">  .   ____          _            __ _ _</span><br><span class=\"line\"> /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span><br><span class=\"line\">( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\</span><br><span class=\"line\"> \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class=\"line\">  '  |____| .__|_| |_|_| |_\\__, | / / / /</span><br><span class=\"line\"> =========|_|==============|___/=/_/_/_/</span><br><span class=\"line\"> :: Spring Boot ::        (v1.5.9.RELEASE)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h4><p><strong>在pom.xml中添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--devtools热部署--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--热部署配置--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--fork:如果没有该项配置,整个devtools不会起作用--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在application.yml中配置一下devtools</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">devtools:</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#设置开启热部署</span></span><br><span class=\"line\">      <span class=\"attr\">additional-paths:</span> <span class=\"string\">src/main/java</span> <span class=\"comment\">#重启目录</span></span><br><span class=\"line\">      <span class=\"attr\">exclude:</span> <span class=\"string\">WEB-INF/**</span></span><br><span class=\"line\">  <span class=\"attr\">freemarker:</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span> <span class=\"literal\">false</span>    <span class=\"comment\">#页面不加载缓存，修改即时生效</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>设置IDEA的自动编译：</strong></p>\n<p><strong>（1）File-Settings-Compiler勾选 Build Project automatically</strong></p>\n<p><strong>（2）快捷键 ctrl + shift + alt + /,选择Registry,勾上 Compiler autoMake allow when app running</strong></p>\n","categories":["后端"],"tags":["框架"]},{"title":"Vue系列--Axios","url":"/PaulGeorge123.github.io/2021/01/15/Vue%E7%B3%BB%E5%88%97--Axios/","content":"<h4 id=\"Axios-文档\"><a href=\"#Axios-文档\" class=\"headerlink\" title=\"Axios 文档\"></a>Axios 文档</h4><ul>\n<li><p>GitHub：<a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">https://github.com/axios/axios</a></p>\n</li>\n<li><p>中文文档：<a href=\"http://www.axios-js.com/\" target=\"_blank\" rel=\"noopener\">http://www.axios-js.com/</a></p>\n</li>\n</ul>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装:\"></a>安装:</h4><p><strong>CommonJS:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n\n<p><strong>将下面代码加入入口文件:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">'vue-axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>\n\n<p><strong>你可以按照以下方式使用:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.axios.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.axios.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$http.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"vue-axios-封装\"><a href=\"#vue-axios-封装\" class=\"headerlink\" title=\"vue axios 封装\"></a>vue axios 封装</h4><p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">'./request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * API</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param <span class=\"variable\">reqData</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns <span class=\"type\">&#123;AxiosPromise&lt;any&gt;&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//登录验证</span></span><br><span class=\"line\">    login(reqData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Axios.post(<span class=\"string\">'/api/login'</span>, qs.stringify(reqData));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>api.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Api <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * API</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"variable\">reqData</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"type\">&#123;AxiosPromise&lt;any&gt;&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//登录</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">reqData</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Api.login(reqData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>login.vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F;解构函数</span><br><span class=\"line\">    import &#123;login&#125; from &#39;..&#x2F;service&#x2F;api&#39;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;提交表单</span><br><span class=\"line\">            async login() &#123;</span><br><span class=\"line\">                let res &#x3D; await login(&#123;</span><br><span class=\"line\">                    nickname: this.userInfo.nickname,</span><br><span class=\"line\">                    username: this.userInfo.username,</span><br><span class=\"line\">                    role: &#39;user&#39;,</span><br><span class=\"line\">                    gender: this.userInfo.gender,</span><br><span class=\"line\">                    password: this.userInfo.password</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                if (res.data &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class=\"line\">                    this.$refs.userInfo.resetFields();</span><br><span class=\"line\">                    this.$router.push(&#39;&#x2F;index&#39;);</span><br><span class=\"line\">                    this.$message(&#123;</span><br><span class=\"line\">                        message: &#39;恭喜你，注册成功&#39;,</span><br><span class=\"line\">                        type: &#39;success&#39;,</span><br><span class=\"line\">                        duration: 1500</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    this.$refs.userInfo.resetFields();</span><br><span class=\"line\">                    &#x2F;&#x2F;添加user失败</span><br><span class=\"line\">                    this.$message(&#123;</span><br><span class=\"line\">                        type: &#39;error&#39;,</span><br><span class=\"line\">                        message: &#39;不好意思，注册失败&#39;,</span><br><span class=\"line\">                        duration: 1500</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;重置表单</span><br><span class=\"line\">            reset() &#123;</span><br><span class=\"line\">                this.$refs.userInfo.resetFields();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;返回主页</span><br><span class=\"line\">            topBlog()&#123;</span><br><span class=\"line\">                this.$router.push(&#39;&#x2F;index&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"axios-API\"><a href=\"#axios-API\" class=\"headerlink\" title=\"axios API\"></a>axios API</h4><h5 id=\"axios-config\"><a href=\"#axios-config\" class=\"headerlink\" title=\"axios(config)\"></a>axios(config)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"axios-url-config\"><a href=\"#axios-url-config\" class=\"headerlink\" title=\"axios(url[, config])\"></a>axios(url[, config])</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 GET 请求（默认的方法）</span></span><br><span class=\"line\">axios(<span class=\"string\">'/user/12345'</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>使用 <code>then</code> 时，你将接收下面这样的响应：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.status);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.statusText);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.headers);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>这些是创建请求时可以用的配置选项, 只有 <code>url</code> 是必需的, 如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  url: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\">  responseType: <span class=\"string\">'json'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>某个请求的响应包含以下信息</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `data` 由服务器提供的响应</span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 服务器响应的头</span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config` 是为请求提供的配置信息</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>错误处理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.status);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.headers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Something happened in setting up the request that triggered an Error</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error'</span>, error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以使用 <code>validateStatus</code> 配置选项定义一个自定义 HTTP 状态码的错误范围</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &lt; <span class=\"number\">500</span>; <span class=\"comment\">// 状态码在大于或等于500时才会 reject</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["vue"]},{"title":"Vue系列--Webpack","url":"/PaulGeorge123.github.io/2021/01/16/Vue%E7%B3%BB%E5%88%97--Webpack/","content":"<h4 id=\"Webpack是什么、为什么要使用它\"><a href=\"#Webpack是什么、为什么要使用它\" class=\"headerlink\" title=\"Webpack是什么、为什么要使用它\"></a>Webpack是什么、为什么要使用它</h4><p>简单来说，Webpack是一个打包工具</p>\n<p>成为一个优秀的前端工程师，除了要会写页面样式和动态效果之外，还需要会用主流的单页面框架、Node.js、简单的前端的性能优化等等。加上现在一部分服务器的逻辑移到了前端上，所以实际上前端的复杂度也是提升了很多。</p>\n<p>而Webpack可以帮助我们完成一些任务。比如js压缩、css压缩、编译模板文件等等，从而减少前端的工作量。当然，Webpack功能很强大</p>\n<h4 id=\"安装Webpack\"><a href=\"#安装Webpack\" class=\"headerlink\" title=\"安装Webpack\"></a>安装Webpack</h4><p><strong>安装:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<hr>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200223141638666.png\" style=\"zoom:67%;\" />\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200223141758667.png\" style=\"zoom:67%;\" />\n\n<p><strong>测试安装成功:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack -v</span><br><span class=\"line\">webpack-cli -v</span><br></pre></td></tr></table></figure>\n\n <img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200223141858668.png\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p><strong>创建 <code>webpack.config.js</code> 配置文件</strong></p>\n<ul>\n<li>entry：入口文件，指定 WebPack 用哪个文件作为项目的入口</li>\n<li>output：输出，指定 WebPack 把处理完成的文件放置到指定路径</li>\n<li>module：模块，用于处理各种类型的文件</li>\n<li>plugins：插件，如：热更新、代码重用等</li>\n<li>resolve：设置路径指向</li>\n<li>watch：监听，用于设置文件改动后直接打包</li>\n</ul>\n<h4 id=\"使用webpack\"><a href=\"#使用webpack\" class=\"headerlink\" title=\"使用webpack\"></a>使用webpack</h4><ol>\n<li><p><strong>创建项目</strong></p>\n</li>\n<li><p><strong>创建一个名为 modules 的目录，用于放置 JS 模块等资源文件</strong></p>\n</li>\n<li><p><strong>在modules下创建模块文件，如 hello.js，用于编写 JS 模块相关代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//暴露一个方法:sayHi</span></span><br><span class=\"line\">exports.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;div&gt;Hello WebPack&lt;/div&gt;\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在modules下创建一个名为 main.js 的入口文件，用于打包时设置 entry 属性</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//require 导入一个模块,就可以调用这个模块中的方法了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">\"./hello\"</span>);</span><br><span class=\"line\">hello.sayHi();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在项目目录下创建 webpack.config.js 配置文件，使用 webpack 命令打包</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">\"./modules/main.js\"</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">\"./js/bundle.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在项目目录下创建 HTML 页面，如 index.html，导入 WebPack 打包后的 JS 文件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/js/bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在IDEA控制台中直接执行webpack;如果失败的话,就使用管理员权限运行即可</strong></p>\n</li>\n<li><p><strong>运行 HTML 看效果</strong></p>\n</li>\n</ol>\n<p><strong>说明:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 参数 --watch 用于监听变化</span></span><br><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["vue"]},{"title":"Vue系列--创建项目","url":"/PaulGeorge123.github.io/2021/01/10/Vue%E7%B3%BB%E5%88%97--%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/","content":"<h4 id=\"第一个vue-cli项目\"><a href=\"#第一个vue-cli项目\" class=\"headerlink\" title=\"第一个vue-cli项目\"></a>第一个vue-cli项目</h4><p><strong>确认nodejs安装成功:</strong></p>\n<ul>\n<li>cmd 下输入 <code>node -v</code>,查看是否能够正确打印出版本号即可!（v12.14.0）</li>\n<li>cmd 下输入 <code>npm -v</code>,查看是否能够正确打印出版本号即可!（6.13.4）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -g 就是全局安装</span></span><br><span class=\"line\">$ npm install cnpm -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或使用如下语句解决 npm 速度慢的问题，启用淘宝镜像</span></span><br><span class=\"line\">$ npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 vue-cli</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cnpm install vue-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试是否安装成功</span></span><br><span class=\"line\"><span class=\"comment\"># 查看可以基于哪些模板创建 vue 应用程序，通常我们选择 webpack</span></span><br><span class=\"line\">$ vue list</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"第一个-vue-cli-应用程序\"><a href=\"#第一个-vue-cli-应用程序\" class=\"headerlink\" title=\"第一个 vue-cli 应用程序\"></a>第一个 vue-cli 应用程序</h4><ol>\n<li><p><strong>创建一个Vue项目,我们随便建立一个空的文件夹在电脑上,我这里在D盘下新建一个目录，例如：<code>D:\\Project\\vue\\vue-study</code>;</strong></p>\n</li>\n<li><p><strong>创建一个基于 webpack 模板的 vue 应用程序</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里的 myvue 是项目名称，可以根据自己的需求起名</span></span><br><span class=\"line\">$ vue init webpack myvue</span><br></pre></td></tr></table></figure>\n\n<p><strong>一路都选择no即可;</strong></p>\n</li>\n</ol>\n<blockquote>\n<ul>\n<li>Project name：项目名称，默认 回车 即可</li>\n<li>Project description：项目描述，默认 回车 即可</li>\n<li>Author：项目作者，默认 回车 即可</li>\n<li>Install vue-router：是否安装 vue-router，选择 n 不安装（后期需要再手动添加）</li>\n<li>Use ESLint to lint your code：是否使用 ESLint 做代码检查，选择 n 不安装（后期需要再手动添加）</li>\n<li>Set up unit tests：单元测试相关，选择 n 不安装（后期需要再手动添加）</li>\n<li>Setup e2e tests with Nightwatch：单元测试相关，选择 n 不安装（后期需要再手动添加）</li>\n<li>Should we run npm install for you after the project has been created：创建完成后直接初始化，选择 n，我们手动执行;运行结果!</li>\n</ul>\n</blockquote>\n<p><strong>初始化并运行</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> myvue</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>安装并运行成功后在浏览器输入：<a href=\"http://localhost/\" target=\"_blank\" rel=\"noopener\">http://localhost</a>:8080</strong></p>\n<blockquote>\n<ul>\n<li>build 和 config：WebPack 配置文件</li>\n<li>node_modules：用于存放 npm install 安装的依赖文件</li>\n<li>src： 项目源码目录</li>\n<li>static：静态资源文件</li>\n<li>.babelrc：Babel 配置文件，主要作用是将 ES6 转换为 ES5</li>\n<li>.editorconfig：编辑器配置</li>\n<li>eslintignore：需要忽略的语法检查配置文件</li>\n<li>.gitignore：git 忽略的配置文件</li>\n<li>.postcssrc.js：css 相关配置文件，其中内部的 module.exports 是 NodeJS 模块化语法</li>\n<li>index.html：首页，仅作为模板页，实际开发时不使用</li>\n<li>package.json：项目的配置文件<ul>\n<li>name：项目名称</li>\n<li>version：项目版本</li>\n<li>description：项目描述</li>\n<li>author：项目作者</li>\n<li>scripts：封装常用命令</li>\n<li>dependencies：生产环境依赖</li>\n<li>devDependencies：开发环境依赖</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h4><p><strong>项目的入口文件，我们知道所有的程序都会有一个入口</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command</span><br><span class=\"line\">&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip &#x3D; false;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"App-vue\"><a href=\"#App-vue\" class=\"headerlink\" title=\"App.vue\"></a>App.vue</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld&#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;App&#39;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">#app &#123;</span><br><span class=\"line\">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  -webkit-font-smoothing: antialiased;</span><br><span class=\"line\">  -moz-osx-font-smoothing: grayscale;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  color: #2c3e50;</span><br><span class=\"line\">  margin-top: 60px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"第一个Vue页面\"><a href=\"#第一个Vue页面\" class=\"headerlink\" title=\"第一个Vue页面\"></a>第一个Vue页面</h4><p><strong>1、创建一个 HTML 文件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、引入 Vue.js</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、创建一个 Vue 的实例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#vue'</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'Hello Vue!'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">el:<span class=\"string\">'#vue'</span>：绑定元素的 ID</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;message:<span class=\"string\">'Hello Vue!'</span>&#125;`：数据对象中有一个名为 message 的属性，并设置了初始值 Hello Vue!</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、将数据绑定到页面元素</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"完整的-HTML\"><a href=\"#完整的-HTML\" class=\"headerlink\" title=\"完整的 HTML\"></a>完整的 HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>第一个 Vue 应用程序<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--View--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">     &#123;&#123;message&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// var vm = new Vue(&#123;&#125;); //ViewModel</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#vue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        data: &#123; <span class=\"comment\">//Model</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'Hello Vue!'</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><h4 id=\"一、新建项目\"><a href=\"#一、新建项目\" class=\"headerlink\" title=\"一、新建项目\"></a>一、新建项目</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.查看 node和npm是不是已经安装好命令：node -v  npm -v (没有安装的先安装环境);</span><br><span class=\"line\">2.$ npm install -g cnpm --registry=https://registry.npm.taobao.org  (安装国内的淘宝镜像文件，后面的安装npm可以全部改为cnpm)</span><br><span class=\"line\">3.安装 vue-cli 脚手架   </span><br><span class=\"line\">    1、$ cnpm install -g vue</span><br><span class=\"line\">    2、$ cnpm install -g vue-cli    //检测是否安装成功   vue --version</span><br><span class=\"line\">4. 安装 webpack  $ cnpm install -g webpack </span><br><span class=\"line\">5.cd  你的运行目录</span><br><span class=\"line\">6.新建基于webpack的vue项目   $ vue init webpack vuedemo</span><br><span class=\"line\">7.进入项目目录   $ cd vuedemo</span><br><span class=\"line\">8.安装依赖      $ cnpm install</span><br><span class=\"line\">9.运行项目      $  cnpm run dev</span><br><span class=\"line\">10.发布项目     $ cnpm run build</span><br><span class=\"line\">注：mac电脑需要在安装淘宝镜像前执行： sudo chown -R $USER /usr/local</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、使用element-ui前需安装修改的配置：\"><a href=\"#二、使用element-ui前需安装修改的配置：\" class=\"headerlink\" title=\"二、使用element-ui前需安装修改的配置：\"></a>二、使用element-ui前需安装修改的配置：</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">//1. 安装 loader 模块：</span><br><span class=\"line\"><span class=\"meta\">   $</span><span class=\"bash\"> cnpm install style-loader -D</span></span><br><span class=\"line\"><span class=\"meta\">   $</span><span class=\"bash\"> cnpm install css-loader -D</span></span><br><span class=\"line\"><span class=\"meta\">   $</span><span class=\"bash\"> cnpm install file-loader -D</span></span><br><span class=\"line\">//2. 安装 Element-UI 模块</span><br><span class=\"line\"><span class=\"meta\">   $</span><span class=\"bash\"> cnpm install element-ui --save </span></span><br><span class=\"line\">   </span><br><span class=\"line\">//3. 修改 webpack.base.conf.js 的配置</span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["vue"]},{"title":"Vue系列--基本语法","url":"/PaulGeorge123.github.io/2021/01/13/Vue%E7%B3%BB%E5%88%97--%E7%A8%8B%E5%BA%8F/","content":"<ul>\n<li><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>\n</li>\n<li><p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>\n</li>\n<li><p>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>\n</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n\n<h4 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h4><p>使用 v-html 指令用于输出 html 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: &#39;&lt;h1&gt;vue&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p>HTML 属性中的值应使用 v-bind 指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;span v-bind:title&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class=\"line\">  &lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        message: &#39;页面加载于 &#39; + new Date().toLocaleString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><p>Vue.js 都提供了完全的 JavaScript 表达式支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;5+5&#125;&#125;&lt;br&gt;</span><br><span class=\"line\">    &#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;&lt;br&gt;</span><br><span class=\"line\">    &#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class=\"line\">    &lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;vue&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    ok: true,</span><br><span class=\"line\">    message: &#39;RUNOOB&#39;,</span><br><span class=\"line\">    id : 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:v-bind</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">'页面加载于 '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleString()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"v-if-v-else\"><a href=\"#v-if-v-else\" class=\"headerlink\" title=\"v-if,v-else\"></a>v-if,v-else</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>YES<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>NO<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#vue'</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            ok: <span class=\"literal\">true</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>items</code> 是数组，<code>item</code>是数组元素迭代的别名 , 与Thymeleaf模板引擎的语法和这个十分的相似</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#vue'</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//items数组</span></span></span><br><span class=\"line\">            items: [</span><br><span class=\"line\"><span class=\"actionscript\">                &#123;message: <span class=\"string\">'Java'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">                &#123;message: <span class=\"string\">'Python'</span>&#125;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:v-on</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vue\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--在这里我们使用了 v-on 绑定了 click 事件，并指定了名为 sayHi 的方法--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#vue'</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            message: <span class=\"string\">'Hello World'</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 方法必须定义在 Vue 实例的 methods 对象中</span></span></span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            sayHi: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// `this` 在方法里指向当前 Vue 实例</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                alert(<span class=\"keyword\">this</span>.message);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":["前端"],"tags":["vue"]},{"title":"jdk8新特性--stream","url":"/PaulGeorge123.github.io/2021/07/17/jdk8%E6%96%B0%E7%89%B9%E6%80%A7--stream/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p>jdk1.8新特性知识点：</p>\n<p><strong>Lambda 表达式、函数式接口、方法引用和构造器调用、Stream API、接口中的默认方法和静态方法、新时间日期 API</strong></p>\n<p><strong>本篇着重介绍一下 stream 流</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-29-30.png\" alt=\"\"></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p><font color=#008000>什么是 stream 流？</font></p>\n<p>Java8 中，Collection 新增了两个流方法，分别是 Stream() 和 parallelStream()</p>\n<p>Java8 中添加了一个新的接口类 Stream，相当于高级版的 Iterator，它可以通过 Lambda 表达式对集合进行大批量数据操作，或 者各种非常便利、高效的聚合数据操作。</p>\n<p>Stream 将要处理的元素集合看作一种流，在流的过程中，借助 Stream API 对流中的元素进行操作，比如：筛选、排序、聚合等。</p>\n<p><font color=#008000>jdk8 为什么要引入 stream 流？</font></p>\n<p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。</p>\n<p><font color=#6AAFE6>流不存储数据</font></p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"stream-概述\"><a href=\"#stream-概述\" class=\"headerlink\" title=\"stream 概述\"></a>stream 概述</h3><p>Stream可以由数组或集合创建，对流的操作分为两种：</p>\n<ol>\n<li>中间操作，每次返回一个新的流，可以有多个。</li>\n<li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li>\n</ol>\n<p>另外，Stream有几个特性：</p>\n<ol>\n<li>stream 不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li>\n<li>stream 不会改变数据源，通常情况下会产生一个新的集合或一个值。</li>\n<li>stream 具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li>\n</ol>\n<p>stream 是元素的集合，这点让 stream 看起来用些类似 Iterator</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_00-46-42.png\" alt=\"\"></p>\n<br/>\n\n<h3 id=\"stream-的创建\"><a href=\"#stream-的创建\" class=\"headerlink\" title=\"stream 的创建\"></a>stream 的创建</h3><h4 id=\"通过集合数组创建\"><a href=\"#通过集合数组创建\" class=\"headerlink\" title=\"通过集合数组创建\"></a>通过集合数组创建</h4><ol>\n<li><p>通过 java.util.Collection.stream() 方法用集合创建流</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamCreateTest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamCreateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个顺序流</span></span><br><span class=\"line\">        Stream&lt;String&gt; stream = list.stream();</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个并行流</span></span><br><span class=\"line\">        Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>使用 java.util.Arrays.stream(T[] array) 方法用数组创建流</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamCreateTest2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamCreateTest2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">        IntStream stream = Arrays.stream(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>使用 Stream 的静态方法：of()、iterate()、generate()</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamCreateTest3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamCreateTest3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        stream.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class=\"number\">0</span>, (x) -&gt; x + <span class=\"number\">3</span>).limit(<span class=\"number\">4</span>);</span><br><span class=\"line\">        stream2.forEach(System.out::println);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class=\"number\">3</span>);</span><br><span class=\"line\">        stream3.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<br/>\n\n\n<h4 id=\"stream-和-parallelStream\"><a href=\"#stream-和-parallelStream\" class=\"headerlink\" title=\"stream 和 parallelStream\"></a>stream 和 parallelStream</h4><p><font color=#008000>stream</font> 是顺序流，由主线程按顺序对流执行操作</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_23-56-01.png\" style=\"zoom:70%;\" />\n\n<p><font color=#008000>parallelStream</font> 并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_23-56-15.png\" style=\"zoom:70%;\" />\n\n<p>如果流中的数据量足够大，并行流可以加快处速度。</p>\n<p>除了直接创建并行流，还可以通过<code>parallel()</code>把顺序流转换成并行流</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"parallelSum = \"</span> + parallelSum(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">parallelSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Stream.iterate(<span class=\"number\">1L</span>, i -&gt; i + <span class=\"number\">1</span>).limit(n).parallel().reduce(<span class=\"number\">0L</span>, Long::sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n\n\n<h3 id=\"stream-的使用\"><a href=\"#stream-的使用\" class=\"headerlink\" title=\"stream 的使用\"></a>stream 的使用</h3><p>在使用 stream 之前，先看一下：<code>Optional</code></p>\n<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------+        +--------+     +--------+     +-----+     +---------+</span><br><span class=\"line\">| stream of elements + -----&gt; | filter + --&gt; | sorted + --&gt; | map + --&gt; | collect |</span><br><span class=\"line\">+--------------------+        +--------+     +--------+     +-----+     +---------+</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>stream（图示）</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-23-04.png\" alt=\"\"></p>\n<hr>\n<p><strong>stream–collect（图示）</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-23-39.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"遍历-匹配（foreach-find-match）\"><a href=\"#遍历-匹配（foreach-find-match）\" class=\"headerlink\" title=\"遍历/匹配（foreach/find/match）\"></a>遍历/匹配（foreach/find/match）</h4><p><code>Stream</code>也是支持类似集合的遍历和匹配元素的，只是<code>Stream</code>中的元素是以<code>Optional</code>类型存在的。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-39-44.png\" style=\"zoom:80%;\" />\n\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历输出符合条件的元素</span></span><br><span class=\"line\">        list.stream().filter(x -&gt; x &gt; <span class=\"number\">6</span>).forEach(System.out::print);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">// 匹配第一个</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; <span class=\"number\">6</span>).findFirst();</span><br><span class=\"line\">        <span class=\"comment\">// 匹配任意（适用于并行流）</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; <span class=\"number\">6</span>).findAny();</span><br><span class=\"line\">        <span class=\"comment\">// 是否包含符合特定条件的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> anyMatch = list.stream().anyMatch(x -&gt; x &lt; <span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匹配第一个值：\"</span> + findFirst.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匹配任意一个值：\"</span> + findAny.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"是否存在大于6的值：\"</span> + anyMatch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"筛选（filter）\"><a href=\"#筛选（filter）\" class=\"headerlink\" title=\"筛选（filter）\"></a>筛选（filter）</h4><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-40-26.png\" style=\"zoom:80%;\" />\n\n<p>举个荔枝：</p>\n<p>筛选出<code>Integer</code>集合中大于7的元素，并打印出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = list.stream();</span><br><span class=\"line\">        stream.filter(x -&gt; x &gt; <span class=\"number\">7</span>).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"聚合（max-min-count\"><a href=\"#聚合（max-min-count\" class=\"headerlink\" title=\"聚合（max/min/count)\"></a>聚合（max/min/count)</h4><p><code>max</code>、<code>min</code>、<code>count</code>这些字眼在 mysql 中我们常用它们进行数据统计。</p>\n<p>java stream 中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-46-58.png\" style=\"zoom:80%;\" />\n\n<p>举个荔枝：</p>\n<p>获取<code>String</code>集合中最长的元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"adnm\"</span>, <span class=\"string\">\"admmt\"</span>, <span class=\"string\">\"pot\"</span>, <span class=\"string\">\"xbangd\"</span>, <span class=\"string\">\"weoujgsd\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最长的字符串：\"</span> + max.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再举个荔枝：</p>\n<p>获取Integer集合中的最大值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自然排序</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class=\"line\">        <span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; max2 = list.stream().max((o1, o2) -&gt; o1.compareTo(o2));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"自然排序的最大值：\"</span> + max.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"自定义排序的最大值：\"</span> + max2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"映射（map-flatMap）\"><a href=\"#映射（map-flatMap）\" class=\"headerlink\" title=\"映射（map / flatMap）\"></a>映射（map / flatMap）</h4><p>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中</p>\n<p>分为<code>map</code>和<code>flatMap</code>：</p>\n<ul>\n<li><code>map</code>：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-29-38.png\" style=\"zoom:80%;\" />\n\n<ul>\n<li><code>flatMap</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-30-15.png\" style=\"zoom:80%;\" />\n\n<p>举个荔枝：</p>\n<p>英文字符串数组的元素全部改为大写、整数数组每个元素+3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String[] strArr = &#123; <span class=\"string\">\"abcd\"</span>, <span class=\"string\">\"bcdd\"</span>, <span class=\"string\">\"defde\"</span>, <span class=\"string\">\"fTr\"</span> &#125;;</span><br><span class=\"line\">        List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; intList = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个元素大写：\"</span> + strList);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个元素+3：\"</span> + intListNew);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再举个荔枝：</p>\n<p>将两个字符数组合并成一个新的字符数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"m,k,l,a\"</span>, <span class=\"string\">\"1,3,5,7\"</span>);</span><br><span class=\"line\">        List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将每个元素转换成一个stream</span></span><br><span class=\"line\">            String[] split = s.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s2;</span><br><span class=\"line\">        &#125;).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"处理前的集合：\"</span> + list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"处理后的集合：\"</span> + listNew);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"归约（reduce）\"><a href=\"#归约（reduce）\" class=\"headerlink\" title=\"归约（reduce）\"></a>归约（reduce）</h4><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-52-43.png\" style=\"zoom:80%;\" />\n\n<p>举个荔枝：</p>\n<p>求<code>Integer</code>集合的元素之和、乘积和最大值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 求和方式1</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class=\"line\">        <span class=\"comment\">// 求和方式2</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class=\"line\">        <span class=\"comment\">// 求和方式3</span></span><br><span class=\"line\">        Integer sum3 = list.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求乘积</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求最大值方式1</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class=\"line\">        <span class=\"comment\">// 求最大值写法2</span></span><br><span class=\"line\">        Integer max2 = list.stream().reduce(<span class=\"number\">1</span>, Integer::max);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"list求和：\"</span> + sum.get() + <span class=\"string\">\",\"</span> + sum2.get() + <span class=\"string\">\",\"</span> + sum3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"list求积：\"</span> + product.get());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"list求和：\"</span> + max.get() + <span class=\"string\">\",\"</span> + max2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"收集（collect）\"><a href=\"#收集（collect）\" class=\"headerlink\" title=\"收集（collect）\"></a>收集（collect）</h4><p><code>collect</code>，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合</p>\n<blockquote>\n<p><code>collect</code>主要依赖<code>java.util.stream.Collectors</code>类内置的静态方法</p>\n</blockquote>\n<h5 id=\"归集（toList-toSet-toMap）\"><a href=\"#归集（toList-toSet-toMap）\" class=\"headerlink\" title=\"归集（toList/toSet/toMap）\"></a>归集（toList/toSet/toMap）</h5><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里</p>\n<p><code>toList</code>、<code>toSet</code>和<code>toMap</code>：</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest4</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; listNew = list.stream().filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>).collect(Collectors.toList());</span><br><span class=\"line\">        Set&lt;Integer&gt; set = list.stream().filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>).collect(Collectors.toSet());</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">23</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"number\">25</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"number\">21</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Anni\"</span>, <span class=\"number\">8200</span>, <span class=\"number\">24</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; <span class=\"number\">8000</span>)</span><br><span class=\"line\">                .collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"toList:\"</span> + listNew);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"toSet:\"</span> + set);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"toMap:\"</span> + map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">toList:[<span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">toSet:[<span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">toMap:&#123;Tom=Person&#123;name=<span class=\"string\">'Tom'</span>, salary=<span class=\"number\">8900</span>, age=<span class=\"number\">23</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;, Anni=Person&#123;name=<span class=\"string\">'Anni'</span>, salary=<span class=\"number\">8200</span>, age=<span class=\"number\">24</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"统计（count-averaging）\"><a href=\"#统计（count-averaging）\" class=\"headerlink\" title=\"统计（count/averaging）\"></a>统计（count/averaging）</h5><p>Collectors提供了一系列用于数据统计的静态方法：</p>\n<ul>\n<li>计数：count</li>\n<li>平均值：averagingInt、averagingLong、averagingDouble</li>\n<li>最值：maxBy、minBy</li>\n<li>求和：summingInt、summingLong、summingDouble</li>\n<li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li>\n</ul>\n<p>举个荔枝：</p>\n<p>统计员工人数、平均工资、工资总额、最高工资</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest4</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">23</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"number\">25</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"number\">21</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 求总数</span></span><br><span class=\"line\">        Long count = personList.stream().collect(Collectors.counting());</span><br><span class=\"line\">        <span class=\"comment\">// 求平均工资</span></span><br><span class=\"line\">        Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class=\"line\">        <span class=\"comment\">// 求最高工资</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));</span><br><span class=\"line\">        <span class=\"comment\">// 求工资之和</span></span><br><span class=\"line\">        Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class=\"line\">        <span class=\"comment\">// 一次性统计所有信息</span></span><br><span class=\"line\">        DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工总数：\"</span> + count);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工平均工资：\"</span> + average);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工工资总和：\"</span> + sum);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工工资所有统计：\"</span> + collect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">员工总数：<span class=\"number\">3</span></span><br><span class=\"line\">员工平均工资：<span class=\"number\">7900.0</span></span><br><span class=\"line\">员工工资总和：<span class=\"number\">23700</span></span><br><span class=\"line\">员工工资所有统计：DoubleSummaryStatistics&#123;count=<span class=\"number\">3</span>, sum=<span class=\"number\">23700.000000</span>, min=<span class=\"number\">7000.000000</span>, average=<span class=\"number\">7900.000000</span>, max=<span class=\"number\">8900.000000</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"分组（partitioningBy-groupingBy）\"><a href=\"#分组（partitioningBy-groupingBy）\" class=\"headerlink\" title=\"分组（partitioningBy/groupingBy）\"></a>分组（partitioningBy/groupingBy）</h5><ul>\n<li>分区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。</li>\n<li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_03-54-51.png\" alt=\"\"></p>\n<p>举个荔枝：</p>\n<p>将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest4</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Anni\"</span>, <span class=\"number\">8200</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Owen\"</span>, <span class=\"number\">9500</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alisa\"</span>, <span class=\"number\">7900</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将员工按薪资是否高于8000分组</span></span><br><span class=\"line\">        Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; <span class=\"number\">8000</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 将员工按性别分组</span></span><br><span class=\"line\">        Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class=\"line\">        <span class=\"comment\">// 将员工先按性别分组，再按地区分组</span></span><br><span class=\"line\">        Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工按薪资是否大于8000分组情况：\"</span> + part);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工按性别分组情况：\"</span> + group);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工按性别、地区：\"</span> + group2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">员工按薪资是否大于<span class=\"number\">8000</span>分组情况：&#123;<span class=\"keyword\">false</span>=[Person&#123;name=<span class=\"string\">'Jack'</span>, salary=<span class=\"number\">7000</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'Washington'</span>&#125;, Person&#123;name=<span class=\"string\">'Lily'</span>, salary=<span class=\"number\">7800</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'Washington'</span>&#125;, Person&#123;name=<span class=\"string\">'Alisa'</span>, salary=<span class=\"number\">7900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;], <span class=\"keyword\">true</span>=[Person&#123;name=<span class=\"string\">'Tom'</span>, salary=<span class=\"number\">8900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Anni'</span>, salary=<span class=\"number\">8200</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Owen'</span>, salary=<span class=\"number\">9500</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;]&#125;</span><br><span class=\"line\">员工按性别分组情况：&#123;female=[Person&#123;name=<span class=\"string\">'Lily'</span>, salary=<span class=\"number\">7800</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'Washington'</span>&#125;, Person&#123;name=<span class=\"string\">'Anni'</span>, salary=<span class=\"number\">8200</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Alisa'</span>, salary=<span class=\"number\">7900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;], male=[Person&#123;name=<span class=\"string\">'Tom'</span>, salary=<span class=\"number\">8900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Jack'</span>, salary=<span class=\"number\">7000</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'Washington'</span>&#125;, Person&#123;name=<span class=\"string\">'Owen'</span>, salary=<span class=\"number\">9500</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;]&#125;</span><br><span class=\"line\">员工按性别、地区：&#123;female=&#123;New York=[Person&#123;name=<span class=\"string\">'Anni'</span>, salary=<span class=\"number\">8200</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Alisa'</span>, salary=<span class=\"number\">7900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'New York'</span>&#125;], Washington=[Person&#123;name=<span class=\"string\">'Lily'</span>, salary=<span class=\"number\">7800</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'female'</span>, area=<span class=\"string\">'Washington'</span>&#125;]&#125;, male=&#123;New York=[Person&#123;name=<span class=\"string\">'Tom'</span>, salary=<span class=\"number\">8900</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;, Person&#123;name=<span class=\"string\">'Owen'</span>, salary=<span class=\"number\">9500</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'New York'</span>&#125;], Washington=[Person&#123;name=<span class=\"string\">'Jack'</span>, salary=<span class=\"number\">7000</span>, age=<span class=\"number\">0</span>, sex=<span class=\"string\">'male'</span>, area=<span class=\"string\">'Washington'</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"接合（joining）\"><a href=\"#接合（joining）\" class=\"headerlink\" title=\"接合（joining）\"></a>接合（joining）</h5><p><code>joining</code>可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">23</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"number\">25</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"number\">21</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        String names = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"所有员工的姓名：\"</span> + names);</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">        String string = list.stream().collect(Collectors.joining(<span class=\"string\">\"-\"</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拼接后的字符串：\"</span> + string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">所有员工的姓名：Tom,Jack,Lily</span><br><span class=\"line\">拼接后的字符串：A-B-C</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"归约（reduce）-1\"><a href=\"#归约（reduce）-1\" class=\"headerlink\" title=\"归约（reduce）\"></a>归约（reduce）</h5><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">23</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">7000</span>, <span class=\"number\">25</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">7800</span>, <span class=\"number\">21</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个员工减去起征点后的薪资之和</span></span><br><span class=\"line\">        Integer sum = personList.stream().collect(Collectors.reducing(<span class=\"number\">0</span>, Person::getSalary, (i, j) -&gt; (i + j - <span class=\"number\">5000</span>)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工扣税薪资总和：\"</span> + sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// stream的reduce</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"员工薪资总和：\"</span> + sum2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">员工扣税薪资总和：<span class=\"number\">8700</span></span><br><span class=\"line\">员工薪资总和：<span class=\"number\">23700</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"排序（sorted）\"><a href=\"#排序（sorted）\" class=\"headerlink\" title=\"排序（sorted）\"></a>排序（sorted）</h4><p>有两种排序：</p>\n<ul>\n<li>sorted()：自然排序，流中元素需实现 Comparable 接口</li>\n<li>sorted (Comparator com)：Comparator 排序器自定义排序</li>\n</ul>\n<p>举个荔枝：</p>\n<p>将员工按工资由高到低（工资一样则按年龄由大到小）排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Sherry\"</span>, <span class=\"number\">9000</span>, <span class=\"number\">24</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">8900</span>, <span class=\"number\">22</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Jack\"</span>, <span class=\"number\">9000</span>, <span class=\"number\">25</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"Washington\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Lily\"</span>, <span class=\"number\">8800</span>, <span class=\"number\">26</span>, <span class=\"string\">\"male\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alisa\"</span>, <span class=\"number\">9000</span>, <span class=\"number\">26</span>, <span class=\"string\">\"female\"</span>, <span class=\"string\">\"New York\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 按工资升序排序（自然排序）</span></span><br><span class=\"line\">        List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 按工资倒序排序</span></span><br><span class=\"line\">        List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class=\"line\">                .map(Person::getName).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 先按工资再按年龄升序排序</span></span><br><span class=\"line\">        List&lt;String&gt; newList3 = personList.stream()</span><br><span class=\"line\">                .sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 先按工资再按年龄自定义排序（降序）</span></span><br><span class=\"line\">        List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p2.getAge() - p1.getAge();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p2.getSalary() - p1.getSalary();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).map(Person::getName).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"按工资升序排序：\"</span> + newList);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"按工资降序排序：\"</span> + newList2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"先按工资再按年龄升序排序：\"</span> + newList3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"先按工资再按年龄自定义降序排序：\"</span> + newList4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class=\"line\">按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</span><br><span class=\"line\">先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class=\"line\">先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"提取-组合\"><a href=\"#提取-组合\" class=\"headerlink\" title=\"提取/组合\"></a>提取/组合</h4><p>流也可以进行合并、去重、限制、跳过等操作</p>\n<p><strong>去重</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-39-03.png\" style=\"zoom:80%;\" />\n\n<p><strong>限制</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-40-11.png\" style=\"zoom:80%;\" />\n\n<p><strong>跳过</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-39-31.png\" style=\"zoom:80%;\" />\n\n\n\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTest5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        streamOperation4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">streamOperation4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String[] arr1 = &#123; <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span> &#125;;</span><br><span class=\"line\">        String[] arr2 = &#123; <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class=\"line\">        Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class=\"line\">        <span class=\"comment\">// concat:合并两个流 distinct：去重</span></span><br><span class=\"line\">        List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// limit：限制从流中获得前n个数据</span></span><br><span class=\"line\">        List&lt;Integer&gt; collect = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x + <span class=\"number\">2</span>).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// skip：跳过前n个数据</span></span><br><span class=\"line\">        List&lt;Integer&gt; collect2 = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x + <span class=\"number\">2</span>).skip(<span class=\"number\">1</span>).limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"流合并：\"</span> + newList);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"limit：\"</span> + collect);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"skip：\"</span> + collect2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class=\"line\">按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</span><br><span class=\"line\">先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class=\"line\">先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</span><br></pre></td></tr></table></figure>\n\n<hr>\n","categories":["jdk8新特性"],"tags":["进阶","stream"]},{"title":"JQuery","url":"/PaulGeorge123.github.io/2020/05/23/jQuery/","content":"<p><a href=\"http://jquery.cuishifeng.cn/\" target=\"_blank\" rel=\"noopener\">jQuery API</a>      <em>(哪里不会点哪里)</em></p>\n<h4 id=\"jQuery-库-CDN加速\"><a href=\"#jQuery-库-CDN加速\" class=\"headerlink\" title=\"jQuery 库 CDN加速\"></a>jQuery 库 CDN加速</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/core.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h5 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h5><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test-jquery\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//选择器就是 CSS 选择器</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#test-jquery'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">'点击'</span>);</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>公式：$(selector).action()</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$('p').click();\t\t//标签选择器</span><br><span class=\"line\">$('#id').click();\t\t//Id选择器</span><br><span class=\"line\">$('.class').click();\t//类选择器</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h5><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200219134650477.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//当网页加载完毕之后，响应事件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test-ul\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"javascript\"</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">name</span>=<span class=\"string\">\"python\"</span>&gt;</span>python<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#test-ul li[name = python]'</span>).text();</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'#test-ul'</span>).html();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log($(<span class=\"string\">'#test-ul li[name = python]'</span>).text());</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log($(<span class=\"string\">'#test-ul'</span>).html());</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"节点文本操作\"><a href=\"#节点文本操作\" class=\"headerlink\" title=\"节点文本操作\"></a>节点文本操作</h5><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$('#test-ul li[name = python]').text();\t//获得值</span><br><span class=\"line\">$('#test-ul li[name = python]').text('设置值');\t//设置值</span><br><span class=\"line\">$('#test-ul').html();\t//获得值</span><br><span class=\"line\">$('#test-ul').html('<span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>');\t//设置值</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20200219140539201.png\" alt=\"\"></p>\n<h5 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#test-ul li[name = python]'</span>).show()</span><br><span class=\"line\">$(<span class=\"string\">'#test-ul li[name = python]'</span>).hide()</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"使用-attr\"><a href=\"#使用-attr\" class=\"headerlink\" title=\"使用 attr()\"></a>使用 attr()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//attr() 方法设置或返回被选元素的属性值</span></span><br><span class=\"line\">$(selector).attr(attribute)</span><br><span class=\"line\"><span class=\"comment\">//设置被选元素的属性和值\t</span></span><br><span class=\"line\">$(selector).attr(attribute,value)</span><br><span class=\"line\"><span class=\"comment\">//设置被选元素的属性和值</span></span><br><span class=\"line\">$(selector).attr(attribute,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,oldvalue</span>))</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-change\"><a href=\"#使用-change\" class=\"headerlink\" title=\"使用 change()\"></a>使用 change()</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#当元素的值改变时发生 change 事件（仅适用于表单字段）</span></span><br><span class=\"line\"><span class=\"comment\">#change() 方法触发 change 事件，或规定当发生 change 事件时运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">#注意：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，#change 事件会在元素失去焦点时发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">触发被选元素的 change 事件：</span><br><span class=\"line\">$(selector).change()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>点击 触发 事件 的 jQuery 写法样式 (Thymeleaf)</p>\n</blockquote>\n<p><strong>on注册简单事件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class=\"line\">$(selector).on( <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">$(selector).onclick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>on注册事件委托</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示给$(selector)绑定代理事件，支持动态绑定</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;...&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>on注册事件的语法：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将由自己执行。</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class=\"line\"><span class=\"comment\">// 第四个参数：handler，事件处理函数</span></span><br><span class=\"line\">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> return false : 既能阻止事件冒泡，又能阻止浏览器默认行为。</p>\n</blockquote>\n","categories":["前端"],"tags":["脚本语言"]},{"title":"ssm整合","url":"/PaulGeorge123.github.io/2020/08/09/ssm%E6%95%B4%E5%90%88/","content":"<h4 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h4><ul>\n<li>IDEA</li>\n<li>MySQL 5.7.19</li>\n<li>Tomcat 9</li>\n<li>Maven 3.6</li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"数据库环境\"><a href=\"#数据库环境\" class=\"headerlink\" title=\"数据库环境\"></a>数据库环境</h4><p><strong>创建一个存放书籍数据的数据库表  ssmbuild</strong> </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> <span class=\"string\">`ssmbuild`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USE</span> <span class=\"string\">`ssmbuild`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`books`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`books`</span> (</span><br><span class=\"line\">  <span class=\"string\">`bookID`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'书id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`bookName`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'书名'</span>,</span><br><span class=\"line\">  <span class=\"string\">`bookCounts`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'数量'</span>,</span><br><span class=\"line\">  <span class=\"string\">`detail`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'描述'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`bookID`</span> (<span class=\"string\">`bookID`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span>  <span class=\"keyword\">INTO</span> <span class=\"string\">`books`</span>(<span class=\"string\">`bookID`</span>,<span class=\"string\">`bookName`</span>,<span class=\"string\">`bookCounts`</span>,<span class=\"string\">`detail`</span>)<span class=\"keyword\">VALUES</span> </span><br><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"string\">'Java'</span>,<span class=\"number\">1</span>,<span class=\"string\">'从入门到放弃'</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"string\">'MySQL'</span>,<span class=\"number\">10</span>,<span class=\"string\">'从删库到跑路'</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>,<span class=\"string\">'Linux'</span>,<span class=\"number\">5</span>,<span class=\"string\">'从进门到进牢'</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"基本环境搭建\"><a href=\"#基本环境搭建\" class=\"headerlink\" title=\"基本环境搭建\"></a>基本环境搭建</h4><p><strong>1、新建一个Maven项目 ssmbuild ， 添加web的支持</strong>    </p>\n<p><strong>2、导入相关的pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Junit--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Servlet - JSP --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Mybatis--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Spring--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、Maven资源过滤设置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、建立基本结构和配置框架</strong></p>\n<ul>\n<li><p>com.guo.controller</p>\n</li>\n<li><p>com.guo.dao</p>\n</li>\n<li><p>com.guo.pojo</p>\n</li>\n<li><p>com.guo.service</p>\n</li>\n</ul>\n<p><strong>mybatis-config.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>applicationContext.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Mybatis层编写\"><a href=\"#Mybatis层编写\" class=\"headerlink\" title=\"Mybatis层编写\"></a>Mybatis层编写</h4><p><strong>1、数据库配置文件  database.properties</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/(数据库名)?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、IDEA关联数据库</strong></p>\n<p><strong>3、编写MyBatis的核心配置文件  mybatis-config.xml</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.guo.pojo\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/guo/dao/XxxMapper.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、编写数据库对应的实体类 com.guo.pojo.Xxx<br>使用lombok插件！</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.guo.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xxx</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ID;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String Name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> Counts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、编写Dao层的 Mapper接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.guo.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.guo.pojo.Xxx;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">XxxMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addXxx</span><span class=\"params\">(Xxx xxx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据id删除一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateXxx</span><span class=\"params\">(Xxx xxx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据id查询,返回一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\">Books <span class=\"title\">queryXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询全部Xxx,返回list集合</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Xxx&gt; <span class=\"title\">queryAllXxx</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、编写接口对应的 Mapper.xml 文件，需要导入MyBatis的包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.guo.dao.XxxMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--增加一个Xxx--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addXxx\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Xxx\"</span>&gt;</span></span><br><span class=\"line\">        insert into ssmbuild.xxx(xxxName,xxxCounts,detail)</span><br><span class=\"line\">        values (#&#123;xxxName&#125;, #&#123;xxxCounts&#125;, #&#123;detail&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--根据id删除一个Xxx--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deletexxById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span>&gt;</span></span><br><span class=\"line\">        delete from ssmbuild.xxx where xxxID=#&#123;xxxID&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--更新Xxx--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateXxx\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Xxx\"</span>&gt;</span></span><br><span class=\"line\">        update ssmbuild.Xxx</span><br><span class=\"line\">        set xxxName = #&#123;xxxName&#125;,xxxCounts = #&#123;xxxCounts&#125;,detail = #&#123;detail&#125;</span><br><span class=\"line\">        where xxxID = #&#123;xxxID&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--根据id查询,返回一个Xxx--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryXxxById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Xxx\"</span>&gt;</span></span><br><span class=\"line\">        select * from ssmbuild.books</span><br><span class=\"line\">        where xxxID = #&#123;xxxID&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--查询全部Xxx--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryAllXxx\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Xxx\"</span>&gt;</span></span><br><span class=\"line\">        SELECT * from ssmbuild.xxx</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>7、编写Service层的接口和实现类</strong></p>\n<p><strong>接口:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.guo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.guo.pojo.Xxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//XxxService:底下需要去实现,调用dao层</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">XxxService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//增加一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addXxx</span><span class=\"params\">(Xxx xxx)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//根据id删除一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//更新Xxx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateXxx</span><span class=\"params\">(Xxx xxx)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//根据id查询,返回一个Xxx</span></span><br><span class=\"line\">    <span class=\"function\">Xxx <span class=\"title\">queryXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//查询全部Xxx,返回list集合</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Xxx&gt; <span class=\"title\">queryAllXxx</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现类：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.guo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.guo.dao.XxxMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.guo.pojo.Xxx;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XxxServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">XxxService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> XxxMapper XxxMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setXxxMapper</span><span class=\"params\">(XxxMapper xxxMapper)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.xxxMapper = xxxMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addXxx</span><span class=\"params\">(Xxx xxx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xxxMapper.addXxx(xxx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xxxMapper.deleteXxxById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateXxx</span><span class=\"params\">(Xxx xxx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xxxMapper.updateXxx(xxx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Books <span class=\"title\">queryXxxById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xxxMapper.queryXxxById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Xxx&gt; <span class=\"title\">queryAllXxx</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xxxMapper.queryAllXxx();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Spring层\"><a href=\"#Spring层\" class=\"headerlink\" title=\"Spring层\"></a>Spring层</h4><p><strong>编写Spring整合Mybatis的相关的配置文件  spring-dao.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">https://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:database.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库连接池</span></span><br><span class=\"line\"><span class=\"comment\">        dbcp  半自动化操作  不能自动连接</span></span><br><span class=\"line\"><span class=\"comment\">        c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"30\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"autoCommitOnClose\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"checkoutTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireRetryAttempts\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.guo.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Spring整合service层 spring-service.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.guo.service\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--XxxServiceImpl注入到IOC容器中--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"XxxServiceImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.guo.service.XxxServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xxxMapper\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"xxxMapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"SpringMVC层\"><a href=\"#SpringMVC层\" class=\"headerlink\" title=\"SpringMVC层\"></a>SpringMVC层</h4><p><strong>web.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--DispatcherServlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--encodingFilter--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Session过期时间--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>spring-mvc.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    https://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.springframework.web.servlet.view.JstlView\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/views/\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.guo.controller\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Spring配置整合文件，applicationContext.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring-dao.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring-service.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring-mvc.xml\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Controller 和 视图层编写</strong></p>\n<p><strong>1、XxxController 类编写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/xxx\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XxxController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"XxxServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> XxxService xxxService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/allXxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Xxx&gt; list = xxxService.queryAllXxx();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"list\"</span>, list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"allXxx\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*<em>2、编写首页 index.jsp *</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span> pageEncoding=<span class=\"string\">\"UTF-8\"</span> %&gt;</span><br><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=<span class=\"string\">\"text/css\"</span>&gt;</span><br><span class=\"line\">        a &#123;</span><br><span class=\"line\">            text-decoration: none;</span><br><span class=\"line\">            color: black;</span><br><span class=\"line\">            font-size: <span class=\"number\">18</span>px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h3 &#123;</span><br><span class=\"line\">            width: <span class=\"number\">180</span>px;</span><br><span class=\"line\">            height: <span class=\"number\">38</span>px;</span><br><span class=\"line\">            margin: <span class=\"number\">100</span>px auto;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            line-height: <span class=\"number\">38</span>px;</span><br><span class=\"line\">            background: deepskyblue;</span><br><span class=\"line\">            border-radius: <span class=\"number\">4</span>px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h3&gt;</span><br><span class=\"line\">    &lt;a href=\"$&#123;pageContext.request.contextPath&#125;/xxx/allxxx\"&gt;点击进入列表页&lt;/a&gt;</span><br><span class=\"line\">&lt;/h3&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"C:%5CUsers%5CCurry%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200422154158523.png\" alt=\"image-20200422154158523\"></p>\n","categories":["后端"],"tags":["框架"]},{"title":"实用链接","url":"/PaulGeorge123.github.io/2021/08/20/%E5%AE%9E%E7%94%A8%E9%93%BE%E6%8E%A5/","content":"<blockquote>\n<p>收集的各种优质的链接</p>\n</blockquote>\n<hr>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/link.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>本片博客是用于汇集各种编程相关的优质链接</font></p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"一、使用教程篇\"><a href=\"#一、使用教程篇\" class=\"headerlink\" title=\"一、使用教程篇\"></a>一、使用教程篇</h3><p><a href=\"https://mp.weixin.qq.com/s/KMkVb1Az8LxsfsJpy9EH8g\" target=\"_blank\" rel=\"noopener\">1、全网最全的 postman 工具使用教程</a></p>\n<p><a href=\"https://zszxz.com/category/springboot/article/2\" target=\"_blank\" rel=\"noopener\">2、SpringBoot教程</a></p>\n<hr>\n<h3 id=\"二、算法提高篇\"><a href=\"#二、算法提高篇\" class=\"headerlink\" title=\"二、算法提高篇\"></a>二、算法提高篇</h3><p><a href=\"https://zhuanlan.zhihu.com/p/383733598\" target=\"_blank\" rel=\"noopener\">1、LeetCode 最长公共前缀</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/383416115\" target=\"_blank\" rel=\"noopener\">2、LeetCode 罗马数字转整数</a></p>\n<hr>\n<h3 id=\"三、知识积累篇\"><a href=\"#三、知识积累篇\" class=\"headerlink\" title=\"三、知识积累篇\"></a>三、知识积累篇</h3><p><a href=\"https://mp.weixin.qq.com/s/HQA8Tcg4a1oElvUBSNlN_A\" target=\"_blank\" rel=\"noopener\">1、Redis五种数据结构详解</a></p>\n<p><a href=\"https://pdai.tech/md/outline/x-outline.html#%E5%85%A8%E6%A0%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%80%BB%E8%A7%88\" target=\"_blank\" rel=\"noopener\">2、Java 全栈知识体系</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42313701/article/details/107729593\" target=\"_blank\" rel=\"noopener\">3、Java一些过时方法与替换</a></p>\n<hr>\n<h3 id=\"四、问题解决篇\"><a href=\"#四、问题解决篇\" class=\"headerlink\" title=\"四、问题解决篇\"></a>四、问题解决篇</h3><p><a href=\"https://www.cnblogs.com/mark5/p/14268122.html\" target=\"_blank\" rel=\"noopener\">1、MybatisPlus 主键策略</a></p>\n<p><a href=\"https://blog.csdn.net/zhangpower1993/article/details/89016503\" target=\"_blank\" rel=\"noopener\">2、SpringBoot–WebMvcConfigurer</a></p>\n<hr>\n<h3 id=\"五、体系架构篇\"><a href=\"#五、体系架构篇\" class=\"headerlink\" title=\"五、体系架构篇\"></a>五、体系架构篇</h3><p><a href=\"https://mp.weixin.qq.com/s/bxRUzYyT_vW7-iJUgee58g\" target=\"_blank\" rel=\"noopener\">1、淘宝技术架构演进</a></p>\n","categories":["实践篇"],"tags":["链接"]},{"title":"实践一下--MyBatisPlus","url":"/PaulGeorge123.github.io/2021/08/14/%E5%AE%9E%E8%B7%B5--MyBatisPlus/","content":"<blockquote>\n<p>实践是检验真理的唯一标准</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 MyBatisPlus</strong></p>\n<hr>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/logo.svg\" style=\"zoom:30%;\" />\n\n\n\n<p><strong>写在前面</strong></p>\n<p>忙里偷闲，趁着有时间来写一篇关于 MybatisPlus 的学习笔记！</p>\n<p>其实官网上的 API 很全面，不会的就去官网上查一查~</p>\n<p><a href=\"https://baomidou.com/\" target=\"_blank\" rel=\"noopener\">MyBatisPlus</a></p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"MyBatisPlus-简介\"><a href=\"#MyBatisPlus-简介\" class=\"headerlink\" title=\"MyBatisPlus  简介\"></a>MyBatisPlus  简介</h2><h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-plus-framework.jpg\" alt=\"\"></p>\n<hr>\n<h2 id=\"MyBatisPlus-快速入门\"><a href=\"#MyBatisPlus-快速入门\" class=\"headerlink\" title=\"MyBatisPlus  快速入门\"></a>MyBatisPlus  快速入门</h2><h3 id=\"简单的-Demo-实现\"><a href=\"#简单的-Demo-实现\" class=\"headerlink\" title=\"简单的 Demo 实现\"></a>简单的 Demo 实现</h3><h4 id=\"数据库中创建-User-表\"><a href=\"#数据库中创建-User-表\" class=\"headerlink\" title=\"数据库中创建 User 表\"></a>数据库中创建 User 表</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS user;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE user</span><br><span class=\"line\">(</span><br><span class=\"line\">\tid BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,</span><br><span class=\"line\">\tname VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class=\"line\">\tage INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class=\"line\">\temail VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class=\"line\">\tPRIMARY KEY (id)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE FROM user;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO user (id, name, age, email) VALUES</span><br><span class=\"line\">(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),</span><br><span class=\"line\">(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),</span><br><span class=\"line\">(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),</span><br><span class=\"line\">(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),</span><br><span class=\"line\">(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"添加-mybatis-plus-依赖\"><a href=\"#添加-mybatis-plus-依赖\" class=\"headerlink\" title=\"添加 mybatis-plus 依赖\"></a>添加 mybatis-plus 依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意引入了<code>mybatisplus</code>就不要再引入<code>mybatis</code>的启动器了</p>\n</blockquote>\n<h4 id=\"编写-application-yml-文件\"><a href=\"#编写-application-yml-文件\" class=\"headerlink\" title=\"编写 application.yml 文件\"></a>编写 application.yml 文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis-plus?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">auto-mapping-behavior:</span> <span class=\"string\">full</span></span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建实体类\"><a href=\"#创建实体类\" class=\"headerlink\" title=\"创建实体类\"></a>创建实体类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//主键自增</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId</span>(type = IdType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建-Mapper-接口\"><a href=\"#创建-Mapper-接口\" class=\"headerlink\" title=\"创建 Mapper 接口\"></a>创建 Mapper 接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"添加扫描注解\"><a href=\"#添加扫描注解\" class=\"headerlink\" title=\"添加扫描注解\"></a>添加扫描注解</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.ase.mybatis.mapper\"</span>) <span class=\"comment\">//更加的灵活</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(MybatisApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"编写测试类\"><a href=\"#编写测试类\" class=\"headerlink\" title=\"编写测试类\"></a>编写测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"MybatisPlus 接口测试\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisPlusTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"测试查询全部\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">queryAllList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.selectList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        userList.forEach(user -&gt; log.info(user));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"测试插入一条数据\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">saveUserOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">23</span>);</span><br><span class=\"line\">        user.setEmail(<span class=\"string\">\"tom@163.com\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//插入的条数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> insert = userMapper.insert(user);</span><br><span class=\"line\">        log.info(insert);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"service接口\"><a href=\"#service接口\" class=\"headerlink\" title=\"service接口\"></a>service接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IService</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"service实现类\"><a href=\"#service实现类\" class=\"headerlink\" title=\"service实现类\"></a>service实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * service实现类 继承mybatisplus提供通用的service基类</span></span><br><span class=\"line\"><span class=\"comment\"> * ServiceImpl&lt;UserMapper, User&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     2个泛型 ：</span></span><br><span class=\"line\"><span class=\"comment\"> *        第一个是Mapper接口</span></span><br><span class=\"line\"><span class=\"comment\"> *        第二个是对应实体类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">UserMapper</span>, <span class=\"title\">User</span>&gt;<span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h3><h4 id=\"TableName\"><a href=\"#TableName\" class=\"headerlink\" title=\"@TableName\"></a>@TableName</h4><p>【映射数据库的表名，数据库表名为user】</p>\n<ul>\n<li><p>描述：用来将实体对象与数据库表名完成映射</p>\n</li>\n<li><p>修饰范围：作用在类上</p>\n</li>\n<li><p>常见属性： value：string类型，指定映射的表名</p>\n</li>\n</ul>\n<h4 id=\"TableId\"><a href=\"#TableId\" class=\"headerlink\" title=\"@TableId\"></a>@TableId</h4><p>【数据库插入的id值默认为：全局的唯一id】</p>\n<ul>\n<li>描述：主键主键</li>\n<li>修饰范围:用在属性上</li>\n<li>常见属性：<ul>\n<li>value：String类型，指定实体类中与表对应的主键列名</li>\n<li>type：枚举类型，指定主键生成策略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数据库ID自增</span></span><br><span class=\"line\">AUTO(<span class=\"number\">0</span>),</span><br><span class=\"line\">NONE(<span class=\"number\">1</span>),</span><br><span class=\"line\"><span class=\"comment\">//用户输入ID</span></span><br><span class=\"line\">INPUT(<span class=\"number\">2</span>),</span><br><span class=\"line\">ASSIGN_ID(<span class=\"number\">3</span>),</span><br><span class=\"line\">ASSIGN_UUID(<span class=\"number\">4</span>),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后面3个被淘汰了</span></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">ID_WORKER(<span class=\"number\">3</span>),</span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">ID_WORKER_STR(<span class=\"number\">3</span>),</span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">UUID(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>AUTO 默认就是数据库⾃增，开发者⽆需赋值，会主动回填。但是数据库的主键要有自增长 </p>\n<p>ASSIGN_ID mybatisplus ⾃动赋值，雪花算法</p>\n</blockquote>\n<p><strong>全局ID生成策略</strong></p>\n<p>在全局配置文件中，就不需要在每个pojo的主键上配置了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">id-type:</span> <span class=\"string\">auto</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"TableField\"><a href=\"#TableField\" class=\"headerlink\" title=\"@TableField\"></a>@TableField</h4><ul>\n<li>描述字段注解（非主键）</li>\n<li>修饰范围:用在属性上</li>\n</ul>\n<h4 id=\"Version\"><a href=\"#Version\" class=\"headerlink\" title=\"@Version\"></a>@Version</h4><p>【标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功】</p>\n<p>举个荔枝：</p>\n<p>version = 1</p>\n<p>线程 1：update … set version = 2 where version = 1</p>\n<p>线程2 ：update … set version = 2 where version = 1</p>\n<p><strong>这样就只有一个线程会执行</strong></p>\n<p><strong>乐观锁实现方式：</strong></p>\n<ol>\n<li>取出记录时，获取当前 version</li>\n<li>更新时，带上这个 version</li>\n<li>执行更新时， set version = newVersion where version = oldVersion</li>\n<li>如果 version 不对，就更新失败</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span>(type =IdType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> version;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注册配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisPlusConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title\">mybatisPlusInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        MybatisPlusInterceptor interceptor = <span class=\"keyword\">new</span> MybatisPlusInterceptor();</span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> OptimisticLockerInnerInterceptor());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"EnumValue\"><a href=\"#EnumValue\" class=\"headerlink\" title=\"@EnumValue\"></a>@EnumValue</h4><p>【通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> StatusEnum &#123;</span><br><span class=\"line\">    SUCCESS(<span class=\"number\">200</span>,<span class=\"string\">\"成功\"</span>),</span><br><span class=\"line\">    FAILURE(<span class=\"number\">300</span>,<span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"meta\">@EnumValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    StatusEnum(Integer code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span>(type =IdType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer version;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusEnum status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">type-enums-package:</span> <span class=\"string\">com.example.mybatisplus.enums</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"TableLogic\"><a href=\"#TableLogic\" class=\"headerlink\" title=\"@TableLogic\"></a>@TableLogic</h4><p>【映射逻辑删除】</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必须指定</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>逻辑未删除值</td>\n</tr>\n<tr>\n<td>delval</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>逻辑删除值</td>\n</tr>\n</tbody></table>\n<p><strong>物理删除</strong>【在删除的时候直接将数据库的数据从数据库删除掉】</p>\n<p><strong>逻辑删除</strong>【在逻辑层面控制删除，通常会在表里加入对应的逻辑删除标识字段，deleted，默认是有效的值为0，当用户删除时将数据修改为1.查询是只查询deleted=0的】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span>(type =IdType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AgeEnum age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer version;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> StatusEnum status;</span><br><span class=\"line\">    <span class=\"meta\">@TableLogic</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deleted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml 添加配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class=\"line\">  <span class=\"attr\">type-enums-package:</span> <span class=\"string\">com.example.mybatisplus.enums</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询不会查询 deleted 为 1 的数据</p>\n</blockquote>\n<h4 id=\"OrderBy\"><a href=\"#OrderBy\" class=\"headerlink\" title=\"@OrderBy\"></a>@OrderBy</h4><p>【内置 SQL 默认指定排序，优先级低于 wrapper 条件查询】</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必须指定</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>isDesc</td>\n<td>boolean</td>\n<td>否</td>\n<td>true</td>\n<td>是否倒序查询</td>\n</tr>\n<tr>\n<td>delval</td>\n<td>String</td>\n<td>否</td>\n<td>Short.MAX_VALUE</td>\n<td>数字越小越靠前</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"条件构造器\"><a href=\"#条件构造器\" class=\"headerlink\" title=\"条件构造器\"></a>条件构造器</h3><h4 id=\"wrapper\"><a href=\"#wrapper\" class=\"headerlink\" title=\"wrapper\"></a>wrapper</h4><p>【条件构造器】</p>\n<ul>\n<li>Wrapper ： 条件构造抽象类，最顶端父类</li>\n<li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</li>\n<li>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</li>\n<li>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</li>\n<li>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</li>\n<li>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</li>\n<li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数名</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">eq</td>\n<td align=\"center\">等于 =</td>\n<td align=\"center\">eq(“name”, “老王”)—&gt;name = ‘老王’</td>\n</tr>\n<tr>\n<td align=\"center\">ne</td>\n<td align=\"center\">不等于 &lt;&gt;</td>\n<td align=\"center\">例: ne(“name”, “老王”)—&gt;name &lt;&gt; ‘老王’</td>\n</tr>\n<tr>\n<td align=\"center\">gt</td>\n<td align=\"center\">大于 &gt;</td>\n<td align=\"center\">gt(“age”, 18)—&gt;age &gt; 18</td>\n</tr>\n<tr>\n<td align=\"center\">ge</td>\n<td align=\"center\">大于等于 &gt;=</td>\n<td align=\"center\">ge(“age”, 18)—&gt;age &gt;= 18</td>\n</tr>\n<tr>\n<td align=\"center\">lt</td>\n<td align=\"center\">小于 &lt;</td>\n<td align=\"center\">lt(“age”, 18)—&gt;age &lt; 18</td>\n</tr>\n<tr>\n<td align=\"center\">le</td>\n<td align=\"center\">小于等于 &lt;=</td>\n<td align=\"center\">le(“age”, 18)—&gt;age &lt;= 18</td>\n</tr>\n<tr>\n<td align=\"center\">between</td>\n<td align=\"center\">BETWEEN 值1 AND 值2</td>\n<td align=\"center\">between(“age”, 18, 30)—&gt;age between 18 and 30</td>\n</tr>\n<tr>\n<td align=\"center\">notBetween</td>\n<td align=\"center\">NOT BETWEEN 值1 AND 值2</td>\n<td align=\"center\">notBetween(“age”, 18, 30)—&gt;age not between 18 and 30</td>\n</tr>\n<tr>\n<td align=\"center\">like</td>\n<td align=\"center\">LIKE ‘%值%’</td>\n<td align=\"center\">like(“name”, “王”)—&gt;name like ‘%王%’</td>\n</tr>\n<tr>\n<td align=\"center\">notLike</td>\n<td align=\"center\">NOT LIKE ‘%值%’</td>\n<td align=\"center\">notLike(“name”, “王”)—&gt;name not like ‘%王%’</td>\n</tr>\n<tr>\n<td align=\"center\">likeLeft</td>\n<td align=\"center\">LIKE ‘%值’</td>\n<td align=\"center\">likeLeft(“name”, “王”)—&gt;name like ‘%王’</td>\n</tr>\n<tr>\n<td align=\"center\">likeRight</td>\n<td align=\"center\">LIKE ‘值%’</td>\n<td align=\"center\">likeRight(“name”, “王”)—&gt;name like ‘王%’</td>\n</tr>\n<tr>\n<td align=\"center\">isNul</td>\n<td align=\"center\">字段 IS NULL</td>\n<td align=\"center\">isNull(“name”)—&gt;name is null</td>\n</tr>\n<tr>\n<td align=\"center\">isNotNull</td>\n<td align=\"center\">字段 IS NOT NULL</td>\n<td align=\"center\">isNotNull(“name”)—&gt;name is not null</td>\n</tr>\n<tr>\n<td align=\"center\">in</td>\n<td align=\"center\">字段 IN (value.get(0), value.get(1), …)</td>\n<td align=\"center\">in(“age”,{1,2,3})—&gt;age in (1,2,3)</td>\n</tr>\n<tr>\n<td align=\"center\">in</td>\n<td align=\"center\">字段 IN (v0, v1, …)</td>\n<td align=\"center\">in(“age”, 1, 2, 3)—&gt;age in (1,2,3)</td>\n</tr>\n<tr>\n<td align=\"center\">notIn</td>\n<td align=\"center\">字段 NOT IN (value.get(0), value.get(1), …)</td>\n<td align=\"center\">notIn(“age”,{1,2,3})—&gt;age not in (1,2,3)</td>\n</tr>\n<tr>\n<td align=\"center\">notIn</td>\n<td align=\"center\">字段 NOT IN (v0, v1, …)</td>\n<td align=\"center\">age not in (1,2,3)</td>\n</tr>\n<tr>\n<td align=\"center\">inSql</td>\n<td align=\"center\">字段 IN ( sql语句 )</td>\n<td align=\"center\">inSql( “ age “, “1 ,2,3,4,5,6”)—&gt;age in (1,2,3,4,5,6) ， inSql(“id”, “select id from table where id &lt; 3”)—&gt;id in (select id from table where id</td>\n</tr>\n<tr>\n<td align=\"center\">groupBy</td>\n<td align=\"center\">分组：GROUP BY 字段, …</td>\n<td align=\"center\">groupBy(“id”, “name”)—&gt;group by id,name</td>\n</tr>\n<tr>\n<td align=\"center\">orderByAsc</td>\n<td align=\"center\">排序：ORDER BY 字段, … ASC</td>\n<td align=\"center\">orderByAsc(“id”, “name”)—&gt;order by id ASC,name ASC</td>\n</tr>\n<tr>\n<td align=\"center\">orderByDesc</td>\n<td align=\"center\">排序：ORDER BY 字段, … DESC</td>\n<td align=\"center\">orderByDesc(“id”, “name”)—&gt;order by id DESC,name DESC</td>\n</tr>\n<tr>\n<td align=\"center\">orderBy</td>\n<td align=\"center\">排序：ORDER BY 字段, …</td>\n<td align=\"center\">orderBy(true, true, “id”, “name”)—&gt;order by id ASC,name ASC</td>\n</tr>\n<tr>\n<td align=\"center\">having</td>\n<td align=\"center\">HAVING ( sql语句 )</td>\n<td align=\"center\">having(“sum(age) &gt; 10”)—&gt;having sum(age) &gt; 10</td>\n</tr>\n<tr>\n<td align=\"center\">or</td>\n<td align=\"center\">拼接 OR 注意事项:主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接)</td>\n<td align=\"center\">eq(“id”,1).or().eq(“name”,“老王”)—&gt;id = 1 or name = ‘老王’</td>\n</tr>\n<tr>\n<td align=\"center\">and</td>\n<td align=\"center\">AND 嵌套</td>\n<td align=\"center\">and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;and (name = ‘李白’ and status &lt;&gt; ‘活着’)</td>\n</tr>\n<tr>\n<td align=\"center\">nested</td>\n<td align=\"center\">正常嵌套 不带 AND 或者 OR</td>\n<td align=\"center\">nested(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;(name = ‘李白’ and status &lt;&gt; ‘活着’)</td>\n</tr>\n<tr>\n<td align=\"center\">last</td>\n<td align=\"center\">无视优化规则直接拼接到 sql 的最后 注意事项: 只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</td>\n<td align=\"center\">last(“limit 1”)</td>\n</tr>\n<tr>\n<td align=\"center\">exists</td>\n<td align=\"center\">拼接 EXISTS ( sql语句 )</td>\n<td align=\"center\">exists(“select id from table where age = 1”)—&gt;exists (select id from table where age = 1)</td>\n</tr>\n<tr>\n<td align=\"center\">notExists</td>\n<td align=\"center\">拼接 NOT EXISTS ( sql语句 )</td>\n<td align=\"center\">notExists(“select id from table where age = 1”)—&gt;not exists (select id from table where age = 1)</td>\n</tr>\n</tbody></table>\n<h4 id=\"QueryWrapper\"><a href=\"#QueryWrapper\" class=\"headerlink\" title=\"QueryWrapper\"></a>QueryWrapper</h4><p><strong>select【设置查询字段】</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">select(String... sqlSelect)</span><br><span class=\"line\">select(Predicate&lt;TableFieldInfo&gt; predicate)</span><br><span class=\"line\">select(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)</span><br></pre></td></tr></table></figure>\n\n<p>例：select(“id”, “name”, “age”)</p>\n<p>例:：select(i -&gt; i.getProperty().startsWith(“test”))</p>\n<h4 id=\"UpdateWrapper\"><a href=\"#UpdateWrapper\" class=\"headerlink\" title=\"UpdateWrapper\"></a>UpdateWrapper</h4><p><strong>set</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">set(String column, Object val)</span><br><span class=\"line\">set(<span class=\"keyword\">boolean</span> condition, String column, Object val)</span><br></pre></td></tr></table></figure>\n\n<p>例: set(“name”, “老李头”)</p>\n<p>例: set(“name”, “”)—&gt;数据库字段值变为空字符串</p>\n<p>例: set(“name”, null)—&gt;数据库字段值变为null</p>\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据 ID 查询</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">selectById</span><span class=\"params\">(Serializable id)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据 entity 条件，查询一条记录</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">selectOne</span><span class=\"params\">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询（根据ID 批量查询）</span></span><br><span class=\"line\"><span class=\"function\">List&lt;T&gt; <span class=\"title\">selectBatchIds</span><span class=\"params\">(@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据 entity 条件，查询全部记录</span></span><br><span class=\"line\"><span class=\"function\">List&lt;T&gt; <span class=\"title\">selectList</span><span class=\"params\">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 查询（根据 columnMap 条件）</span></span><br><span class=\"line\"><span class=\"function\">List&lt;T&gt; <span class=\"title\">selectByMap</span><span class=\"params\">(@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class=\"meta\">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class=\"line\"><span class=\"comment\">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class=\"line\"><span class=\"function\">List&lt;Object&gt; <span class=\"title\">selectObjs</span><span class=\"params\">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class=\"line\"><span class=\"function\">IPage&lt;T&gt; <span class=\"title\">selectPage</span><span class=\"params\">(IPage&lt;T&gt; page, @Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class=\"line\">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class=\"meta\">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class=\"line\"><span class=\"comment\">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class=\"line\"><span class=\"function\">Integer <span class=\"title\">selectCount</span><span class=\"params\">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查询所有不加条件\"><a href=\"#查询所有不加条件\" class=\"headerlink\" title=\"查询所有不加条件\"></a>查询所有不加条件</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不加任何条件全部查询</span></span><br><span class=\"line\">List&lt;User&gt; users = mapper.selectList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询单条记录\"><a href=\"#查询单条记录\" class=\"headerlink\" title=\"查询单条记录\"></a>查询单条记录</h4><p>注意：seletOne返回的是一条实体记录，当出现多条时会报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">QueryWrapper wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">wrapper.eq(<span class=\"string\">\"id\"</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\">System.out.println(mapper.selectOne(wrapper));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过id查询\"><a href=\"#通过id查询\" class=\"headerlink\" title=\"通过id查询\"></a>通过id查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询单个id</span></span><br><span class=\"line\">User user = mapper.selectById(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//批量操作查询多个id</span></span><br><span class=\"line\">List&lt;User&gt; users = mapper.selectBatchIds(Arrays.asList(<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过map查询\"><a href=\"#通过map查询\" class=\"headerlink\" title=\"通过map查询\"></a>通过map查询</h4><p>map只能做等值判断，逻辑判断需要使用wrapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">\"id\"</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\">mapper.selectByMap(map).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：map中的key对应的是数据库中的列名。例如数据库user_id，实体类是userId，这时map的key需要填写user_id</strong></p>\n</blockquote>\n<h4 id=\"单条件查询\"><a href=\"#单条件查询\" class=\"headerlink\" title=\"单条件查询\"></a>单条件查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询name为cb的用户</span></span><br><span class=\"line\">QueryWrapper wrapper=<span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">wrapper.eq(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"cb\"</span>);</span><br><span class=\"line\">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多条件查询</span></span><br><span class=\"line\"><span class=\"comment\">//查询name为cb,age为18的用户</span></span><br><span class=\"line\">QueryWrapper wrapper=<span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">Map&lt;String,Object&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"cb\"</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"age\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">wrapper.allEq(map);</span><br><span class=\"line\">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">wrapper.gt(<span class=\"string\">\"age\"</span>,<span class=\"number\">18</span>);  <span class=\"comment\">//大于</span></span><br><span class=\"line\">wrapper.ne(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"cb\"</span>); <span class=\"comment\">//等于</span></span><br><span class=\"line\">wrapper.ge(<span class=\"string\">\"age\"</span>,<span class=\"number\">18</span>); <span class=\"comment\">//大于等于</span></span><br><span class=\"line\">wrapper.lt(<span class=\"string\">\"age\"</span>,<span class=\"number\">18</span>);  <span class=\"comment\">//小于</span></span><br><span class=\"line\">wrapper.le(<span class=\"string\">\"age\"</span>,<span class=\"number\">18</span>);  <span class=\"comment\">//小于等于</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模糊查询</span></span><br><span class=\"line\">QueryWrapper wrapper=<span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\"><span class=\"comment\">//相对于 like '%b%'</span></span><br><span class=\"line\">wrapper.like(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于 like '%b'</span></span><br><span class=\"line\">wrapper.likeLeft(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于 like 'b%'</span></span><br><span class=\"line\">wrapper.likeRight(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">wrapper.inSql(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"select id from user where id &lt; 10\"</span>);</span><br><span class=\"line\">wrapper.inSql(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"select age from user where age &gt; 3\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">wrapper.orderByDesc(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">wrapper.orderByAsc(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">wrapper.having(<span class=\"string\">\"id &gt; 8\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询数量\"><a href=\"#查询数量\" class=\"headerlink\" title=\"查询数量\"></a>查询数量</h4><p>返回的是有几条数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">QueryWrapper wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">wrapper.eq(<span class=\"string\">\"id\"</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\">System.out.println(mapper.selectCount(wrapper));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将查询结果封装到map\"><a href=\"#将查询结果封装到map\" class=\"headerlink\" title=\"将查询结果封装到map\"></a>将查询结果封装到map</h4><p>返回map而不是原来的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">QueryWrapper wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">wrapper.eq(<span class=\"string\">\"id\"</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\">mapper.selectMaps(wrapper).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><p><strong>配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisPlusConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最新版</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title\">mybatisPlusInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        MybatisPlusInterceptor interceptor = <span class=\"keyword\">new</span> MybatisPlusInterceptor();</span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapper方法返回page对象\"><a href=\"#mapper方法返回page对象\" class=\"headerlink\" title=\"mapper方法返回page对象\"></a>mapper方法返回page对象</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分页查询</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数是页数</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数每页的条数</span></span><br><span class=\"line\">Page&lt;User&gt; page=<span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">Page&lt;User&gt; result = mapper.selectPage(page, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//每页条数</span></span><br><span class=\"line\">System.out.println(result.getSize());</span><br><span class=\"line\"><span class=\"comment\">//总数</span></span><br><span class=\"line\">System.out.println(result.getTotal());</span><br><span class=\"line\"><span class=\"comment\">//查询结果</span></span><br><span class=\"line\">result.getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">getCurrent 当前页</span><br><span class=\"line\">getRecords 每页数据list集合</span><br><span class=\"line\">getSize 每页显示记录数</span><br><span class=\"line\">getTotal 总记录数</span><br><span class=\"line\">getPages 总页数</span><br><span class=\"line\"></span><br><span class=\"line\">hasNext  是否有下一页</span><br><span class=\"line\">hasPrevious  是否有上一页</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapper方法返回map集合\"><a href=\"#mapper方法返回map集合\" class=\"headerlink\" title=\"mapper方法返回map集合\"></a>mapper方法返回map集合</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page&lt;Map&lt;String,Object&gt;&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">mapper.selectMapsPage(page,<span class=\"keyword\">null</span>).getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"service方法返回page对象\"><a href=\"#service方法返回page对象\" class=\"headerlink\" title=\"service方法返回page对象\"></a>service方法返回page对象</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">IPage&lt;User&gt; ipage=<span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">IPage&lt;User&gt; page = userService.page(ipage);</span><br><span class=\"line\">List&lt;User&gt; records = page.getRecords();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(records);</span><br><span class=\"line\"><span class=\"comment\">//总共数据的条数</span></span><br><span class=\"line\">System.out.println(page.getTotal());</span><br><span class=\"line\"><span class=\"comment\">//总共数据的页数</span></span><br><span class=\"line\">System.out.println(page.getPages());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"xml自定义分页\"><a href=\"#xml自定义分页\" class=\"headerlink\" title=\"xml自定义分页\"></a>xml自定义分页</h3><h4 id=\"UserMapper\"><a href=\"#UserMapper\" class=\"headerlink\" title=\"UserMapper\"></a>UserMapper</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询 : 根据年龄查询用户列表，分页显示</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 分页对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">IPage&lt;User&gt; <span class=\"title\">getByAge</span><span class=\"params\">(IPage iPage,Integer age)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>UserMapper.xml 等同于编写一个普通 list 查询，mybatis-plus 自动分页</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.blb.mybatisplus2.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getByAge\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select * from user1 where age=#&#123;age&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>UserServiceImpl.java 调用分页方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xmlPage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IPage&lt;User&gt; byAge = userMapper.getByAge(<span class=\"keyword\">new</span> Page(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">18</span>);</span><br><span class=\"line\">    List&lt;User&gt; records = byAge.getRecords();</span><br><span class=\"line\">    System.out.println(records);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"自定义sql（多表关联）\"><a href=\"#自定义sql（多表关联）\" class=\"headerlink\" title=\"自定义sql（多表关联）\"></a>自定义sql（多表关联）</h3><h4 id=\"多表数据库\"><a href=\"#多表数据库\" class=\"headerlink\" title=\"多表数据库\"></a>多表数据库</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create  table  product(</span><br><span class=\"line\">    category int ,</span><br><span class=\"line\">    count int ,</span><br><span class=\"line\">    description varchar(20),</span><br><span class=\"line\">    userid bigint(100)</span><br><span class=\"line\">)charset &#x3D;utf8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ProductVO\"><a href=\"#ProductVO\" class=\"headerlink\" title=\"ProductVO\"></a>ProductVO</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductVO</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer category;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer userId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapper接口\"><a href=\"#mapper接口\" class=\"headerlink\" title=\"mapper接口\"></a>mapper接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select p.*,u.name username from product p,user u where u.id=p.userid and u.id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;ProductVO&gt; <span class=\"title\">productList</span><span class=\"params\">(@Param(<span class=\"string\">\"id\"</span>)</span> Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"执行-SQL-分析打印\"><a href=\"#执行-SQL-分析打印\" class=\"headerlink\" title=\"执行 SQL 分析打印\"></a>执行 SQL 分析打印</h3><h4 id=\"p6spy-依赖引入\"><a href=\"#p6spy-依赖引入\" class=\"headerlink\" title=\"p6spy 依赖引入\"></a>p6spy 依赖引入</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>p6spy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>p6spy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"application-yml-配置\"><a href=\"#application-yml-配置\" class=\"headerlink\" title=\"application.yml 配置\"></a>application.yml 配置</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.p6spy.engine.spy.P6SpyDriver</span> <span class=\"comment\">#com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:p6spy:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">type-enums-package:</span> <span class=\"string\">com.blb.mybatisplus2.enums</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">id-type:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.ase.mybatis.entity</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"spy-properties-配置：\"><a href=\"#spy-properties-配置：\" class=\"headerlink\" title=\"spy.properties 配置：\"></a>spy.properties 配置：</h4><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3.2.1以上使用</span></span><br><span class=\"line\"><span class=\"attr\">modulelist</span>=<span class=\"string\">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class=\"line\"><span class=\"comment\">#3.2.1以下使用或者不配置</span></span><br><span class=\"line\"><span class=\"comment\">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义日志打印</span></span><br><span class=\"line\"><span class=\"attr\">logMessageFormat</span>=<span class=\"string\">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span></span><br><span class=\"line\"><span class=\"comment\">#日志输出到控制台</span></span><br><span class=\"line\"><span class=\"attr\">appender</span>=<span class=\"string\">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class=\"line\"><span class=\"comment\"># 使用日志系统记录 sql</span></span><br><span class=\"line\"><span class=\"comment\">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 p6spy driver 代理</span></span><br><span class=\"line\"><span class=\"attr\">deregisterdrivers</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 取消JDBC URL前缀</span></span><br><span class=\"line\"><span class=\"attr\">useprefix</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class=\"line\"><span class=\"attr\">excludecategories</span>=<span class=\"string\">info,debug,result,commit,resultset</span></span><br><span class=\"line\"><span class=\"comment\"># 日期格式</span></span><br><span class=\"line\"><span class=\"attr\">dateformat</span>=<span class=\"string\">yyyy-MM-dd HH:mm:ss</span></span><br><span class=\"line\"><span class=\"comment\"># 实际驱动可多个</span></span><br><span class=\"line\"><span class=\"comment\">#driverlist=org.h2.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启慢SQL记录</span></span><br><span class=\"line\"><span class=\"attr\">outagedetection</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 慢SQL记录标准 2 秒</span></span><br><span class=\"line\"><span class=\"attr\">outagedetectioninterval</span>=<span class=\"string\">2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"MyBatisPlus-代码生成器\"><a href=\"#MyBatisPlus-代码生成器\" class=\"headerlink\" title=\"MyBatisPlus 代码生成器\"></a>MyBatisPlus 代码生成器</h2><p><strong>【根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller】</strong></p>\n<h3 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h3><p><strong>pom.xml 导入 MyBatis Plus Generator</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-generator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.velocity<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>velocity-engine-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Velocity（默认）、Freemarker、Beetl</p>\n</blockquote>\n<h3 id=\"运行main方法\"><a href=\"#运行main方法\" class=\"headerlink\" title=\"运行main方法\"></a>运行main方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建generator对象</span></span><br><span class=\"line\">        AutoGenerator autoGenerator = <span class=\"keyword\">new</span> AutoGenerator();</span><br><span class=\"line\">        <span class=\"comment\">//数据源</span></span><br><span class=\"line\">        DataSourceConfig dataSourceConfig = <span class=\"keyword\">new</span> DataSourceConfig();</span><br><span class=\"line\">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class=\"line\">        dataSourceConfig.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC\"</span>);</span><br><span class=\"line\">        dataSourceConfig.setUsername(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        dataSourceConfig.setPassword(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        dataSourceConfig.setDriverName(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class=\"line\">        <span class=\"comment\">//全局配置</span></span><br><span class=\"line\">        GlobalConfig globalConfig = <span class=\"keyword\">new</span> GlobalConfig();</span><br><span class=\"line\">        <span class=\"comment\">//当前项目的绝对路径</span></span><br><span class=\"line\">        globalConfig.setOutputDir(System.getProperty(<span class=\"string\">\"user.dir\"</span>)+<span class=\"string\">\"/src/main/java\"</span>);</span><br><span class=\"line\">        globalConfig.setOpen(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        globalConfig.setAuthor(<span class=\"string\">\"dyk\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//去掉默认生成接口名字的I</span></span><br><span class=\"line\">        globalConfig.setServiceName(<span class=\"string\">\"%sService\"</span>);</span><br><span class=\"line\">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class=\"line\">        <span class=\"comment\">//包信息</span></span><br><span class=\"line\">        PackageConfig packageConfig = <span class=\"keyword\">new</span> PackageConfig();</span><br><span class=\"line\">        packageConfig.setParent(<span class=\"string\">\"com.blb.mybatisplus\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//packageConfig.setModuleName(\"generator\");</span></span><br><span class=\"line\">        packageConfig.setController(<span class=\"string\">\"controller\"</span>);</span><br><span class=\"line\">        packageConfig.setService(<span class=\"string\">\"service\"</span>);</span><br><span class=\"line\">        packageConfig.setServiceImpl(<span class=\"string\">\"service.impl\"</span>);</span><br><span class=\"line\">        packageConfig.setMapper(<span class=\"string\">\"mapper\"</span>);</span><br><span class=\"line\">        packageConfig.setEntity(<span class=\"string\">\"entity\"</span>);</span><br><span class=\"line\">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class=\"line\">        <span class=\"comment\">//配置策略</span></span><br><span class=\"line\">        StrategyConfig strategyConfig = <span class=\"keyword\">new</span> StrategyConfig();</span><br><span class=\"line\">        strategyConfig.setEntityLombokModel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        strategyConfig.setRestControllerStyle(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//生成部分数据库里面的表对应的实体类</span></span><br><span class=\"line\">        strategyConfig.setInclude(<span class=\"string\">\"user\"</span>,<span class=\"string\">\"product\"</span>);</span><br><span class=\"line\">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class=\"line\">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class=\"line\">        autoGenerator.setStrategy(strategyConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        autoGenerator.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"完整版\"><a href=\"#完整版\" class=\"headerlink\" title=\"完整版\"></a>完整版</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 代码生成器</span></span><br><span class=\"line\">        AutoGenerator  autoGenerator = <span class=\"keyword\">new</span> AutoGenerator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 全局配置</span></span><br><span class=\"line\">        GlobalConfig gc = <span class=\"keyword\">new</span> GlobalConfig();</span><br><span class=\"line\">        <span class=\"comment\">//获得当前项目的路径</span></span><br><span class=\"line\">        String projectPath = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置生成路径</span></span><br><span class=\"line\">        gc.setOutputDir(projectPath + <span class=\"string\">\"/src/main/java\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//作者</span></span><br><span class=\"line\">        gc.setAuthor(<span class=\"string\">\"dyk\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//代码生成后是不是要打开文件所在的文件夹</span></span><br><span class=\"line\">        gc.setOpen(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//生成实体属性 Swagger2 注解</span></span><br><span class=\"line\">        <span class=\"comment\">// gc.setSwagger2(true);</span></span><br><span class=\"line\">        <span class=\"comment\">//会在mapper.xml生成一个基础的&lt;ResultMap&gt; 映射所有的字段</span></span><br><span class=\"line\">        gc.setBaseResultMap(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//同文件生成覆盖</span></span><br><span class=\"line\">        gc.setFileOverride(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//实体类名直接用表名  %s=表名</span></span><br><span class=\"line\">        gc.setEntityName(<span class=\"string\">\"%s\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//mapper接口名</span></span><br><span class=\"line\">        gc.setMapperName(<span class=\"string\">\"%sMapper\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//mapper.xml文件名</span></span><br><span class=\"line\">        gc.setXmlName(<span class=\"string\">\"%sMapper\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//业务逻辑接口名</span></span><br><span class=\"line\">        gc.setServiceName(<span class=\"string\">\"%sService\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//业务逻辑实现类名</span></span><br><span class=\"line\">        gc.setServiceImplName(<span class=\"string\">\"%sServiceImpl\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将全局配置设置到 AutoGenerator</span></span><br><span class=\"line\">        autoGenerator.setGlobalConfig(gc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//数据源</span></span><br><span class=\"line\">        DataSourceConfig dsc = <span class=\"keyword\">new</span> DataSourceConfig();</span><br><span class=\"line\">        <span class=\"comment\">//设置数据库类型</span></span><br><span class=\"line\">        dsc.setDbType(DbType.MYSQL);</span><br><span class=\"line\">        <span class=\"comment\">//连接的url</span></span><br><span class=\"line\">        dsc.setUrl(<span class=\"string\">\"jdbc:mysql://localhost:3306/db3?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//数据库用户名</span></span><br><span class=\"line\">        dsc.setUsername(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//数据库密码</span></span><br><span class=\"line\">        dsc.setPassword(<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//数据库驱动</span></span><br><span class=\"line\">        dsc.setDriverName(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将数据源配置设置到 AutoGenerator</span></span><br><span class=\"line\">        autoGenerator.setDataSource(dsc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//包信息</span></span><br><span class=\"line\">        PackageConfig pc = <span class=\"keyword\">new</span> PackageConfig();</span><br><span class=\"line\">        <span class=\"comment\">//包名</span></span><br><span class=\"line\">        pc.setParent(<span class=\"string\">\"com.blb\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置模块名</span></span><br><span class=\"line\"><span class=\"comment\">//        pc.setModuleName(\"generator\");</span></span><br><span class=\"line\">        pc.setController(<span class=\"string\">\"controller\"</span>);</span><br><span class=\"line\">        pc.setService(<span class=\"string\">\"service\"</span>);</span><br><span class=\"line\">        pc.setServiceImpl(<span class=\"string\">\"service.impl\"</span>);</span><br><span class=\"line\">        pc.setMapper(<span class=\"string\">\"mapper\"</span>);</span><br><span class=\"line\">        pc.setEntity(<span class=\"string\">\"entity\"</span>);</span><br><span class=\"line\">        autoGenerator.setPackageInfo(pc);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//配置策略</span></span><br><span class=\"line\">        StrategyConfig strategyConfig = <span class=\"keyword\">new</span> StrategyConfig();</span><br><span class=\"line\">        <span class=\"comment\">//表名的生成策略:下划线转驼峰</span></span><br><span class=\"line\">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class=\"line\">        <span class=\"comment\">//列名的生成策略：下划线转驼峰</span></span><br><span class=\"line\">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class=\"line\">        <span class=\"comment\">//支持lombok注解</span></span><br><span class=\"line\">        strategyConfig.setEntityLombokModel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在controller类上是否生成@Restcontroller</span></span><br><span class=\"line\">        strategyConfig.setRestControllerStyle(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//生成部分数据库里面的表对应的实体类，生成的表名</span></span><br><span class=\"line\">        strategyConfig.setInclude(<span class=\"string\">\"user\"</span>,<span class=\"string\">\"product\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//按前缀生成表</span></span><br><span class=\"line\">        <span class=\"comment\">//strategyConfig.setLikeTable(\"tbl_\");</span></span><br><span class=\"line\">        <span class=\"comment\">//设置表替换前缀</span></span><br><span class=\"line\">        <span class=\"comment\">//strategyConfig.setTablePrefix(\"tbl_\");</span></span><br><span class=\"line\">        autoGenerator.setStrategy(strategyConfig);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义配置</span></span><br><span class=\"line\">        InjectionConfig cfg = <span class=\"keyword\">new</span> InjectionConfig() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// to do nothing</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模板引擎是 velocity</span></span><br><span class=\"line\">         String templatePath = <span class=\"string\">\"/templates/mapper.xml.vm\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义输出配置</span></span><br><span class=\"line\">        List&lt;FileOutConfig&gt; focList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 自定义配置会被优先输出</span></span><br><span class=\"line\">        focList.add(<span class=\"keyword\">new</span> FileOutConfig(templatePath) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">outputFile</span><span class=\"params\">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> projectPath + <span class=\"string\">\"/src/main/resources/mapper/\"</span> + pc.getModuleName()</span><br><span class=\"line\">                        + <span class=\"string\">\"/\"</span> + tableInfo.getEntityName() + <span class=\"string\">\"Mapper\"</span> + StringPool.DOT_XML;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        cfg.setFileOutConfigList(focList);</span><br><span class=\"line\">        autoGenerator.setCfg(cfg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置模板</span></span><br><span class=\"line\">        TemplateConfig templateConfig = <span class=\"keyword\">new</span> TemplateConfig();</span><br><span class=\"line\">        <span class=\"comment\">//让已有的xml生成置空</span></span><br><span class=\"line\">        templateConfig.setXml(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        autoGenerator.setTemplate(templateConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行生成</span></span><br><span class=\"line\">        autoGenerator.execute();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["框架"],"tags":["MyBatis"]},{"title":"实践一下--跨域问题","url":"/PaulGeorge123.github.io/2021/08/25/%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B--%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 跨域问题</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-25_23-57-45.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>上文提到，目前项目都朝着前后端分离的方向发展，那前后端之间的数据通信便成为了不可避免的问题，这有 Axios 来帮助我们实现，但是今天要说的前后端之间的跨域问题。</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h3><h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题。</p>\n<p>其实产生跨域问题的罪魁祸首是<font color=#FF8C00>浏览器同源策略</font></p>\n<h4 id=\"浏览器同源策略\"><a href=\"#浏览器同源策略\" class=\"headerlink\" title=\"浏览器同源策略\"></a>浏览器同源策略</h4><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个 <font color=#FF8C00>origin</font> 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p>\n<h4 id=\"什么是同源？\"><a href=\"#什么是同源？\" class=\"headerlink\" title=\"什么是同源？\"></a>什么是同源？</h4><p>如果两个 URL 的 <font color=#FF8C00>protocol</font>、<font color=#FF8C00>port (en-US)</font> (如果有指定的话)和 <font color=#FF8C00>host</font> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p>\n<p><strong>举个荔枝</strong></p>\n<p>与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">URL</th>\n<th align=\"left\">结果</th>\n<th align=\"left\">原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>http://store.company.com/dir2/other.html</code></td>\n<td align=\"left\"><font color=#008000>同源</font></td>\n<td align=\"left\">只有路径不同</td>\n</tr>\n<tr>\n<td align=\"left\"><code>http://store.company.com/dir/inner/another.html</code></td>\n<td align=\"left\"><font color=#008000>同源</font></td>\n<td align=\"left\">只有路径不同</td>\n</tr>\n<tr>\n<td align=\"left\"><code>https://store.company.com/secure.html</code></td>\n<td align=\"left\"><font color=#FF0000>失败</font></td>\n<td align=\"left\">协议不同</td>\n</tr>\n<tr>\n<td align=\"left\"><code>http://store.company.com:81/dir/etc.html</code></td>\n<td align=\"left\"><font color=#FF0000>失败</font></td>\n<td align=\"left\">端口不同 ( <code>http://</code> 默认端口是80)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>http://news.company.com/dir/other.html</code></td>\n<td align=\"left\"><font color=#FF0000>失败</font></td>\n<td align=\"left\">主机不同（ IP 地址不同）</td>\n</tr>\n</tbody></table>\n<p><strong>举个荔枝</strong></p>\n<p>访问：<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> </p>\n<p>由下图可以看出，虽然 get 请求能发出去，有返回的结果，但是结果被浏览器拦截了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-05-23.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"解决跨域\"><a href=\"#解决跨域\" class=\"headerlink\" title=\"解决跨域\"></a>解决跨域</h3><h4 id=\"为什么会发生跨域问题\"><a href=\"#为什么会发生跨域问题\" class=\"headerlink\" title=\"为什么会发生跨域问题\"></a>为什么会发生跨域问题</h4><p>当<strong>协议、子域名、主域名、端口号</strong>中任意一个不相同时，都算作不同域，不同域之间的网络请求就会触发跨域问题。跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是<font color=#FF0000>结果被浏览器拦截了</font></p>\n<h4 id=\"解决跨域问题的三种思路\"><a href=\"#解决跨域问题的三种思路\" class=\"headerlink\" title=\"解决跨域问题的三种思路\"></a>解决跨域问题的三种思路</h4><p>1、客户端浏览器解除跨域限制（<font color=#FF0000>×</font>）【理论上可以但是不现实】</p>\n<p>2、发送JSONP请求替代XHR请求（<font color=#FF8C00>-</font>）【并不能适用所有的请求方式，不推荐】</p>\n<p>3、修改服务器端（<font color=#008000>√</font>）【包括HTTP服务器和应用服务器，推荐】</p>\n<h4 id=\"客户端浏览器解除跨域限制\"><a href=\"#客户端浏览器解除跨域限制\" class=\"headerlink\" title=\"客户端浏览器解除跨域限制\"></a>客户端浏览器解除跨域限制</h4><p>浏览器会根据同源策略来判断一个请求是不是跨域请求。</p>\n<ol>\n<li><font color=#FF0000>非跨域请求</font>，在请求头中会只包含请求的主机名。【host】</li>\n<li><font color=#008000>跨域请求</font>，在请求头中会既包含要请求的主机名还包括当前的源主机名，如果这两者不一致，那就是跨域请求了。【host、origin】</li>\n</ol>\n<h4 id=\"浏览器对请求的分类\"><a href=\"#浏览器对请求的分类\" class=\"headerlink\" title=\"浏览器对请求的分类\"></a><strong>浏览器对请求的分类</strong></h4><p>在HTTP1.1 协议中的，请求方法分为 GET、POST、PUT、DELETE、HEAD、TRACE、OPTIONS、CONNECT  八种，浏览器根据这些请求方法和请求类型将请求划分为简单请求和非简单请求。</p>\n<ol>\n<li><p><font color=#FF8C00>简单请求</font>：浏览器先发送（执行）请求然后再判断是否跨域。</p>\n<p>请求方法为 GET、POST、HEAD，请求头header中无自定义的请求头信息，请求类型Content-Type 为 text/plain、multipart/form-data、application/x-www-form-urlencoded 的请求都是简单请求。</p>\n</li>\n<li><p><font color=#FF8C00>非简单请求</font>：浏览器先发送预检命令（OPTIONS方法），检查通过后才发送真正的数据请求。【”预检”请求】</p>\n<p>预检命令会发送自定义头为 Access-Control-Request-Headers: content-type （访问控制请求头：内容类型）的请求到服务器，根据响应头的中的 “Access-Control-Allow-Headers”: “Content-Type” 判断服务器是否允许跨域访问。预检命令是可以缓存，服务器端设置 “Access-Control-Max-Age”: “3600”，这样后面发送同样的跨域请求就不需要先发送预检命令了。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"前后端分离跨域\"><a href=\"#前后端分离跨域\" class=\"headerlink\" title=\"前后端分离跨域\"></a>前后端分离跨域</h3><p><strong>Cross Origin Resource Share (CORS)</strong>【跨域源资源共享】</p>\n<p><strong>请求头主要包括</strong></p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Origin</strong></td>\n<td>Origin头在跨域请求或预先请求中，标明发起跨域请求的源域名。</td>\n</tr>\n<tr>\n<td><strong>Access-Control-Request-Method</strong></td>\n<td>Access-Control-Request-Method头用于表明跨域请求使用的实际HTTP方法</td>\n</tr>\n<tr>\n<td><strong>Access-Control-Request-Headers</strong></td>\n<td>Access-Control-Request-Headers用于在预先请求时，告知服务器要发起的跨域请求中会携带的请求头信息</td>\n</tr>\n<tr>\n<td><strong>with-credentials</strong></td>\n<td><strong>跨域请求携带cookie</strong></td>\n</tr>\n</tbody></table>\n<p><strong>响应头主要包括</strong></p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Access-Control-Allow-Origin</strong></td>\n<td>Access-Control-Allow-Origin头中携带了服务器端验证后的允许的跨域请求域名，可以是一个具体的域名或是一个*（表示任意域名）。</td>\n</tr>\n<tr>\n<td><strong>Access-Control-Expose-Headers</strong></td>\n<td>Access-Control-Expose-Headers头用于允许返回给跨域请求的响应头列表，在列表中的响应头的内容，才可以被浏览器访问。</td>\n</tr>\n<tr>\n<td><strong>Access-Control-Max-Age</strong></td>\n<td>Access-Control-Max-Age用于告知浏览器可以将预先检查请求返回结果缓存的时间，在缓存有效期内，浏览器会使用缓存的预先检查结果判断是否发送跨域请求。</td>\n</tr>\n<tr>\n<td><strong>Access-Control-Allow-Methods</strong></td>\n<td>Access-Control-Allow-Methods用于告知浏览器可以在实际发送跨域请求时，可以支持的请求方法，可以是一个具体的方法列表或是一个*（表示任意方法）。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"SpringBoot-解决-CORS\"><a href=\"#SpringBoot-解决-CORS\" class=\"headerlink\" title=\"SpringBoot 解决 CORS\"></a>SpringBoot 解决 CORS</h3><h4 id=\"1、注解-CrossOrigin-（局部跨域）\"><a href=\"#1、注解-CrossOrigin-（局部跨域）\" class=\"headerlink\" title=\"1、注解 @CrossOrigin （局部跨域）\"></a>1、注解 @CrossOrigin （局部跨域）</h4><ol>\n<li>在类上使用 @CrossOrigin 注解，表示该类的所有方法允许跨域</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pass\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin</span>(originPatterns = <span class=\"string\">\"*\"</span>, methods = &#123;GET, POST, PUT, DELETE&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PassController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>在类上使用 @CrossOrigin 注解，以细粒度的去控制某一请求 API 是否支持跨域</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/pass\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PassController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"comment\">//更小的解决跨域 设置只能某些地址访问</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin</span>(originPatterns = <span class=\"string\">\"http://localhost:8080\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、配置-CorsFilter-全局跨域\"><a href=\"#2、配置-CorsFilter-全局跨域\" class=\"headerlink\" title=\"2、配置 CorsFilter (全局跨域)\"></a>2、配置 CorsFilter (全局跨域)</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebGlobalConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CorsFilter <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建CorsConfiguration对象后添加配置</span></span><br><span class=\"line\">        CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">//设置放行哪些原始域</span></span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些原始请求头部信息</span></span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//暴露哪些头部信息</span></span><br><span class=\"line\">        config.addExposedHeader(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些请求方式</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">\"GET\"</span>);     <span class=\"comment\">//get</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">\"PUT\"</span>);     <span class=\"comment\">//put</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">\"POST\"</span>);    <span class=\"comment\">//post</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">\"DELETE\"</span>);  <span class=\"comment\">//delete</span></span><br><span class=\"line\">        <span class=\"comment\">//corsConfig.addAllowedMethod(\"*\");     //放行全部请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//是否发送Cookie</span></span><br><span class=\"line\">        config.setAllowCredentials(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 添加映射路径</span></span><br><span class=\"line\">        UrlBasedCorsConfigurationSource corsConfigurationSource =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        corsConfigurationSource.registerCorsConfiguration(<span class=\"string\">\"/**\"</span>, config);</span><br><span class=\"line\">        <span class=\"comment\">//返回CorsFilter</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CorsFilter(corsConfigurationSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、重写-WebMvcConfigurer（全局跨域）\"><a href=\"#3、重写-WebMvcConfigurer（全局跨域）\" class=\"headerlink\" title=\"3、重写 WebMvcConfigurer（全局跨域）\"></a>3、重写 WebMvcConfigurer（全局跨域）</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorsConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重写 WebMvcConfigurer下的 addCorsMappings方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加映射路径</span></span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">\"/api/pass\"</span>)</span><br><span class=\"line\">\t            <span class=\"comment\">//addMapping后还可以继续配置 </span></span><br><span class=\"line\">        \t\t.allowedOrigins(<span class=\"string\">\"http://localhost:8080\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">//是否发送Cookie</span></span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                <span class=\"comment\">//设置放行哪些原始域   SpringBoot2.4.4下低版本使用.allowedOrigins(\"*\")    </span></span><br><span class=\"line\">                .allowedOriginPatterns(<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">//放行哪些请求方式</span></span><br><span class=\"line\">                .allowedMethods(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"POST\"</span>, <span class=\"string\">\"PUT\"</span>, <span class=\"string\">\"DELETE\"</span>&#125;)</span><br><span class=\"line\">                <span class=\"comment\">//.allowedMethods(\"*\") //或者放行全部</span></span><br><span class=\"line\">                <span class=\"comment\">//放行哪些原始请求头部信息</span></span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">                <span class=\"comment\">//暴露哪些原始请求头部信息</span></span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、拦截器-Filter-实现\"><a href=\"#4、拦截器-Filter-实现\" class=\"headerlink\" title=\"4、拦截器 Filter 实现\"></a>4、拦截器 Filter 实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorsFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletResponse res = (HttpServletResponse) response;</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET, POST, DELETE, PUT\"</span>);</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((HttpServletRequest) request).getMethod().equals(<span class=\"string\">\"OPTIONS\"</span>)) &#123;</span><br><span class=\"line\">            response.getWriter().println(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"拓展一下\"><a href=\"#拓展一下\" class=\"headerlink\" title=\"拓展一下\"></a>拓展一下</h3><h4 id=\"Nginx-反向代理实现跨域\"><a href=\"#Nginx-反向代理实现跨域\" class=\"headerlink\" title=\"Nginx 反向代理实现跨域\"></a>Nginx 反向代理实现跨域</h4><p>打开 <code>Nginx所在目录/conf/nginx.conf</code>，将转发请求的配置粘贴到 <code>http { ... }</code> 中</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听本地端口 80</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 本地域名</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> my-server.com;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Origin'</span> <span class=\"string\">'*'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Methods'</span> <span class=\"string\">'GET, POST, OPTIONS'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Headers'</span> <span class=\"string\">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Max-Age'</span> <span class=\"number\">1728000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Content-Type'</span> <span class=\"string\">'text/plain; charset=utf-8'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Content-Length'</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">return</span> <span class=\"number\">204</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Origin'</span> <span class=\"string\">'*'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Methods'</span> <span class=\"string\">'GET, POST, OPTIONS'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Headers'</span> <span class=\"string\">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Expose-Headers'</span> <span class=\"string\">'Content-Length,Content-Range'</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            <span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Origin'</span> <span class=\"string\">'*'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Methods'</span> <span class=\"string\">'GET, POST, OPTIONS'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Allow-Headers'</span> <span class=\"string\">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class=\"line\">                <span class=\"attribute\">add_header</span> <span class=\"string\">'Access-Control-Expose-Headers'</span> <span class=\"string\">'Content-Length,Content-Range'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 将请求转发到指定的域名</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://www.baidu.com/;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释一下</strong></p>\n<p><code>my-server.com</code> 是本地劫持的域名，<code>www.baidu.com</code> 是目标域名，我们请求 <code>my-server.com</code>  的时候，Nginx 就会将请求转发到 <code>www.baidu.com</code> 上。</p>\n<p>访问成功~哈哈</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-19-13.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-20-43.png\" alt=\"\"></p>\n<p><font color=#008000>年轻的我也能成为改变世界的动力！</font></p>\n","categories":["实践篇"],"tags":["Web"]},{"title":"实践一下--SpringBoot配置","url":"/PaulGeorge123.github.io/2021/08/06/%E5%AE%9E%E8%B7%B5--SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","content":"<blockquote>\n<p>实践是检验真理的唯一标准</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 SpringBoot配置</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-07_19-33-18.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>首先我们得知道为什么要使用SpringBoot，其优点有哪些？</font></p>\n<p>比如说：</p>\n<ol>\n<li>简化依赖【在 pom 文件中添加相关依赖即可】</li>\n<li><font color=#008000>简化配置【一个普通的类，只需要 @Bean 注解即可成为一个 Bean 让 Spring 去管理】（√）</font></li>\n<li>简化部署【Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包】</li>\n<li>简化监控【可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数】</li>\n</ol>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"SpringBoot-默认配置文件\"><a href=\"#SpringBoot-默认配置文件\" class=\"headerlink\" title=\"SpringBoot 默认配置文件\"></a>SpringBoot 默认配置文件</h3><ul>\n<li>SpringBoot使用默认的全局的配置文件：<code>application.properties</code>/<code>application.yml</code></li>\n<li>配置文件名固定是是<code>application</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">application.properties</span><br><span class=\"line\">\t语法结构: key=value</span><br><span class=\"line\"></span><br><span class=\"line\">application.yml</span><br><span class=\"line\">\t语法结构: key：空格 value</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>个人更加的偏向于使用 yml 的形式，注意 key 后面的<font color=#008000>空格</font></p>\n</blockquote>\n<br/>\n\n<h3 id=\"SpringBoot-配置文件的位置\"><a href=\"#SpringBoot-配置文件的位置\" class=\"headerlink\" title=\"SpringBoot 配置文件的位置\"></a>SpringBoot 配置文件的位置</h3><p>springboot启动会扫描以下位置的<code>application.properties</code>/<code>application.yml</code>文件作为其默认配置文件：</p>\n<ul>\n<li>优先级1：项目路径下的 config 文件夹配置文件</li>\n<li>优先级2：项目路径下配置文件</li>\n<li>优先级3：资源路径下的 config 文件夹配置文件</li>\n<li><font color=#008000>优先级4：资源路径下配置文件（√）</font></li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</li>\n<li>当两个配置文件同时存在的时候，相同的配置会优先加载<code>properties</code>配置文件，多余的配置的会互补配置；</li>\n</ul>\n<br/>\n\n\n\n<h3 id=\"SpringBoot-多环境切换\"><a href=\"#SpringBoot-多环境切换\" class=\"headerlink\" title=\"SpringBoot 多环境切换\"></a>SpringBoot 多环境切换</h3><p>实际开发中，我们针对不同的应用场景，可能有不同的环境，不同的配置文件</p>\n<p><code>profile</code>就是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p>\n<p>涉及两种实现方式：</p>\n<h4 id=\"方式一：多配置文件\"><a href=\"#方式一：多配置文件\" class=\"headerlink\" title=\"方式一：多配置文件\"></a>方式一：多配置文件</h4><p>我们再编写配置文件时，文件名可以是<code>application-{profile}.properties/yml</code>，用来指定多个不同的环境版本；</p>\n<p><code>application.yml</code> 【代表主环境】</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /src/main/resources/application.yml</span><br><span class=\"line\"># 默认使用配置</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">    active: dev</span><br></pre></td></tr></table></figure>\n\n<p><code>application-dev.yml</code> 【代表开发环境配置】</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /src/main/resources/application-dev.yml</span><br><span class=\"line\">server:</span><br><span class=\"line\">  #  端口号</span><br><span class=\"line\">  port: 8001</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>application-test.yml</code> 【代表测试环境配置】</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /src/main/resources/application-test.yml</span><br><span class=\"line\">server:</span><br><span class=\"line\">  #  端口号</span><br><span class=\"line\">  port: 8002</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果未加指定，它默认使用<code>application.yml</code>主配置文件；</p>\n<h4 id=\"方式二：一个配置文件【yaml的多文档块，不建议】\"><a href=\"#方式二：一个配置文件【yaml的多文档块，不建议】\" class=\"headerlink\" title=\"方式二：一个配置文件【yaml的多文档块，不建议】\"></a>方式二：一个配置文件【yaml的多文档块，不建议】</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">server:  </span><br><span class=\"line\">\tport: 8080</span><br><span class=\"line\">#选择要激活那个环境块</span><br><span class=\"line\">spring:  </span><br><span class=\"line\">\tprofiles:    </span><br><span class=\"line\">\t\tactive: prod</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">---</span><br><span class=\"line\">server:  </span><br><span class=\"line\">\tport: 8081</span><br><span class=\"line\">spring:  </span><br><span class=\"line\">\tprofiles: dev #配置环境名称dev</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">server:  </span><br><span class=\"line\">\tport: 8082</span><br><span class=\"line\">spring:  </span><br><span class=\"line\">\tprofiles: prod  #配置环境名称prod</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n\n\n<h3 id=\"SpringBoot-加载指定的配置文件\"><a href=\"#SpringBoot-加载指定的配置文件\" class=\"headerlink\" title=\"SpringBoot 加载指定的配置文件\"></a>SpringBoot 加载指定的配置文件</h3><p>通过<code>@configurationProperties</code>注解默认从全局配置文件中获取值</p>\n<ul>\n<li>此时配置文件名必须为<code>application</code>才能被spring认出</li>\n<li>其实我们可以通过<code>@PropertySource</code>指定加载的配置文件，可以自定义文件名</li>\n</ul>\n<br/>\n\n\n\n<h3 id=\"SpringBoot-配置类\"><a href=\"#SpringBoot-配置类\" class=\"headerlink\" title=\"SpringBoot 配置类\"></a>SpringBoot 配置类</h3><h4 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h4><p>Spring Boot 推荐使用 java 配置完全代替 XML 配置，java 配置是通过 @Configration 和 @Bean 注解实现的。二者作用如下：</p>\n<ul>\n<li>@Configration 注解：声明当前类是一个配置类，相当于 Spring 中的一个 XML 文件</li>\n<li>@ComponentScan：作用就是根据定义的扫描路径，把符合扫描规则的类装配到spring容器中</li>\n<li>@Bean 注解：作用在方法上，声明当前方法的返回值是一个 Bean</li>\n</ul>\n<p>@Bean 和 @Autowired 做了两件完全不同的事情：</p>\n<ol>\n<li>@Bean 告诉 Spring：“这是这个类的一个实例，请保留它，并在我请求时将它还给我”。</li>\n<li>@Autowired 说：“请给我一个这个类的实例，例如，一个我之前用@Bean注释创建的实例”。</li>\n</ol>\n<h4 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h4><ol>\n<li>@ConditionalOnBean：当容器里有指定Bean的条件下</li>\n<li>@ConditionalOnMissingBean：当容器里没有指定 Bean 的情况下</li>\n<li>@ConditionalOnMissingClass：当容器里没有指定类的情况下、</li>\n<li>@ConditionalOnProperty：指定的属性是否有指定的值</li>\n<li>@EnableConfigurationProperties的作用: 使 @ConfigurationProperties 注解的类生效。</li>\n<li>@Scope(“prototype”) 表示每次获得 bean 都会生成一个新的对象【多例】</li>\n<li>@AutoConfigureAfter 在加载配置的类之后再加载当前类</li>\n</ol>\n<h4 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h4><p><strong>涉及注解：</strong></p>\n<ul>\n<li>@EnableConfigurationProperties()【启用配置属性，指定配置类的路径或者具体类】</li>\n<li>@ConfigurationProperties()【配置属性，去寻找配置文件】</li>\n<li>@Configuration()【配置，声明这是一个配置类】</li>\n<li>@Component()【组件，声明这是一个组件】</li>\n<li>@Data()【lombok插件，生成 get 、set】</li>\n</ul>\n<p><strong>一、引入 SpringBoot properties 内容处理器依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>二、编写配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"mall.thread\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolConfigProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer coreSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer keepAliveTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三、properties 文件中可以联想到</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">#配置线程池</span><br><span class=\"line\">mall.thread.coreSize=20</span><br><span class=\"line\">mall.thread.maxSize=200</span><br><span class=\"line\">mall.thread.keepAliveTime=10</span><br></pre></td></tr></table></figure>\n\n<p><strong>四、在类中使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(ThreadPoolConfigProperties<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">Configuration</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">MyThreadConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ThreadPoolExecutor <span class=\"title\">threadPoolExecutor</span><span class=\"params\">(ThreadPoolConfigProperties pool)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">                pool.getCoreSize(),</span><br><span class=\"line\">                pool.getMaxSize(),</span><br><span class=\"line\">                pool.getKeepAliveTime(),</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> LinkedBlockingDeque&lt;&gt;(<span class=\"number\">100000</span>),</span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["实践篇"],"tags":["SpringBoot"]},{"title":"每日一练--冒泡排序（Bubble Sort）","url":"/PaulGeorge123.github.io/2021/06/04/%E6%8E%92%E5%BA%8F--%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下冒泡排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-54-38.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>快速排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(n²)</code></li>\n<li>空间复杂度：<code>O(1)</code></li>\n<li>稳定性：<font color=#008000>稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。可以理解为<strong>每次都能够将最大的数字找到</strong>。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif\" target=\"_blank\" rel=\"noopener\">冒泡排序动图演示</a></p>\n<a id=\"more\"></a>\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>重复步骤1~3，直到排序完成。</li>\n</ol>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><blockquote>\n<p>第一种，也是最为常见的一种（双重循环）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外层循环来控制所需找到最大值的次数，内层循环用来比较相邻的两个值之间的大小，若前面的值大于后面的值，则两个元素之间进行位置交换。</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次外层循环所得到的都是最大元素的位置。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sort1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; array.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    temp = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>, <span class=\"number\">83</span>, <span class=\"number\">94</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">73</span>, <span class=\"number\">85</span>, <span class=\"number\">82</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"startTime = \" + startTime);</span></span><br><span class=\"line\">        sort(array);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"endTime = \" + endTime);</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"time = \"</span> + (endTime-startTime));</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>在相邻元素相等时，它们并不会交换位置，所以，冒泡排序是<strong>稳定排序</strong>。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>冒泡排序思路简单，代码也简单，特别<strong>适合小数据</strong>的排序。但是，由于算法复杂度较高，在数据量大的时候不适合使用。</p>\n<hr>\n<blockquote>\n<p>第二种，对于外层循环的一种优化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sort2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//有序标记，每一轮的初始是true</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; array.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    temp = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                    <span class=\"comment\">//有元素交换，所以不是有序，标记变为false</span></span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>, <span class=\"number\">83</span>, <span class=\"number\">94</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">73</span>, <span class=\"number\">85</span>, <span class=\"number\">82</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        sort(array);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"time2 = \"</span> + (endTime - startTime));</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">23</span>, <span class=\"number\">36</span>, <span class=\"number\">73</span>, <span class=\"number\">82</span>, <span class=\"number\">83</span>, <span class=\"number\">85</span>, <span class=\"number\">94</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>在内层循环添加一个flag默认为true（也就是默认本次不会发生元素交换），当在外层循环某次执行后，数组元素已经有序，但是外层还有循环次数的时候，flag可以跳出外层循环，缩短排序时间。</p>\n<hr>\n<blockquote>\n<p>第三种，基于第二种优化方式对于内层循环的次数优化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sort3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"comment\">//记录最后一次交换的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastExchangeIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//无序数列的边界，每次比较只需要比到这里为止</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sortBorder = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//有序标记，每一轮的初始是true</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; sortBorder; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    temp = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                    <span class=\"comment\">//有元素交换，所以不是有序，标记变为false</span></span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//把无序数列的边界更新为最后一次交换元素的位置</span></span><br><span class=\"line\">                    lastExchangeIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sortBorder = lastExchangeIndex;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>, <span class=\"number\">83</span>, <span class=\"number\">94</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">73</span>, <span class=\"number\">85</span>, <span class=\"number\">82</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        sort(array);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"time3 = \"</span> + (endTime-startTime));</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>在外层循环添加一个标记用来–记录最后一次交换的位置，基于对内层循环的优化基础，外层循环每次确定无序数列的边界位置，这样可以减少在无需情况下内层循环的时间。</p>\n<hr>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p><font color=#FF8C00>在数据完全有序的时候展现出最优时间复杂度，为O(n)。其他情况下，几乎总是O(n^2 )</font></p>\n","categories":["排序算法"],"tags":["进阶","交换排序"]},{"title":"每日一练--希尔排序（Shell Sort）","url":"/PaulGeorge123.github.io/2021/06/07/%E6%8E%92%E5%BA%8F--%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下希尔排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-52-29.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>希尔排序：</strong></p>\n<ul>\n<li>时间复杂度：当增量（<strong>gap</strong> ）为1时，希尔排序退化成了直接插入排序，此时的时间复杂度为<code>O(N²)</code>，而Hibbard增量的希尔排序的时间复杂度为<code>O(N3/2)</code>。</li>\n<li>空间复杂度：<code>O(1)</code></li>\n<li>稳定性：<font color=#FF0000>不稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>插入排序是效率低下是因为其移动元素每次只能移动一位，当排序元素的规模较大时，需要将元素一位一位地从一端移动到另一端。希尔排序正是基于此原理来优化、提高插入排序的效率。通过指定步长step，将原数组分为step个互相独立子数组，然后通过插入排序对这些子数组分别进行排序(即分组排序)，这时我们称其为<strong>step有序数组</strong>。当step最终为<strong>1</strong>做最后一次step有序时，就是我们平常所熟悉的插入排序了，由于该数组已经多次被较大的step进行分组排序了，此时只需要较少次数的元素移动就可以实现整个数组全局有序。</p>\n<p><a href=\"https://pic4.zhimg.com/v2-3c7ddb59df2d21b287e42a7b908409cb_b.webp\" target=\"_blank\" rel=\"noopener\">希尔排序动图演示</a></p>\n<a id=\"more\"></a>\n\n<h4 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/11ba6646605ae3996ede9ab2f0f6ae9b.jpg\" style=\"zoom: 67%;\" />\n\n\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>按照一定的<strong>增量 gap</strong> ，先将待排序表分割成若干个特殊子表，首个gap取值为数组长度一半（地板除）；</li>\n<li>对于各个子表，进行<strong>直接插入排序</strong>；</li>\n<li>随后 <strong>缩小 gap</strong> ，重复上述过程，直到 gap = 1 为止。</li>\n</ol>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//增量每次都/2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> step = arr.length / <span class=\"number\">2</span>; step &gt; <span class=\"number\">0</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//从增量那组开始进行插入排序，直至完毕</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//得到分组下标对应的值</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">                <span class=\"comment\">//临时变量，用于保存步长下标值</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// j - step 就是代表与它同组隔壁的元素,如果分组前面大于后面的</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j - step &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j - step] &gt; temp) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将分组前面的值赋给后面的</span></span><br><span class=\"line\">                    arr[j] = arr[j - step];</span><br><span class=\"line\">                    <span class=\"comment\">//下标减去步长，来到分组前面的下标</span></span><br><span class=\"line\">                    j -= step;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果分组之间有过交换，那么将分组后面的值发给分组前面的值</span></span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">        shellSort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，</p>\n<p>但在不同的插入排序过程中，<strong>相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱</strong>。</p>\n<p>所以 希尔shell排序是<strong>不稳定</strong>的。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ul>\n<li><p>Shell排序虽然快，但是毕竟是插入排序，其数量级并没有<strong>快速排序</strong>O(n㏒n)快；</p>\n</li>\n<li><p>Shell排序在大量数据面前不是一个好的算法，但是，中小型规模的数据完全可以使用它；</p>\n</li>\n<li><p>希尔排序只是适用于<strong>线性表为顺序存储</strong>的i情况，<strong>不适用于链表</strong>。</p>\n</li>\n</ul>\n","categories":["排序算法"],"tags":["进阶","插入排序"]},{"title":"每日一练--堆排序（Heap Sort）","url":"/PaulGeorge123.github.io/2021/06/09/%E6%8E%92%E5%BA%8F--%E5%A0%86%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下堆排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-49-36.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>堆排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(nlogn)</code><ul>\n<li>初始化建堆：<code>O(n)</code></li>\n<li>排序重建堆: <code>nlog(n)</code></li>\n</ul>\n</li>\n<li>空间复杂度：<code>O(1)</code></li>\n<li>稳定性：<font color=#FF0000>不稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>堆是一种特殊的完全二叉树（complete binary tree）。完全二叉树的一个“优秀”的性质是，除了最底层之外，每一层都是满的，这使得堆可以利用数组来表示，每一个结点对应数组中的一个元素。利用大顶堆(小顶堆)堆顶记录的是最大关键字(最小关键字)这一特性，使得每次从无序中选择最大记录(最小记录)变得简单。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif\" target=\"_blank\" rel=\"noopener\">堆排序动图演示1</a></p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/Sorting_heapsort_anim.gif\" target=\"_blank\" rel=\"noopener\">堆排序动图演示2</a></p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>最大堆调整（Max-Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点；</li>\n<li>创建最大堆（Build-Max-Heap）：将堆所有数据重新排序，使其成为最大堆；</li>\n<li>堆排序（Heap-Sort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算 继续进行下面的讨论前，需要注意的一个问题是：数组都是 Zero-Based，这就意味着我们的堆数据结构模型要发生改变；</li>\n</ol>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h5 id=\"什么是堆？\"><a href=\"#什么是堆？\" class=\"headerlink\" title=\"什么是堆？\"></a>什么是堆？</h5><p>堆一般指的是二叉堆，顾名思义，二叉堆是完全二叉树或者近似完全二叉树</p>\n<h5 id=\"堆的性质\"><a href=\"#堆的性质\" class=\"headerlink\" title=\"堆的性质\"></a>堆的性质</h5><ul>\n<li>是一棵完全二叉树</li>\n<li>每个节点的值都大于或等于其子节点的值，为最大堆；反之为最小堆。</li>\n</ul>\n<h5 id=\"堆的存储\"><a href=\"#堆的存储\" class=\"headerlink\" title=\"堆的存储\"></a>堆的存储</h5><p>一般用数组来表示堆，下标为 i 的结点的父结点下标为(i-1)/2；其左右子结点分别为 (2i + 1)、(2i + 2)</p>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 堆排序的主要入口方法，共两步。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  第一步：将数组堆化</span></span><br><span class=\"line\"><span class=\"comment\">         *  beginIndex = 第一个非叶子节点。</span></span><br><span class=\"line\"><span class=\"comment\">         *  从第一个非叶子节点开始即可。无需从最后一个叶子节点开始。</span></span><br><span class=\"line\"><span class=\"comment\">         *  叶子节点可以看作已符合堆要求的节点，根节点就是它自己且自己以下值为最大。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> beginIndex = (len - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = beginIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            maxHeapify(i, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 第二步：对堆化数据排序</span></span><br><span class=\"line\"><span class=\"comment\">         * 每次都是移出最顶层的根节点A[0]，与最尾部节点位置调换，同时遍历长度 - 1。</span></span><br><span class=\"line\"><span class=\"comment\">         * 然后从新整理被换到根节点的末尾元素，使其符合堆的特性。</span></span><br><span class=\"line\"><span class=\"comment\">         * 直至未排序的堆长度为 0。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            swap(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            maxHeapify(<span class=\"number\">0</span>, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整索引为 index 处的数据，使其符合堆的特性。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 需要堆化处理的数据的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> len   未排序的堆（数组）的长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">maxHeapify</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 左子节点索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> li = (index &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 右子节点索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ri = li + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 子节点值最大索引，默认左子节点。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cMax = li;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (li &gt; len) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 左子节点索引超出计算范围，直接返回。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断左右子节点，哪个较大。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ri &lt;= len &amp;&amp; arr[ri] &gt; arr[li]) &#123;</span><br><span class=\"line\">            cMax = ri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[cMax] &gt; arr[index]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果父节点被子节点调换，</span></span><br><span class=\"line\">            swap(cMax, index);</span><br><span class=\"line\">            <span class=\"comment\">// 则需要继续判断换下后的父节点是否符合堆的特性。</span></span><br><span class=\"line\">            maxHeapify(cMax, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试用例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HeapSort(arr).sort();</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>堆排序存在大量的筛选和移动过程，属于<strong>不稳定</strong>的排序算法。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>堆排序在建立堆和调整堆的过程中会产生比较大的开销，在元素少的时候并不适用。但是，在元素比较多的情况下，还是不错的一个选择。尤其是在解决诸如“前n大的数”一类问题时，几乎是首选算法。</p>\n<p>堆排序操作过程中其运行时间主要耗费在建初始堆和调整建新堆时进行的反复“筛选”上。</p>\n","categories":["排序算法"],"tags":["进阶","选择排序"]},{"title":"每日一练--归并排序（Merge Sort）","url":"/PaulGeorge123.github.io/2021/06/10/%E6%8E%92%E5%BA%8F--%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下归并排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-47-54.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>归并排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(nlogn)</code></li>\n<li>空间复杂度：<code>O(n)</code></li>\n<li>稳定性：<font color=#008000>稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>归并排序，是创建在归并操作上的一种有效的排序算法。算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。归并排序思路简单，速度仅次于<strong>快速排序</strong>，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif\" target=\"_blank\" rel=\"noopener\">归并排序动图演示</a></p>\n<p><a href=\"https://pic4.zhimg.com/v2-a29c0dd0186d1f8cef3c5ebdedf3e5a3_b.webp\" target=\"_blank\" rel=\"noopener\">递归法动图演示</a></p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><p><strong>归并排序是用分治思想</strong></p>\n<ol>\n<li><strong>分解（Divide）</strong>：将n个元素分成个含n/2个元素的子序列。</li>\n<li><strong>解决（Conquer）</strong>：用合并排序法对两个子序列递归的排序。</li>\n<li><strong>合并（Combine）</strong>：合并两个已排序的子序列已得到排序结果。</li>\n</ol>\n<p><strong>递归法</strong></p>\n<ul>\n<li>① 将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li>\n<li>② 将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素</li>\n<li>③ 重复步骤②，直到所有元素排序完毕</li>\n</ul>\n<p><strong>总结：</strong>先分组，再归并</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1557906108-5066-20161218163120151-452283750.png\" style=\"zoom: 33%;\" />\n\n<hr>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 归并排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\">        internalMergeSort(arr, temp, <span class=\"number\">0</span>, arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">internalMergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span>[] temp, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//当left==right的时，已经不需要再划分了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left&lt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> middle = (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//左子数组</span></span><br><span class=\"line\">            internalMergeSort(arr, temp, left, middle);</span><br><span class=\"line\">            <span class=\"comment\">//右子数组</span></span><br><span class=\"line\">            internalMergeSort(arr, temp, middle+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">            <span class=\"comment\">//合并两个子数组</span></span><br><span class=\"line\">            mergeSortedArray(arr, temp, left, middle, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 合并两个有序子序列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSortedArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span>[] temp, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> middle, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=middle+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=middle &amp;&amp; j&lt;=right)&#123;</span><br><span class=\"line\">            temp[k++] = arr[i] &lt;= arr[j] ? arr[i++] : arr[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;=middle)&#123;</span><br><span class=\"line\">            temp[k++] = arr[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( j&lt;=right)&#123;</span><br><span class=\"line\">            temp[k++] = arr[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把数据复制回原数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;k; ++i)&#123;</span><br><span class=\"line\">            arr[left+i] = temp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">        merge_sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>因为我们在遇到相等的数据的时候必然是按顺序“复刻”到辅助数组temp[]上的，所以，归并排序同样是<strong>稳定</strong>算法。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>归并排序在数据量比较大的时候也有较为出色的表现（效率上），但是，其空间复杂度O(n)使得在数据量特别大的时候（例如，1千万数据）几乎不可接受。</p>\n","categories":["排序算法"],"tags":["进阶","归并排序"]},{"title":"每日一练--快速排序（Quick Sort）","url":"/PaulGeorge123.github.io/2021/06/05/%E6%8E%92%E5%BA%8F--%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下快速排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-54-13.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>快速排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(nlogn)</code></li>\n<li>空间复杂度：<code>O(logn)</code></li>\n<li>稳定性：<font color=#FF0000>不稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p><strong>快排</strong>的性能在所有排序算法里面是<strong>最好</strong>的排序算法。数据规模越大快速排序的性能越优。快排在极端情况下会退化成 <code>O(n2)</code> 的算法，因此假如在提前得知处理数据可能会出现极端情况的前提下，可以选择使用较为稳定的<strong>归并排序</strong>。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif\" target=\"_blank\" rel=\"noopener\">快速排序动图演示</a></p>\n<a id=\"more\"></a>\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><p>快排运用了二分的思想:</p>\n<ul>\n<li>首先从数列中挑出一个元素基准<code>pivot</code>；</li>\n<li>定义左右两端指针。先从右往左进行扫描，如果 R[right] &lt; pivot，将R[right]移动至left所在位置，从左往右进行扫描，否则right前移；如果 R[left] &gt; pivot，将R[left]移动到right所在位置上，否则left后移。左右端指针在排序过程中从数组的两端往中间进行靠近；</li>\n<li>直到 right == left （重合），该基准<code>pivot</code>就处于数列的中间位置，这个称为分区（partition）操作；</li>\n<li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。直到划分的区间最后长度仅为1。</li>\n</ul>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 从数列中挑出一个元素，称为 “基准”（pivot）；</span></span><br><span class=\"line\"><span class=\"comment\"> * 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果左边指针小于右边指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * i:表示左边指针</span></span><br><span class=\"line\"><span class=\"comment\">             * j:表示右边指针</span></span><br><span class=\"line\"><span class=\"comment\">             * pivot:表示基准值（一般取分区的首个值）</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = left, j = right, pivot = arr[left];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 从右向左找第一个小于x的数，如果右侧指针所指向的值大于基准pivot，指针前移</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) &#123;</span><br><span class=\"line\">                    j--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果右侧指针所指向的值小于基准pivot，交换右侧指针所指向的值与左侧指针所指向的值，并且左侧指针后移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                    arr[i++] = arr[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 从左向右找第一个大于等于x的数，如果左侧指针所指向的值小于基准pivot，指针后移</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果左侧指针所指向的值大于基准pivot，交换左侧指针所指向的值与右侧指针所指向的值，并且右侧指针前移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                    arr[j--] = arr[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[i] = pivot;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用左子数组</span></span><br><span class=\"line\">            quick_sort(arr, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用右子数组</span></span><br><span class=\"line\">            quick_sort(arr, i + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = &#123;<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">        quick_sort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//打印快速排序后的数组</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>快速排序并<strong>不是稳定的</strong>。这是因为我们无法保证相等的数据按顺序被扫描到和按顺序存放。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>快速排序在大多数情况下都是适用的，尤其在<strong>数据量大</strong>的时候性能优越性更加明显。但是在必要的时候，需要考虑下优化以提高其在最坏情况下的性能。</p>\n<hr>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>最差情况：O(n2)</li>\n</ul>\n<p>最差情况是，每次我们在划分时，所取的基准总是数组中最小的，因此我们总共会进行n-1次划分，且在第i次划分时，区间长度为：n-i+1 ,需要进行n-i比较。</p>\n<p>故：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=C_%7Bmax%7D%3D%5Csum_%7Bi+%3D1%7D%5E%7Bn-1%7D%7Bn-i%7D%3D%5Cfrac%7Bn%28n-1%29%7D%7B2%7D%3DO%28n%5E%7B2%7D%29\" alt=\"[公式]\"></p>\n<ul>\n<li>最好情况：O(nlog2n)</li>\n</ul>\n<p>最好的情况是，每次所取的基准就是该数组的中点，因此一共需要进行n次划分，对于 长度为n的划分空间，需要进行n-1次比较。剩下的两个无序子区间需要进行2C(n/2)的比较次数。设n=2k</p>\n<p>故：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=C%28n%29%5Cleq+n%2B2C%28%5Cfrac%7Bn%7D%7B2%7D%29\" alt=\"[公式]\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cleq+n%2B2%28%5Cfrac%7Bn%7D%7B2%7D%2B2C%28%5Cfrac%7Bn%7D%7B2%5E%7B2%7D%7D%29%29%3D2n%2B4C%28%5Cfrac%7Bn%7D%7B2%5E%7B2%7D%7D%29\" alt=\"[公式]\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cleq+kn%2BnC%281%29+%3D+%5Cleq+n%5C%3Blog_%7B2%7Dn%5C%3B%2B%5C%3BnC%281%29%3DO%28nlog_%7B2%7Dn%29\" alt=\"[公式]\"></p>\n<ul>\n<li>平均情况：</li>\n</ul>\n<p>随机进行切割，最好算出复杂度还是O(nlog2n)</p>\n","categories":["排序算法"],"tags":["进阶","交换排序"]},{"title":"排序总结（Sort Algorithm）","url":"/PaulGeorge123.github.io/2021/06/12/%E6%8E%92%E5%BA%8F--%E6%80%BB%E7%BB%93/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重为排序做个总结：</strong></p>\n<hr>\n<h4 id=\"什么是排序算法？\"><a href=\"#什么是排序算法？\" class=\"headerlink\" title=\"什么是排序算法？\"></a>什么是排序算法？</h4><p>排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"算法分类\"><a href=\"#算法分类\" class=\"headerlink\" title=\"算法分类\"></a>算法分类</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/sort_conclusion.jpg\" style=\"zoom:67%;\" />\n\n\n\n<h4 id=\"算法总结\"><a href=\"#算法总结\" class=\"headerlink\" title=\"算法总结\"></a>算法总结</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/sort_all_photo.png\" style=\"zoom: 67%;\" />\n\n\n\n<h4 id=\"解释说明\"><a href=\"#解释说明\" class=\"headerlink\" title=\"解释说明\"></a>解释说明</h4><ul>\n<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面 （相等不交换位置）；</li>\n<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面（相等交换位置）；</li>\n<li><strong>内排序</strong>：所有排序操作都在内存中完成；</li>\n<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>\n<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间；</li>\n<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小；</li>\n</ul>\n<h4 id=\"比较和非比较的区别\"><a href=\"#比较和非比较的区别\" class=\"headerlink\" title=\"比较和非比较的区别\"></a>比较和非比较的区别</h4><p><font color=#FF8C00>快速排序、归并排序、堆排序、冒泡排序  </font>等属于 <font color=#008000>比较排序</font></p>\n<p><font color=#FF8C00>计数排序、基数排序、桶排序 </font> 则属于  <font color=#FF0000>非比较排序</font></p>\n<p>比较排序：在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置</p>\n<p>非比较排序：非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置</p>\n<h4 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h4><ul>\n<li>常数阶 O(1)</li>\n<li>对数阶 O(log2n)</li>\n<li>线性阶 O(n)</li>\n<li>线性对数阶 O(nlog2n)</li>\n<li>平方阶 O(n^2)</li>\n<li>立方阶 O(n^3)</li>\n<li>k 次方阶 O(n^k)</li>\n<li>指数阶 O(2^n)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1691302-20191103200642835-1582365806.png\" alt=\"\"></p>\n<p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜ Ο(2n) ，随着问题规模 n 的不断增大，上述<strong>时间复杂度不断增大，算法的执行效率越低</strong></p>\n","categories":["排序算法"],"tags":["进阶","排序总结"]},{"title":"每日一练--插入排序（Insert Sort）","url":"/PaulGeorge123.github.io/2021/06/06/%E6%8E%92%E5%BA%8F--%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下插入排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-53-24.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>插入排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(n²)</code></li>\n<li>空间复杂度：<code>O(1)</code></li>\n<li>稳定性：<font color=#008000>稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。即：每次确定要排序的元素并将其与之前<strong>已排好序的元素</strong>进行插入。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif\" target=\"_blank\" rel=\"noopener\">插入排序动图演示</a></p>\n<a id=\"more\"></a>\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>把待排序的数组分成<strong>已排序</strong>和<strong>未排序</strong>两部分，初始的时候把第一个元素认为是已排好序的；</li>\n<li>从第二个元素开始，在已排好序的子数组中寻找到该元素合适的位置并插入该位置；</li>\n<li>重复上述过程直到最后一个元素被插入有序子数组中。</li>\n</ol>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序:外层循环控制每次索要插入的元素（定义一个待插入的数），再定义一个待插入数的前一个数的下标，内层循环比较插入数字</span></span><br><span class=\"line\"><span class=\"comment\"> * 与前一个数字之间的大小比较，如果待插入数的前一个数大于本次索要插入的元素，那么将前一个元素的值赋值给本次插入值的位置，</span></span><br><span class=\"line\"><span class=\"comment\"> * 继续向前比较，知道找到前面的元素之都比插入元素值小的位置，在跳出内层循环，执行外层循环。</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//定义待插入的数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> insertVal = arr[i];</span><br><span class=\"line\">            <span class=\"comment\">//找到待插入数的前一个数的下标</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> insertIndex = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (insertIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[insertIndex] &gt; insertVal) &#123;</span><br><span class=\"line\">                arr[insertIndex + <span class=\"number\">1</span>] = arr[insertIndex];</span><br><span class=\"line\">                insertIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[insertIndex + <span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>&#125;;</span><br><span class=\"line\">        insertSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">19</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>由于只需要找到不大于当前数的位置而并不需要交换，因此，直接插入排序是<strong>稳定的</strong>排序方法。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>插入排序由于O( n2 )的复杂度，在<strong>数组较大</strong>的时候不适用。</p>\n<p>但是，在数据比较少的时候，是一个不错的选择，一般做为快速排序的扩充。</p>\n","categories":["排序算法"],"tags":["进阶","插入排序"]},{"title":"每日一练--桶排序（Bucket Sort）","url":"/PaulGeorge123.github.io/2021/06/11/%E6%8E%92%E5%BA%8F--%E6%A1%B6%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下桶排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-46-15.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>桶排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(n)</code></li>\n<li>空间复杂度：<code>O(n)</code></li>\n<li>稳定性：<font color=#FF0000>不稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>桶排序又叫箱排序，是计数排序的升级版，它的工作原理是将数组分到有限数量的<strong>桶子</strong>里，然后对每个桶子再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），最后将各个桶中的数据有序的合并起来。就像是分不同的桶，在桶内再排序。</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li>找出待排序数组中的最大值<strong>max</strong>、最小值<strong>min</strong>;</li>\n<li>我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length+1;</li>\n<li>遍历数组 arr，计算每个元素 arr[i] 放的桶;</li>\n<li>每个桶各自排序;</li>\n<li>遍历桶数组，把排序好的元素放进输出数组;</li>\n</ol>\n<h4 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/firefox-2021-06-13T06-30-18.291Z.png\" style=\"zoom: 80%;\" />\n\n\n\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BucketSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bucketSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//分别定义 arr 的最大值和最小值 (默认 arr 中首个元素为最小值)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过遍历数组寻找到最大值和最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            max = Math.max(max, arr[i]);</span><br><span class=\"line\">            min = Math.min(min, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//桶数 (最大值-最小值)/数组长度+1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> bucketNum = (max - min) / arr.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(bucketNum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据计算出来桶子个数来创建桶子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\">            bucketArr.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据桶子数值范围，将每个元素放入相应的桶中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = (arr[i] - min) / (arr.length);</span><br><span class=\"line\">            bucketArr.get(num).add(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对每个桶进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketArr.size(); i++) &#123;</span><br><span class=\"line\">            Collections.sort(bucketArr.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//新数组</span></span><br><span class=\"line\">        ArrayList&lt;Integer&gt; newArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketArr.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; bucketArr.get(i).size(); j++) &#123;</span><br><span class=\"line\">                newArr.add(bucketArr.get(i).get(j));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"每个桶内：\"</span> + bucketArr.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"新数组：\"</span> + newArr.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>&#125;;</span><br><span class=\"line\">        bucketSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">每个桶内：[[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>], [<span class=\"number\">19</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>], [<span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>], [<span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>]]</span><br><span class=\"line\">新数组：[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">19</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>可以看出，在<strong>分桶</strong>和<strong>从桶</strong>依次输出的过程是稳定的。但是，由于我们在对每个桶进行排序时使用了其他算法，所以，桶排序的稳定性依赖于这一步。如果我们使用了快排，显然，算法是<strong>不稳定</strong>的。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>桶排序可用于最大最小值相差较大的数据情况，但桶排序要求数据的分布必须均匀，否则可能导致数据都集中到一个桶中。比如[104,150,123,132,20000], 这种数据会导致前4个数都集中到同一个桶中。导致桶排序失效。</p>\n<p>最差的情况就是数据过于集中从而导致都放在一个或者某几个桶中。</p>\n","categories":["排序算法"],"tags":["进阶","桶排序"]},{"title":"整理项目","url":"/PaulGeorge123.github.io/2021/02/26/%E6%95%B4%E7%90%86%E9%A1%B9%E7%9B%AE/","content":"<h3 id=\"整理项目\"><a href=\"#整理项目\" class=\"headerlink\" title=\"整理项目\"></a>整理项目</h3><p>​    这两天闲着没事（其实是不知道干啥）想整理一下GitHub上的项目说明（readme.md） </p>\n<p>​    发现需要将一些项目结构，所涉及到的技术栈……什么的整理好所以就效仿着其他大佬的项目说明进行的整        理，经过一番整理就算是总结一下过去的经历吧~</p>\n<ul>\n<li><p>首先运行项目，嗯要不然咋能有相应的截图呢</p>\n</li>\n<li><p>然后再把截好的图上传到图床上（我用的免费版的GitHub的图床，通过CDN加速加载也没有那么慢）</p>\n<a id=\"more\"></a>\n\n<h4 id=\"管理系统\"><a href=\"#管理系统\" class=\"headerlink\" title=\"管理系统\"></a>管理系统</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img_yg/image-20210530023521804.png\" alt=\"\"></p>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img_yg/image-20210530023849721.png\" alt=\"\"></p>\n<hr>\n</li>\n</ul>\n<blockquote>\n<p>其实做这个此项目的意义就在于，我在学习相应的技术后能不能够在实际操作中运用好，当然在实际操作的过程中还是遇到了或多或少的问题，感谢前人把之前遇到的问题+解决方案整理出来，使得我走了不少捷径，哈哈哈~</p>\n</blockquote>\n","categories":["生活篇"],"tags":["折腾"]},{"title":"每日一练--选择排序（Selection Sort）","url":"/PaulGeorge123.github.io/2021/06/08/%E6%8E%92%E5%BA%8F--%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>每天一篇排序算法（Java版本）</p>\n</blockquote>\n<p><strong>十种常见的排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。</strong></p>\n<p><strong>本篇着重介绍一下选择排序：</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-51-36.png\" alt=\"\"></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>选择排序：</strong></p>\n<ul>\n<li>时间复杂度：<code>O(n²)</code></li>\n<li>空间复杂度：<code>O(1)</code></li>\n<li>稳定性：<font color=#FF0000>不稳定</font></li>\n</ul>\n<h4 id=\"排序思想\"><a href=\"#排序思想\" class=\"headerlink\" title=\"排序思想\"></a>排序思想</h4><p>选择排序是一种简单直观的排序算法，它也是一种交换排序算法，和冒泡排序有一定的相似度，可以认为选择排序是冒泡排序的一种改进。</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif\" target=\"_blank\" rel=\"noopener\">选择排序动图演示</a></p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h4><ol>\n<li><p>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</p>\n</li>\n<li><p>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</p>\n</li>\n<li><p>重复第二步，直到所有元素均排序完毕。</p>\n<p><strong>基本思路：</strong></p>\n</li>\n</ol>\n<ul>\n<li>外循环：循环每个位置（其实就是选择了这个位置，然后用内循环去选择一个合适的数，放到这个位置）；</li>\n<li>内循环：在无序元素中选择一个合适的数；</li>\n<li>把第二步选中的数据放到第一步选中的位置上就可以了；</li>\n</ul>\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择排序法，外层循环控制所需找到最小值的次数，内层循环来寻找目标值后面比目标值小的元素，进行下标更新</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次找到后，都将其放倒前面，与冒泡排序恰恰相反。</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectionSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//外层循环控制所需找到最小值的次数,挖坑</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">            <span class=\"comment\">//内层循环来寻找目标值后面比目标值小的元素，准备填坑</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下标更新</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[index]) &#123;</span><br><span class=\"line\">                    index = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//填坑</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[index];</span><br><span class=\"line\">            arr[index] = arr[i];</span><br><span class=\"line\">            arr[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>&#125;;</span><br><span class=\"line\">        selectSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">19</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">36</span>, <span class=\"number\">38</span>, <span class=\"number\">44</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">50</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>用数组实现的选择排序是<strong>不稳定</strong>的，用链表实现的选择排序是<strong>稳定</strong>的。</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>选择排序实现也比较简单，并且由于在各种情况下复杂度波动小，因此一般是<strong>优于冒泡排序</strong>的。在所有的完全交换排序中，选择排序也是比较不错的一种算法。</p>\n","categories":["排序算法"],"tags":["进阶","选择排序"]},{"title":"每日一练--单例模式","url":"/PaulGeorge123.github.io/2021/05/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","content":"<blockquote>\n<p>每天一篇重点设计模式（Java版）</p>\n</blockquote>\n<br>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1582516984-5f801c55bbc3c_fix732.png\" alt=\"\"></p>\n<br>\n\n<p><strong>总体来说设计模式分为三大类：</strong></p>\n<p><strong>创建型模式（5种）</strong>：<font color=#008000>工厂方法模式</font>、<font color=#008000>抽象工厂模式</font>、<font color=#008000>单例模式</font>、建造者模式、原型模式</p>\n<p><strong>结构型模式（7种）</strong>：<font color=#0000FF>适配器模式</font>、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p>\n<p><strong>行为型模式（11种）</strong>：<font color=#FF8C00>观察者模式</font>、策略模式、模板方法模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<p><strong>本篇着重介绍一下单例模式：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p><strong>设计模式的六大原则</strong></p>\n<p>开闭原则、单一原则、 里式替换、依赖倒置、接口隔离、迪米特法则</p>\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p> <strong>注意：</strong></p>\n<ul>\n<li>1、单例类只能有一个实例。</li>\n<li>2、单例类必须自己创建自己的唯一实例。</li>\n<li>3、单例类必须给所有其他对象提供这一实例。</li>\n</ul>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p>\n<p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p>\n<p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>\n<p><strong>关键代码：</strong>构造函数是私有的。</p>\n<p>单例模式的几种实现方式</p>\n<hr>\n<h5 id=\"1、懒汉式，线程不安全\"><a href=\"#1、懒汉式，线程不安全\" class=\"headerlink\" title=\"1、懒汉式，线程不安全\"></a>1、懒汉式，线程不安全</h5><p><strong>是否 Lazy 初始化：</strong>是</p>\n<p><strong>是否多线程安全：</strong>否</p>\n<p><strong>实现难度：</strong>易</p>\n<p><strong>描述：</strong>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>\n<p><strong>步骤 1</strong></p>\n<p>创建一个 Singleton 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"懒汉式\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>步骤 2</strong></p>\n<p>从 singleton 类获取唯一的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      \t <span class=\"comment\">// 懒汉式</span></span><br><span class=\"line\">    \t Singleton1 instance1 = Singleton1.getInstance();</span><br><span class=\"line\">   \t\t System.out.println(instance1);   </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"2、饿汉式\"><a href=\"#2、饿汉式\" class=\"headerlink\" title=\"2、饿汉式\"></a>2、饿汉式</h5><p><strong>是否 Lazy 初始化：</strong>否</p>\n<p><strong>是否多线程安全：</strong>是</p>\n<p><strong>实现难度：</strong>易</p>\n<p><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。<br> 优点：没有加锁，执行效率会提高。<br> 缺点：类加载时就初始化，浪费内存。<br> 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>\n<p><strong>步骤 1</strong></p>\n<p>创建一个 Singleton 2类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 instance = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"饿汉式\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>步骤 2</strong></p>\n<p>从 singleton2 类获取唯一的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 饿汉式</span></span><br><span class=\"line\">       Singleton2 instance2 = Singleton2.getInstance();</span><br><span class=\"line\">       System.out.println(instance2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"3、双检锁-双重校验锁（DCL）\"><a href=\"#3、双检锁-双重校验锁（DCL）\" class=\"headerlink\" title=\"3、双检锁/双重校验锁（DCL）\"></a>3、双检锁/双重校验锁（DCL）</h5><p><strong>是否 Lazy 初始化：</strong>是</p>\n<p><strong>是否多线程安全：</strong>是</p>\n<p><strong>实现难度：</strong>较复杂</p>\n<p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p>\n<p><strong>步骤 1</strong></p>\n<p>创建一个 Singleton3 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton3 instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"双重检查模式 (DCL)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton3<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>步骤 2</strong></p>\n<p>从 singleton3 类获取唯一的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 双重检查模式 (DCL)</span></span><br><span class=\"line\">        Singleton3 instance3 = Singleton3.getInstance();</span><br><span class=\"line\">        System.out.println(instance3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"4、静态内部类\"><a href=\"#4、静态内部类\" class=\"headerlink\" title=\"4、静态内部类\"></a>4、静态内部类</h5><p><strong>是否 Lazy 初始化：</strong>是</p>\n<p><strong>是否多线程安全：</strong>是</p>\n<p><strong>实现难度：</strong>一般</p>\n<p><strong>步骤 1</strong></p>\n<p>创建一个 Singleton4 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态内部类\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton4 INSTANCE = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>步骤 2</strong></p>\n<p>从 singleton4 类获取唯一的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态内部类</span></span><br><span class=\"line\">        Singleton4 instance4 = Singleton4.getInstance();</span><br><span class=\"line\">        System.out.println(instance4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"5、枚举\"><a href=\"#5、枚举\" class=\"headerlink\" title=\"5、枚举\"></a>5、枚举</h5><p><strong>是否 Lazy 初始化：</strong>否</p>\n<p><strong>是否多线程安全：</strong>是</p>\n<p><strong>实现难度：</strong>易</p>\n<p><strong>步骤 1</strong></p>\n<p>创建一个 Singleton5 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton5 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE(<span class=\"string\">\"枚举类\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    Singleton5(String msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        System.out.println(getMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doOtherSomeThing</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>步骤 2</strong></p>\n<p>从 singleton5类获取唯一的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举</span></span><br><span class=\"line\">        Singleton5 instance5 = Singleton5.INSTANCE;</span><br><span class=\"line\">        System.out.println(instance5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["设计模式"],"tags":["进阶","创建者模式"]},{"title":"日积月累","url":"/PaulGeorge123.github.io/2021/07/01/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/","content":"<blockquote>\n<p>面试中遇到问题的相关总结</p>\n</blockquote>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-13-27.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"1、-Autowired和-Resource的区别是什么？\"><a href=\"#1、-Autowired和-Resource的区别是什么？\" class=\"headerlink\" title=\"1、@Autowired和@Resource的区别是什么？\"></a><font color=#008000>1、@Autowired和@Resource的区别是什么？</font></h4><p>联系：</p>\n<ul>\n<li>@Autowired和@Resource注解都是作为bean对象注入的时候使用的；</li>\n<li>两者都可以声明在字段和setter方法上；</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>@Autowired注解是Spring提供的，而@Resource注解是J2EE本身提供的；</li>\n<li>@Autowird注解默认通过byType方式注入，而@Resource注解默认通过byName方式注入；</li>\n<li>@Autowired注解注入的对象需要在IOC容器中存在，否则需要加上属性required=false，表示忽略当前要注入的bean，如果有直接注入，没有跳过，不会报错；</li>\n</ul>\n<p>其实 @Autowired 注入首先根据 byType 注入，当类型大于1时在根据 byName 注入。</p>\n<hr>\n<h4 id=\"2、HashMap与ConcurrentHashMap的区别？\"><a href=\"#2、HashMap与ConcurrentHashMap的区别？\" class=\"headerlink\" title=\"2、HashMap与ConcurrentHashMap的区别？\"></a><font color=#008000>2、HashMap与ConcurrentHashMap的区别？</font></h4><p>相同点：</p>\n<ul>\n<li>首先两者的相同点在于底层都是数组+链表实现实现的；</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>HashMap是线程非安全的，ConcurrentHashMap是线程安全的</li>\n</ul>\n<hr>\n<h4 id=\"3、处理哈希冲突的方法？\"><a href=\"#3、处理哈希冲突的方法？\" class=\"headerlink\" title=\"3、处理哈希冲突的方法？\"></a><font color=#008000>3、处理哈希冲突的方法？</font></h4><ul>\n<li>开放定址法</li>\n<li>链地址法（√）</li>\n<li>再散列法</li>\n</ul>\n<hr>\n<h4 id=\"4、包装类和基本数据类型的区别？\"><a href=\"#4、包装类和基本数据类型的区别？\" class=\"headerlink\" title=\"4、包装类和基本数据类型的区别？\"></a><font color=#008000>4、包装类和基本数据类型的区别？</font></h4><p>包装类：</p>\n<ul>\n<li><p>优点：</p>\n<ul>\n<li>可以赋值为null</li>\n<li>提供了一系列的方法常用的有：parseInt(String s)、tostring()、valueOf(String s)、equals( object object)、i.compareto(integer anotherIntger)</li>\n<li><font color=#FF8C00>集合中不允许放基本数据类型，只能放包装类！</font></li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>由于每个值分别包装在对象中，所以ArrayList的效率远远低于int[]数组</li>\n</ul>\n</li>\n</ul>\n<p>基本数据类型：</p>\n<ul>\n<li><p>优点：</p>\n<ul>\n<li>计算效率高</li>\n<li>不会由于常量池而引起比较大小的错误</li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>当数据库查询出结果封装到结果集时,如何返回的值为null时,会将结果赋值给字段,运行时会报错,不能将null值赋值给基本数据类型</li>\n</ul>\n</li>\n</ul>\n<p><strong>两者的区别：</strong><br>1、声明方式不同，基本类型不适用new关键字，而包装类型需要使用new关键字来在堆中分配存储空间；<br>2、存储方式及位置不同，基本类型是直接将变量值存储在堆栈中，而包装类型是将对象放在堆中，然后通过引用来使用；<br>3、初始值不同，基本类型的初始值如int为0，boolean为false，而包装类型的初始值为null<br>4、使用方式不同，基本类型直接赋值直接使用就好，而包装类型在集合如Collection、Map时会使用到。<br>5、包装类都是继承Number 接口实现Compareble 接口的</p>\n<hr>\n<h4 id=\"5、MyISAM-和-INNODB-的区别？\"><a href=\"#5、MyISAM-和-INNODB-的区别？\" class=\"headerlink\" title=\"5、MyISAM 和 INNODB 的区别？\"></a><font color=#008000>5、MyISAM 和 INNODB 的区别？</font></h4><ol>\n<li><p>事务安全：</p>\n<p>MyISAM 不支持事务（×）</p>\n<p>INNODB  支持事务（√）</p>\n</li>\n<li><p>外键 ：</p>\n<p>MyISAM 不支持外键（×）</p>\n<p> INNODB 支持外键（√）</p>\n</li>\n<li><p>锁机制：</p>\n<p>MyISAM 是表锁</p>\n<p>INNODB 是行锁</p>\n</li>\n<li><p>查询和添加速度：</p>\n<p>MyISAM 批量插入速度快</p>\n</li>\n<li><p>支持全文索引：</p>\n<p>MyISAM 支持全文索引（√）</p>\n<p>INNODB 不支持全文索引（×）</p>\n</li>\n<li><p>MyISAM 内存空间使用率比 INNODB 低</p>\n</li>\n</ol>\n<p>Memory 存储，比如我们数据变化频繁，不需要入库，同时又频繁的查询和修改，我们考虑使用 memory, 速度极快. （如果 mysql 重启的话，数据就不存在了）</p>\n<hr>\n<h4 id=\"6、Java中final、finally、finalize的区别与用法\"><a href=\"#6、Java中final、finally、finalize的区别与用法\" class=\"headerlink\" title=\"6、Java中final、finally、finalize的区别与用法\"></a><font color=#008000>6、Java中final、finally、finalize的区别与用法</font></h4><ul>\n<li>final：java中的关键字，修饰符。<br>1.如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。<br>2.如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<ul>\n<li>被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。</li>\n<li>被声明final的方法只能使用，不能重载。</li>\n</ul>\n</li>\n<li>finally：java的一种异常处理机制。<br>　　finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li>\n<li>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</li>\n</ul>\n<hr>\n<h4 id=\"7、try-catch-finally\"><a href=\"#7、try-catch-finally\" class=\"headerlink\" title=\"7、try-catch-finally\"></a><font color=#008000>7、try-catch-finally</font></h4><ol>\n<li>异常处理语法结构中只有 try 块是必需的，也就是说，如果没有 try 块，则不能有后面的 catch 块和 finally 块；</li>\n<li>catch 块和 finally 块都是可选的，但 catch 块和 finally 块至少出现其中之一，也可以同时出现；</li>\n<li>可以有多个 catch 块，捕获父类异常的 catch 块必须位于捕获子类异常的后面；</li>\n<li>不能只有 try 块，既没有 catch 块，也没有 finally 块；</li>\n<li>多个 catch 块必须位于 try 块之后，finally 块必须位于所有的 catch 块之后。</li>\n<li>finally 与 try 语句块匹配的语法格式，此种情况会导致异常丢失，所以不常见。</li>\n</ol>\n<hr>\n<h4 id=\"8、Java中常见的五种异常\"><a href=\"#8、Java中常见的五种异常\" class=\"headerlink\" title=\"8、Java中常见的五种异常\"></a><font color=#008000>8、Java中常见的五种异常</font></h4><ol>\n<li>ClassCastException【类转换异常】</li>\n<li>IndexOutOfBoundsException【数组越界】</li>\n<li>NullPointerException【空指针】</li>\n<li>IllegalAccessException【安全权限异常】</li>\n<li>IOException【输入输出异常】</li>\n</ol>\n<hr>\n<h4 id=\"9、Java中垃圾回收的目的？什么时候进行？\"><a href=\"#9、Java中垃圾回收的目的？什么时候进行？\" class=\"headerlink\" title=\"9、Java中垃圾回收的目的？什么时候进行？\"></a><font color=#008000>9、Java中垃圾回收的目的？什么时候进行？</font></h4><p>垃圾回收是在内存中中存在<strong>没有引用的对象</strong>或<strong>超过作用域的对象时</strong>进行垃圾回收，垃圾回收的目的是识别并且丢弃不再使用的对象来释放和重用资源。</p>\n<p>目的：<br>回收堆中不再使用的对象，释放资源。<br>回收时间：当对象失去引用后，系统会在合适的时间回收它所占的内存。</p>\n<ul>\n<li>老年代的对象所需要的内存大于老年代剩余内存，则会触发老年代 GC（Full GC）。</li>\n<li>当程序调用System.gc() 时也会触发Full GC。</li>\n</ul>\n<hr>\n<h4 id=\"10、什么是内存泄漏？\"><a href=\"#10、什么是内存泄漏？\" class=\"headerlink\" title=\"10、什么是内存泄漏？\"></a><font color=#008000>10、什么是内存泄漏？</font></h4><p>【<strong>out of memory</strong>】</p>\n<p>当一个对象已经不需要再使用本该被回收时，另外一个正在使用的对象持有它的引用从而导致它不能被回收，这导致本该被回收的对象不能被回收而停留在堆内存中。</p>\n<p><strong>内存溢出的原因以及解决方法</strong></p>\n<ol>\n<li><p>内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</p>\n</li>\n<li><p>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</p>\n</li>\n<li><p>代码中存在死循环或循环产生过多重复的对象实体；</p>\n</li>\n<li><p>启动参数内存值设定的过小</p>\n</li>\n</ol>\n<p>内存溢出的解决方案：</p>\n<p>第一步，修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p>\n<p>第二步，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</p>\n<p>第三步，对代码进行走查和分析，找出可能发生内存溢出的位置。</p>\n<hr>\n<h4 id=\"11、String-s-new-String-“xyz”-创建几个String对象？\"><a href=\"#11、String-s-new-String-“xyz”-创建几个String对象？\" class=\"headerlink\" title=\"11、String s = new String(“xyz”);创建几个String对象？\"></a><font color=#008000>11、String s = new String(“xyz”);创建几个String对象？</font></h4><p>两个或一个</p>\n<ul>\n<li>第一次调用 new String(“xyz”); 时，会在堆内存中创建一个字符串对象，同时在字符串常量池中创建一个对象 “xyz”</li>\n<li>第二次调用 new String(“xyz”); 时，只会在堆内存中创建一个字符串对象，指向之前在字符串常量池中创建的 “xyz”</li>\n</ul>\n<hr>\n<h4 id=\"12、类加载器工作机制？\"><a href=\"#12、类加载器工作机制？\" class=\"headerlink\" title=\"12、类加载器工作机制？\"></a><font color=#008000>12、类加载器工作机制？</font></h4><ol>\n<li>装载：将Java二进制代码导入jvm中，生成Class文件。</li>\n<li>连接：<ul>\n<li>校验：检查载入Class文件数据的正确性 </li>\n<li>准备：给类的静态变量分配存储空间</li>\n<li>解析：将符号引用转成直接引用</li>\n</ul>\n</li>\n<li>初始化：对类的静态变量，静态方法和静态代码块执行初始化工作。<br>双亲委派模型：类加载器收到类加载请求，首先将请求委派给父类加载器完成 用户自定义加载器-&gt;应用程序加载器-&gt;扩展类加载器-&gt;启动类加载器。</li>\n</ol>\n<hr>\n<h4 id=\"13、Spring中的Controller-，Service，Dao是不是线程安全的？\"><a href=\"#13、Spring中的Controller-，Service，Dao是不是线程安全的？\" class=\"headerlink\" title=\"13、Spring中的Controller ，Service，Dao是不是线程安全的？\"></a><font color=#008000>13、Spring中的Controller ，Service，Dao是不是线程安全的？</font></h4><ol>\n<li>在@Controller/@Service等容器中，默认情况下，scope 值是单例 singleton 的，也是线程不安全的。</li>\n<li>尽量不要在@Controller/@Service等容器中定义静态变量，不论是单例 (singleton) 还是多实例 (prototype) 他都是线程不安全的。</li>\n<li>默认注入的 Bean 对象，在不设置 scope 的时候他也是线程不安全的。</li>\n<li>一定要定义变量的话，用 ThreadLocal 来封装，这个是线程安全的</li>\n</ol>\n<hr>\n<h4 id=\"14、Java-中-sleep-和-wait-的区别？\"><a href=\"#14、Java-中-sleep-和-wait-的区别？\" class=\"headerlink\" title=\"14、Java 中 sleep() 和 wait() 的区别？\"></a><font color=#008000>14、Java 中 sleep() 和 wait() 的区别？</font></h4><ol>\n<li>这两个方法来自不同的类分别是，sleep 来自 Thread 类，和 wait 来自 Object 类。</li>\n<li>最主要是 sleep 方法没有释放锁，而 wait 方法释放了锁，使得其他线程可以使用同步控制块或者方法。</li>\n<li>使用范围：wait，notify 和 notifyAll 只能在同步控制方法或者同步控制块里面使用，而 sleep 可以在任何地方使用。</li>\n<li>sleep 必须捕获异常，而 wait，notify 和 notifyAll 不需要捕获异常。</li>\n</ol>\n<hr>\n<h4 id=\"15、-bean-注解和-component注解的区别\"><a href=\"#15、-bean-注解和-component注解的区别\" class=\"headerlink\" title=\"15、@bean 注解和 @component注解的区别\"></a><font color=#008000>15、@bean 注解和 @component注解的区别</font></h4><ol>\n<li><p>@Component 注解作用于类</p>\n<p>@Bean 注解作用于方法</p>\n</li>\n<li><p>@Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中【@ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中】</p>\n<p>@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。</p>\n</li>\n<li><p>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 @Bean 来实现。</p>\n</li>\n</ol>\n<p> <strong>未完待续 … …</strong></p>\n","categories":["面试篇"],"tags":["日积月累"]},{"title":"每日一练--工厂模式","url":"/PaulGeorge123.github.io/2021/05/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","content":"<blockquote>\n<p>每天一篇重点设计模式（Java版）</p>\n</blockquote>\n<br>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1582516984-5f801c55bbc3c_fix732.png\" alt=\"\"></p>\n<hr>\n<p><strong>总体来说设计模式分为三大类：</strong></p>\n<p><strong>创建型模式（5种）</strong>：<font color=#008000>工厂方法模式</font>、<font color=#008000>抽象工厂模式</font>、<font color=#008000>单例模式</font>、建造者模式、原型模式</p>\n<p><strong>结构型模式（7种）</strong>：<font color=#0000FF>适配器模式</font>、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p>\n<p><strong>行为型模式（11种）</strong>：<font color=#FF8C00>观察者模式</font>、策略模式、模板方法模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<p><strong>本篇着重介绍一下工厂模式：</strong></p>\n<hr>\n<a id=\"more\"></a>\n\n<p><strong>写在前面</strong></p>\n<p><strong>设计模式的六大原则</strong></p>\n<p>开闭原则、单一原则、 里式替换、依赖倒置、接口隔离、迪米特法则</p>\n<hr>\n<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<p><strong>工厂模式可以分为三类：</strong></p>\n<ul>\n<li>简单工厂模式（Simple Factory）</li>\n<li>工厂方法模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>这三种工厂模式在设计模式的分类中都属于<strong>创建型模式</strong>，三种模式从上到下逐步抽象。</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><strong>意图：</strong>通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节。</p>\n<p><strong>主要解决：</strong>工厂模式的主要功能就是帮助我们实例化对象。</p>\n<p><strong>何时使用：</strong>在任何需要生成<strong>复杂对象</strong>的地方。</p>\n<p><strong>如何解决：</strong>对象的实例化过程是通过工厂实现的，是用工厂代替 <code>new</code> 操作的。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li><p><strong>可以使代码结构清晰，有效地封装变化</strong></p>\n<p>在编程中，产品类的实例化有时候是比较复杂和多变的，通过工厂模式，将产品的实例化封装起来，使得调用者根本无需关心产品的实例化过程，只需依赖工厂即可得到自己想要的产品。</p>\n</li>\n<li><p><strong>对调用者屏蔽具体的产品类</strong></p>\n<p>如果使用工厂模式，调用者只关心产品的接口就可以了，至于具体的实现，调用者根本无需关心。即使变更了具体的实现，对调用者来说没有任何影响。</p>\n</li>\n<li><p><strong>降低耦合度</strong></p>\n<p>产品类的实例化通常来说是很复杂的，它需要依赖很多的类，而这些类对于调用者来说根本无需知道，如果使用了工厂方法，我们需要做的仅仅是实例化好产品类，然后交给调用者使用。对调用者来说，产品所依赖的类都是透明的。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p><font color=#008000>为啥叫做简单工厂？</font></p>\n<p>因为原理真的很简单！</p>\n<p>先来想一个场景，当我们在做四则运算的时候，想要使用不同的运算的时候就要创建不同的类，并且要明确知道该类的名字。那么这种重复的创建类的工作其实可以放到一个统一的类中去管理。</p>\n<p>这样的方法我们就叫做【<strong>简单工厂模式</strong>】，又被称为「<strong>静态工厂方法</strong>」模式。</p>\n<h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>提供一个创建对象实例的功能，而无需关心其具体实现。被创建实例的类型可以是接口、抽象类，也可以是具体的类。</p>\n<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了；</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口；</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><p>当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求。</p>\n<p>这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；</p>\n<h5 id=\"简单工厂模式实现方式\"><a href=\"#简单工厂模式实现方式\" class=\"headerlink\" title=\"简单工厂模式实现方式\"></a>简单工厂模式实现方式</h5><p>简单工厂模式包含 3 个角色（要素）：</p>\n<ul>\n<li>Factory：即工厂类， 简单工厂模式的核心部分，负责实现创建所有产品的内部逻辑；工厂类可以被外界直接调用，创建所需对象。</li>\n<li>Product：抽象类产品， 它是工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法，它的引入将提高系统的灵活性，使得在工厂类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。</li>\n<li>ConcreteProduct：具体产品， 它是简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。它要实现抽象产品中声明的抽象方法。</li>\n</ul>\n<h5 id=\"UML-类图\"><a href=\"#UML-类图\" class=\"headerlink\" title=\"UML 类图\"></a>UML 类图</h5><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-20_21-18-18.png\" style=\"zoom:67%;\" />\n\n\n\n<h5 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h5><p><strong>IMask 接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>HighEndMask 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HighEndMask</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMask</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是高端口罩\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>LowEndMask 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LowEndMask</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我的低端口罩\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>MaskFactory 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 在创建方法中传入参数（这里的参数是type），根据参数来做条件判断，决定创建什么样的口罩、</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 所谓面向对象的开放-封闭原则，就是在程序中对“扩展”开放，对“修改”封闭。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果每次业务改动都要增加新的 case，就涉及对旧有代码的修改，不但容易出错，可读性也不好</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaskFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMask <span class=\"title\">createMask</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        IMask mask;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"高端口罩\"</span>:</span><br><span class=\"line\">                mask = <span class=\"keyword\">new</span> HighEndMask();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"低端口罩\"</span>:</span><br><span class=\"line\">                mask = <span class=\"keyword\">new</span> LowEndMask();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"不支持该操作\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Test 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MaskFactory maskFactory = <span class=\"keyword\">new</span> MaskFactory();</span><br><span class=\"line\">        IMask lowMask = maskFactory.createMask(<span class=\"string\">\"高端口罩\"</span>);</span><br><span class=\"line\">        IMask highMask = maskFactory.createMask(<span class=\"string\">\"低端口罩\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        lowMask.show();</span><br><span class=\"line\">        highMask.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">我是高端口罩</span><br><span class=\"line\">我的低端口罩</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"简单工厂模式存在的问题\"><a href=\"#简单工厂模式存在的问题\" class=\"headerlink\" title=\"简单工厂模式存在的问题\"></a>简单工厂模式存在的问题</h5><p>当我们需要增加一种口罩时，需要在<code>MaskFactory</code>类的代码，增加一个 <code>case</code>选项。这显然是<strong>违背开闭原则</strong>的。可想而知对于新产品的加入，工厂类是很被动的。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>简单工厂模式所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。</p>\n<hr>\n<h4 id=\"工厂模式-1\"><a href=\"#工厂模式-1\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p><font color=#008000>什么是工厂模式？</font></p>\n<p>我们常说的工厂模式，就是指【工厂方法模式】，也叫【虚拟构造器模式】或【多态工厂模式】。</p>\n<h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。</p>\n<h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了；</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以；</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口；</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p><font color=#FF0000>这并不是什么好事！</font></p>\n<h5 id=\"工厂模式实现方式\"><a href=\"#工厂模式实现方式\" class=\"headerlink\" title=\"工厂模式实现方式\"></a>工厂模式实现方式</h5><p>工厂方法模式包含 4 个角色（要素）：</p>\n<ul>\n<li>Product：抽象产品，定义工厂方法所创建的对象的接口，也就是实际需要使用的对象的接口；</li>\n<li>ConcreteProduct：具体产品，具体的 Product 接口的实现对象；</li>\n<li>Factory：工厂接口，也可以叫 Creator(创建器)，申明工厂方法，通常返回一个 Product 类型的实例对象；</li>\n<li>ConcreteFactory：工厂实现，或者叫 ConcreteCreator(创建器对象)，覆盖 Factory 定义的工厂方法，返回具体的 Product 实例；</li>\n</ul>\n<h5 id=\"UML-类图-1\"><a href=\"#UML-类图-1\" class=\"headerlink\" title=\"UML 类图\"></a>UML 类图</h5><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-20_23-25-15.png\" style=\"zoom:80%;\" />\n\n<h5 id=\"代码示例-1\"><a href=\"#代码示例-1\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h5><p><strong>IMask 接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>HighEndMask 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HighEndMask</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是高端口罩\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>LowEndMask 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LowEndMask</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我的低端口罩\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>MaskFactory 接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 口罩工厂</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MaskFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 制造口罩的工艺</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">IMask <span class=\"title\">createMask</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>HighMaskFactory 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HighMaskFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">MaskFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMask <span class=\"title\">createMask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HighEndMask();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>LowMaskFactory 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LowMaskFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">MaskFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMask <span class=\"title\">createMask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LowEndMask();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Test 类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MaskFactory highMaskFactory = <span class=\"keyword\">new</span> HighMaskFactory();</span><br><span class=\"line\">        highMaskFactory.createMask().show();</span><br><span class=\"line\">        MaskFactory lowMaskFactory = <span class=\"keyword\">new</span> LowMaskFactory();</span><br><span class=\"line\">        lowMaskFactory.createMask().show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">我是高端口罩</span><br><span class=\"line\">我的低端口罩</span><br></pre></td></tr></table></figure>\n\n<p>有没有发现，当我们需要新增一个口罩产品的时候，要为为相应的产品增加相应的工厂对象即可！</p>\n<h5 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ol>\n<li>工厂方法模式是简单工厂模式的进一步抽象和推广；</li>\n<li>由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点；</li>\n<li>工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品；</li>\n</ol>\n","categories":["设计模式"],"tags":["进阶","创建者模式"]},{"title":"每日一面--HashMap原理","url":"/PaulGeorge123.github.io/2021/06/12/%E9%9D%A2%E8%AF%95--HashMap/","content":"<blockquote>\n<p>每天一篇 Java 小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 HashMap：</strong></p>\n<hr>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>众所周知，HashMap 是一个用于存储 <strong>Key-Value</strong> 键值对的集合，每一个键值对也叫做 <strong>Entry</strong>。这些个键值对（Entry）分散存储在一个数组当中，这个数组就是 HashMap 的主干。</p>\n<p><strong>画个重点：</strong></p>\n<p><font color=#008000><strong>Hash的公式 —&gt;  index = HashCode（Key） &amp; （Length - 1）</strong></font></p>\n<p><strong>HashMap 的数据结构两种：数组 + 链表</strong></p>\n<ul>\n<li>数组：查询速度快，可以根据索引查询；但插入和删除比较困难；</li>\n<li>链表：查询速度慢，需要遍历整个链表，但插入和删除操作比较容易;</li>\n<li>HashMap 是数组和链表组成的，数据结构中又叫“链表散列”;</li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"HashMap特点\"><a href=\"#HashMap特点\" class=\"headerlink\" title=\"HashMap特点\"></a>HashMap特点</h3><ol>\n<li>快速存储 ：比如当我们对 hashmap 进行 get 和 put 的时候速度非常快</li>\n<li>快速查找（时间复杂度o(1)）当我们通过key去get一个 value 的时候时间复杂度非常的低，<strong>效率非常高</strong></li>\n<li>可伸缩：(1) 数组扩容，边长；(2) 单线列表如果长度超过 <strong>8</strong> 的话会变成红黑树</li>\n</ol>\n<h3 id=\"HashMap的扩容原理\"><a href=\"#HashMap的扩容原理\" class=\"headerlink\" title=\"HashMap的扩容原理\"></a>HashMap的扩容原理</h3><p>HashMap 数组每一个元素的初始值都是 Null；</p>\n<p>对于 HashMap，我们最常使用的是两个方法：<strong>Get</strong> 和 <strong>Put</strong> （获取和添加）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20210614000934162.png\" alt=\"\"></p>\n<h4 id=\"1-Put方法的原理\"><a href=\"#1-Put方法的原理\" class=\"headerlink\" title=\"1.Put方法的原理\"></a>1.Put方法的原理</h4><p>调用 Put 方法的时候发生了什么呢？</p>\n<p>比如调用 hashMap.put(“apple”, 0) ，插入一个 Key 为 “apple” 的元素。这时候我们需要利用一个哈希函数来确定Entry的插入位置（index）：</p>\n<p><strong>index = Hash（“apple”）</strong></p>\n<p>假定最后计算出的index是2，那么结果如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-10-29.609Z.png\" alt=\"\"></p>\n<p>但是，因为 HashMap 的长度是有限的，当插入的 Entry 越来越多时，再完美的 Hash 函数也难免会出现 <strong>index冲突</strong>的情况。比如下面这样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T17-26-02.319Z.png\" alt=\"\"></p>\n<p>HashMap数组的每一个元素不止是一个 <strong>Entry 对象</strong>，也是一个链表的<strong>头节点</strong>。每一个Entry对象通过 <strong>Next指针</strong>指向它的下一个 <strong>Entry节点</strong>。当新来的 Entry 映射到冲突的数组位置时，只需要插入到对应的链表即可：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T17-26-37.073Z.png\" alt=\"\"></p>\n<blockquote>\n<p>当前采用的是 jdk 7 默认方法，也就是头插法</p>\n</blockquote>\n<h4 id=\"2-Get方法的原理\"><a href=\"#2-Get方法的原理\" class=\"headerlink\" title=\"2.Get方法的原理\"></a>2.Get方法的原理</h4><p><font color=#008000>使用Get方法根据Key来查找Value的时候，发生了什么呢？</font></p>\n<p>首先会把输入的 Key 做一次 Hash 映射，得到对应的 index：</p>\n<p><strong>index = Hash（“apple”）</strong>  <strong>=&gt;</strong>   <strong>index = 2</strong></p>\n<p>由于刚才所说的 Hash 冲突，同一个位置有可能匹配到多个 Entry，这时候就需要顺着对应链表的头节点，一个一个向下来查找。假设我们要查找的 Key 是 <strong>“apple”</strong>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-02-40.117Z.png\" alt=\"\"></p>\n<ul>\n<li>第一步，我们查看的是头节点 Entry6，<strong>Entry6</strong> 的 Key 是 <strong>banana</strong>，显然不是我们要找的结果。</li>\n<li>第二步，我们查看的是 Next 节点 Entry1，<strong>Entry1</strong> 的 Key 是 <strong>apple</strong>，正是我们要找的结果。</li>\n</ul>\n<blockquote>\n<p>之所以把 Entry6 放在头节点，是因为 HashMap 的发明者认为，<strong>后插入的 Entry 被查找的可能性更大</strong>。</p>\n</blockquote>\n<hr>\n<h4 id=\"HashMap-尾插法\"><a href=\"#HashMap-尾插法\" class=\"headerlink\" title=\"HashMap 尾插法\"></a>HashMap 尾插法</h4><p>上面提到过 hashmap 添加采用的是 jdk 7 默认方法（头插法），那一定时有原因的呀！</p>\n<p>当来到 jdk 8 的时候改成尾插法了，why？</p>\n<p><font color=#008000>来看看Node的源码</font></p>\n<p>每一个节点都会保存自身的 <strong>hash</strong>、<strong>key</strong>、<strong>value</strong> 以及下个<strong>Next</strong>（节点）</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/carbon_node6-14.png\" style=\"zoom: 50%;\" />\n\n\n\n<p><strong>java8之前是头插法</strong>，就是说新来的值会取代原有的值，原有的值就顺推到链表中去，就像上面的例子一样，因为写这个代码的作者认为后来的值被查找的可能性更大一点，提升查找的效率。</p>\n<p>但是，<strong>在java8之后，都是所用尾部插入了。</strong></p>\n<p><font color=#008000>为啥改为尾部插入呢？</font></p>\n<p>答：数组容量是有限的，数据多次插入的，到达一定的数量就会进行扩容，也就是resize。</p>\n<p><font color=#008000>什么时候resize呢？</font></p>\n<p>答：</p>\n<ol>\n<li>有两个因素：</li>\n</ol>\n<ul>\n<li>Capacity：HashMap当前长度 【list.length()】</li>\n<li>LoadFactor：负载因子，默认值0.75f 【3/4】</li>\n</ul>\n<blockquote>\n<p>比如当前的容量大小为100，当你存进第76个的时候，判断发现需要进行resize了，那就进行扩容</p>\n</blockquote>\n<ol start=\"2\">\n<li>分为两步：</li>\n</ol>\n<ul>\n<li>扩容：创建一个新的 Entry 空数组，长度是原数组的 2 倍。</li>\n<li>ReHash：遍历原 Entry 数组，把所有的Entry重新 Hash 到新数组。</li>\n</ul>\n<p><font color=#008000>为什么不直接复制过去？</font></p>\n<p>答：是因为长度扩大以后，Hash的规则也随之改变。</p>\n<p>（原来长度（Length）是 8 你位运算出来的值是 2 ，新的长度是 16 你位运算出来的值明显不一样了）</p>\n<blockquote>\n<p>Hash的公式 —&gt;  index = HashCode（Key） &amp; （Length - 1）</p>\n</blockquote>\n<p>扩容前：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-29-38.438Z.png\" alt=\"\"></p>\n<p>扩容后： </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-30-05.405Z.png\" alt=\"\"></p>\n<p>现在我们要在容量为2的容器里面<strong>用不同线程</strong>插入 A，B，C</p>\n<p>我们可以看到链表的指向 A =&gt; B =&gt; C</p>\n<p><strong>Tip：A的下一个指针是指向B的</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-41-18.300Z.png\" style=\"zoom:80%;\" />\n\n<p>因为resize的赋值方式，也就是使用了<strong>单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置</strong>，在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。</p>\n<p>所以：可能会出现 B 的下一个指针指向了 A</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-47-33.913Z.png\" style=\"zoom:80%;\" />\n\n<p>一旦几个线程都调整完成，就可能出现<strong>环形链表</strong>！</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T18-49-53.769Z.png\" style=\"zoom:80%;\" />\n\n<p>这个时候去取值,会出现 <strong>Infinite Loop</strong></p>\n<hr>\n<p>来到 jdk 8 链表有红黑树代码已经多了很多if else的逻辑判断了，红黑树的引入巧妙的将原本 O(n) 的时间复杂度降低到了 O(logn)。</p>\n<p>好处：如果<strong>使用尾插</strong>，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</p>\n<p>就是说原本是 A =&gt; B ，在扩容后那个链表还是 A =&gt; B </p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-13T19-42-46.501Z.png\" style=\"zoom: 80%;\" />\n\n<hr>\n<h4 id=\"解决哈希冲突的三种方法\"><a href=\"#解决哈希冲突的三种方法\" class=\"headerlink\" title=\"解决哈希冲突的三种方法\"></a>解决哈希冲突的三种方法</h4><ul>\n<li>拉链法【将所有哈希地址相同的记录都链接在同一链表中】（√）</li>\n<li>开放地址法【哈希冲突时，去寻找一个新的空闲的哈希地址】</li>\n<li>再散列法【同时构造多个不同的哈希函数，等发生哈希冲突时就使用第 2 个、第 3 个……等其他的哈希函数计算地址，直到不发生冲突为止】</li>\n</ul>\n<hr>\n<h4 id=\"HashMap-为什么扩容为2的整数次幂\"><a href=\"#HashMap-为什么扩容为2的整数次幂\" class=\"headerlink\" title=\"HashMap 为什么扩容为2的整数次幂\"></a>HashMap 为什么扩容为2的整数次幂</h4><h5 id=\"二进制算法\"><a href=\"#二进制算法\" class=\"headerlink\" title=\"二进制算法\"></a>二进制算法</h5><ul>\n<li>二进制的【或】运算【|】：遇 1 得 1</li>\n</ul>\n<p>运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1；</p>\n<ul>\n<li>二进制的【与】运算【&amp;】：遇 0 得 0</li>\n</ul>\n<p>运算规则：0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1;</p>\n<ul>\n<li>二进制的【非】运算【~】：各位取反</li>\n</ul>\n<p>运算规则：~1=0； ~0=1；</p>\n<ul>\n<li>二进制的【异或】运算【^】：相同为 0 ，不同为 1</li>\n</ul>\n<p>运算规则：0^0=0； 0^1=1； 1^0=1； 1^1=0；</p>\n<h5 id=\"回到问题\"><a href=\"#回到问题\" class=\"headerlink\" title=\"回到问题\"></a><font color=#008000>回到问题</font></h5><p>答案：</p>\n<ol>\n<li>加快哈希计算速度</li>\n<li>减少哈希冲突</li>\n</ol>\n<h5 id=\"为什么可以加快计算？\"><a href=\"#为什么可以加快计算？\" class=\"headerlink\" title=\"为什么可以加快计算？\"></a>为什么可以加快计算？</h5><p><font color=#008000><strong>Hash的公式 —&gt;  index = HashCode（Key） &amp; （Length - 1）</strong></font></p>\n<p>但是 % 计算比 &amp; 慢很多！</p>\n<h5 id=\"为什么可以减少冲突？\"><a href=\"#为什么可以减少冲突？\" class=\"headerlink\" title=\"为什么可以减少冲突？\"></a><font color=#008000>为什么可以减少冲突？</font></h5><p><strong>先说明：2进制中偶数的最后一位一定为 0；奇数的最后一位一定为 1</strong></p>\n<p>假设现在数组的长度 length 可能是偶数也可能是奇数；</p>\n<p>length 为偶数时：length-1 为奇数，hash &amp;(length-1) 的最后一位可能为 0，也可能为 1（这取决于 h 的值），<strong>这样便可以保证散列的均匀性</strong>。</p>\n<p>length 为奇数时：length-1 为偶数，hash &amp;(length-1) 的最后一位必为 0，即只能为偶数！这样任何 hash 值都只会被散列到数组的<strong>偶数下标位置</strong>上，这便<strong>浪费了近一半的空间</strong>！</p>\n<p>因此，length 取 2 的整数次幂，是为了使不同 hash 值发生碰撞的概率较小，这样就能使元素在哈希表中<font color=#008000>均匀地散列</font>。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>Java 7 在多线程操作 HashMap 时可能引起死循环，原因是扩容转移后前后链表顺序倒置，在转移过程中修改了原来链表中节点的引用关系。</p>\n</li>\n<li><p>Java 8 在同样的前提下并不会引起死循环，原因是扩容转移后前后链表顺序不变，保持之前节点的引用关系。</p>\n</li>\n</ul>\n<p>即使如此 Java 8 也是不建议把 HashMap 用在多线程中。</p>\n<p>因为无法保证上一秒 put 的值，下一秒 get 的时候还是原值，所以线程安全还是无法保证。</p>\n<hr>\n<h4 id=\"提问\"><a href=\"#提问\" class=\"headerlink\" title=\"提问\"></a>提问</h4><p><font color=#008000>HashMap的默认初始化长度是多少？</font></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20210614031720500.png\" alt=\"\"></p>\n<p>走，源码中找答案去</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/image-20210614031914998.png\" alt=\"\"></p>\n<p><strong>在 JDK1.8 的 236 行有 1&lt;&lt;4 就是 16</strong> （逻辑左移 4 位）</p>\n<p>现在回过头来再看一下，重写 equals 方法的时候需要重写 hashCode 方法</p>\n<ul>\n<li>如果两个对象的 hash 值相同，那么这两个对象并不一定是相同；</li>\n<li>如果两个对象的相同，那么这两个对象的 hash 值一定是相同；</li>\n</ul>\n<p><font color=#008000>HashMap 与 HashTable 的区别？</font></p>\n<ol>\n<li>HashMap 线程不安全，HashTable 线程安全。</li>\n<li>HashMap 是允许 key 和 value 为 null 值的，用 containsValue 和 containsKey 方法判断是否包含对应键值对；HashTable 键值对都不能为空，否则包空指针异常。</li>\n</ol>\n","categories":["面试篇"],"tags":["进阶","HashMap"]},{"title":"每日一面--TCP 3次挥手与4次握手","url":"/PaulGeorge123.github.io/2021/06/16/%E9%9D%A2%E8%AF%95--HTTP3%E6%AC%A1%E6%8C%A5%E6%89%8B%E4%B8%8E4%E6%AC%A1%E6%8F%A1%E6%89%8B/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 TCP 3次挥手与4次握手 ：</strong> 但不局限于介绍 TCP~</p>\n<hr>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p><strong>划重点</strong></p>\n<p><font color=#008000><code>HTTP</code>协议是基于<code>TCP/IP</code>的应用层协议</font></p>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>无论是 Java、PHP 开发者，还是运维人员，只要从事互联网行业，面试时都可能被问到 HTTP 协议相关知识。</p>\n<p>那么要弄清楚 http 的相关知识必需要先来了解一下 http 的 7 层模型。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"OSI-七层模型\"><a href=\"#OSI-七层模型\" class=\"headerlink\" title=\"OSI 七层模型\"></a>OSI 七层模型</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1612150605-NindRH-image.png\" style=\"zoom:67%;\" />\n\n<hr>\n<p>由上至下依次为：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。</p>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><h4 id=\"HTTP-头部包含哪些信息\"><a href=\"#HTTP-头部包含哪些信息\" class=\"headerlink\" title=\"HTTP 头部包含哪些信息\"></a>HTTP 头部包含哪些信息</h4><p>HTTP 头部本质上是一个传递额外重要信息的键值对。主要分为：通用头部，请求头部，响应头部和实体头部。</p>\n<p>下面重点来说一下我们熟悉的 “实体头部” </p>\n<table>\n<thead>\n<tr>\n<th>协议头</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>对某网络资源的有效的请求行为，不允许则返回405</td>\n<td>Allow: GET, HEAD</td>\n</tr>\n<tr>\n<td>Content-encoding</td>\n<td>返回内容的编码方式</td>\n<td>Content-Encoding: gzip</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>返回内容的字节长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应体的语言</td>\n<td>Content-Language: en,zh</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>请求资源可替代的备用的另一地址</td>\n<td>Content-Location: /index.htm</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>返回资源的MD5校验值</td>\n<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>在整个返回体中本部分的字节位置</td>\n<td>Content-Range: bytes 21010-47021/47022</td>\n</tr>\n<tr>\n<td><strong>Content-Type</strong></td>\n<td><strong>返回内容的MIME类型</strong></td>\n<td><strong>Content-Type: text/html; charset=utf-8</strong></td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>响应过期的日期和时间</td>\n<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源的最后修改时间</td>\n<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"POST-和-Get-的区别\"><a href=\"#POST-和-Get-的区别\" class=\"headerlink\" title=\"POST 和 Get 的区别\"></a>POST 和 Get 的区别</h4><p>我们知道，HTTP定义了与服务器进行交互的不同方法，常见的有四种：GET、POST、PUT、DELETE。其中，GET 和 POST 最常用。</p>\n<ul>\n<li><code>GET</code> 用来获取资源，它只是获取、查询数据，不会修改服务器的数据。</li>\n<li><code>POST</code> 则是可以向服务器发送修改请求，进行数据的修改的。</li>\n</ul>\n<h5 id=\"从性能角度\"><a href=\"#从性能角度\" class=\"headerlink\" title=\"从性能角度\"></a>从性能角度</h5><ol>\n<li>post 携带的请求头更多；</li>\n<li>握手次数 post：get （6 : 4）；</li>\n<li>get 保存数据（Ajax），post则不会；</li>\n</ol>\n<h5 id=\"从安全角度\"><a href=\"#从安全角度\" class=\"headerlink\" title=\"从安全角度\"></a>从安全角度</h5><ol>\n<li>post 更加的安全（请求数据不会作为 url 的一部分，缓存、日志等）</li>\n<li>post 发送的数据量更大，get 有 url 的长度限制；</li>\n<li>post 发送的更多的数据类型 ， get 只能是 ASCLL；</li>\n</ol>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>我们常说的一些区别都是一些表面上的。</p>\n<p>比如：<code>GET</code>没有<code>POST</code>安全；<code>GET</code>请求时<code>URL</code>的长度是有限制的；<code>GET</code>没有<code>body</code>而<code>POST</code>有<code>body</code>等等。</p>\n<p>这些都是针对浏览器中的要求， 在使用<code>HTTP</code>作为接口进行传输时，就没有这么多条条框框了。</p>\n<p>此时<code>GET</code>和<code>POST</code>只是<code>HTTP</code>协议中的两种请求方式，而<code>HTTP</code>协议是基于<code>TCP/IP</code>的应用层协议， 无论<code>GET</code>还是<code>POST</code>，用的都是同一个传输层协议，所以在传输上没有区别。</p>\n<p><code>GET</code>也可以有<code>body</code>，<code>POST</code>也不一定非要使用<code>body</code></p>\n<hr>\n<h4 id=\"HTTP-和-HTTPS-的区别\"><a href=\"#HTTP-和-HTTPS-的区别\" class=\"headerlink\" title=\"HTTP 和 HTTPS 的区别\"></a>HTTP 和 HTTPS 的区别</h4><p><font color=#008000>HTTP 和 HTTPS 的区别有哪些？</font></p>\n<p>最明显直观的就是在网页上访问网址，地址栏位的 url 显示区别</p>\n<ul>\n<li>如果是 http 请求，则显示为不安全</li>\n<li>如果是 https 请求，则显示为安全</li>\n</ul>\n<h5 id=\"什么是HTTP\"><a href=\"#什么是HTTP\" class=\"headerlink\" title=\"什么是HTTP?\"></a>什么是HTTP?</h5><p>超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据。</p>\n<p><strong>HTTP报文格式</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/http_get_post.png\" style=\"zoom:67%;\" />\n\n\n\n<h5 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS?\"></a>什么是HTTPS?</h5><p><strong>HTTPS = SSL + HTTP</strong></p>\n<p>HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p><strong>Http：</strong></p>\n<ul>\n<li>无状态 【是指协议对于交互性场景没有记忆能力、cookie / session 让服务器有记忆能力】</li>\n<li>无连接 【限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接】</li>\n<li>基于请求和响应</li>\n<li>简单快速</li>\n<li>使用明文通信（不会确认通信方）</li>\n</ul>\n<p><strong>Https:</strong></p>\n<ul>\n<li>通过 SSL / TLS 提供加密</li>\n</ul>\n<h5 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h5><ol>\n<li>Https更加的安全</li>\n<li>Https需要申请证书</li>\n<li>端口不同：http =&gt; 80； https =&gt; 443；</li>\n<li>状态不同：http =&gt; 无状态； https =&gt; 协议加密；</li>\n</ol>\n<h5 id=\"HTTP通信传输\"><a href=\"#HTTP通信传输\" class=\"headerlink\" title=\"HTTP通信传输\"></a>HTTP通信传输</h5><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_00-36-54.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><h4 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h4><p>三次握手经典图例（客户端请求服务端获取数据）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_01-13-48.png\" alt=\"\"></p>\n<p><strong>图中单词解释：</strong></p>\n<p>【seq】序号</p>\n<p>【ack】确认序号</p>\n<p>【SYN】同步                                                        </p>\n<p>【ACK】确认</p>\n<p><strong>三次握手</strong></p>\n<ul>\n<li><p>第一次握手：客户端首先向服务端发送请求，tcp 报文头中发送标识 SYN=1 (SYN表示客户端请求跟服务端建立连接),序号 Seq=x。</p>\n</li>\n<li><p>第二次握手：服务端在接收到客户端发送的请求之后，需要告诉客户端已收到请求，tcp 报文头中发送标识SYN=1,ACK=1(SYN表示服务端请求跟客户端建立连接，ACK 表示对客户端的连接请求进行应答),序号 Seq=y,确认号=x+1（表示对客户端发送的序号Seq=x的请求进行确认）。</p>\n</li>\n<li><p>第三次握手：客户端在接收到服务端发送的请求和确认信息之后，同样需要告诉服务端已收到信息，tcp 报文头中发送标识 ACK=1(ACK表示对服务端的连接请求进行应答),序号 Seq=x+1，确认号 Ack=y+1（表示对服务端发送的序号 Seq=y 的请求进行确认）</p>\n<p>当三次握手都成功的时候，我们发现此时客户端发送的信息服务端能够收到并且服务端发送的信息客户端也能收到，通信双方<strong>连接成功</strong>。</p>\n</li>\n</ul>\n<p><strong>注意</strong></p>\n<ol>\n<li>发送请求中的发送标识SYN、ACK表示的是发送报文中两个标识位！而Seq和Ack分别代表发送序号和确认号。</li>\n<li>服务端在接收到了客户端的连接请求后，回复中同时发送了SYN、ACK两个标识位，将建立连接的请求和对客户端的确认应答在同一个数据包中发送了，这也是为什么只需要三次握手，就能建立连接</li>\n</ol>\n<h4 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h4><p><font color=#008000>当客户端和服务端之间的数据传输完毕之后，我们就需要释放连接（一直建立连接会浪费资源），那为啥需要四次挥手呢？</font></p>\n<p>四次挥手经典图例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_01-35-29.png\" alt=\"\"></p>\n<p><strong>图中单词解释：</strong></p>\n<p>【MSL】报文最大生存时间 （它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃）</p>\n<p><strong>四次挥手</strong></p>\n<ul>\n<li><p>第一次挥手：客户端向服务端发送断开连接的请求，告诉服务端我这边不需要再请求你的数据了，tcp报文头中发送标识FIN=1（表示客户端请求跟服务端断开连接）,序号Seq=u</p>\n</li>\n<li><p>第二次挥手：服务端在接收到客户端发送的断开请求后，需告诉客户端已收到请求，tcp报文头中发送标识ACK=1(ACK表示对客户端的断开连接的请求进行应答),序号Seq=v,确认号Ack=u+1（表示对客户端发送的序号Seq=u的请求进行确认）。</p>\n</li>\n<li><p>第三次挥手：当服务端数据传输完毕之后，向客户端发起断开连接的请求，告诉客户端我这边也不需要再发送数据了，tcp报文头中发送标识FIN=1，ACK=1(FIN表示服务端请求跟客户端断开连接，ACK表示对上一次客户端的断开连接的请求进行应答),序号Seq=w,确认号Ack=u+1（表示对客户端发送的序号Seq=u的请求进行确认）</p>\n</li>\n<li><p>第四次挥手：客户端接收到服务发送的断开连接请求后，需告诉服务端已收到信息，作出应答，tcp报文头中发送标识ACK=1(ACK表示对服务端的断开连接的请求进行应答),序号Seq=u+1,确认号Ack=w+1（表示对服务端发送的序号Seq=w的请求进行确认）</p>\n</li>\n</ul>\n<p><font color=#008000>1. 为什么不能像握手的时候一样三次握手，为啥需要四次挥手呢？</font></p>\n<p>答：在实际的网络中，服务端在接收到客户端断开连接的请求的时候，此时服务端可能还有数据没有传输完毕，不能立即向客户端发送断开连接的请求！</p>\n<p>当客户端主动发起断开请求的时候，服务器先回应一个确认，等所有数据传输完毕后再发送服务器断开的请求。</p>\n<p><font color=#008000>2. 为什么需要维持2MSL呢？</font></p>\n<p>答：第4次挥手的时候客户端向服务端发送断开连接的请求的确认ACK，如果客户端发送完成后就直接就关闭连接，如果由于网络原因服务端没有收到ACK，那服务端就没法关闭连接了！</p>\n<p>因此客户端在回复确认后，还需要等待，万一服务端没有收到应答还会继续发送断开连接的请求；</p>\n<hr>\n<h4 id=\"TCP-长连接和短连接\"><a href=\"#TCP-长连接和短连接\" class=\"headerlink\" title=\"TCP 长连接和短连接\"></a>TCP 长连接和短连接</h4><p><strong>长连接</strong>：</p>\n<p> 所谓长连接，指在一个TCP连接上可以连续发送多个数据包，在TCP连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持（不发生RST包和四次挥手）。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_02-09-20.png\" alt=\"\"></p>\n<p><strong>短连接</strong>：</p>\n<p>短连接是指通信双方有数据交互时，就建立一个TCP连接，数据发送完成后，则断开此TCP连接（管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段）；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_02-08-13.png\" alt=\"\"></p>\n<p><strong>应用场景：</strong></p>\n<p> 长连接多用于操作频繁（读写），点对点的通讯，而且连接数不能太多情况。</p>\n<p>例如：</p>\n<ul>\n<li>数据库的连接用长连接（如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费）</li>\n<li>微信，QQ 之类的即时通讯（文本消息、语音消息、视频消息、图片消息）。</li>\n</ul>\n<p>短连接多用于 WEB 网站的 http 服务。</p>\n<p>因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源。</p>\n<hr>\n<h4 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h4><p>无连接协议，也称透明协议，也位于传输层。</p>\n<p><strong>UDP 与 TCP 区别</strong>：</p>\n<ol>\n<li><p>TCP 提供面向连接的传输，通信前要先建立连接（三次握手机制）； </p>\n<p>UDP 提供无连接的传输，通信前不需要建立连接。</p>\n</li>\n<li><p>TCP 提供可靠的传输（有序，无差错，不丢失，不重复）；</p>\n<p> UDP 提供不可靠的传输。</p>\n</li>\n<li><p>TCP 面向字节流的传输，因此它能将信息分割成组，并在接收端将其重组； </p>\n<p>UDP 是面向数据报的传输，没有分组开销。</p>\n</li>\n<li><p>TCP 提供拥塞控制和流量控制机制； </p>\n<p>UDP 不提供拥塞控制和流量控制机制。</p>\n</li>\n</ol>\n<p><strong>对比</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">UDP</th>\n<th align=\"left\">TCP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">是否连接</td>\n<td align=\"left\">无连接</td>\n<td align=\"left\">面向连接</td>\n</tr>\n<tr>\n<td align=\"left\">是否可靠</td>\n<td align=\"left\">不可靠传输，不使用流量控制和拥塞控制</td>\n<td align=\"left\">可靠传输，使用流量控制和拥塞控制</td>\n</tr>\n<tr>\n<td align=\"left\">连接对象个数</td>\n<td align=\"left\">支持一对一，一对多，多对一和多对多交互通信</td>\n<td align=\"left\">只能是一对一通信</td>\n</tr>\n<tr>\n<td align=\"left\">传输方式</td>\n<td align=\"left\">面向报文</td>\n<td align=\"left\">面向字节流</td>\n</tr>\n<tr>\n<td align=\"left\">首部开销</td>\n<td align=\"left\">首部开销小，仅8字节</td>\n<td align=\"left\">首部最小20字节，最大60字节</td>\n</tr>\n<tr>\n<td align=\"left\">适用场景</td>\n<td align=\"left\">适用于实时应用（IP电话、视频会议、直播等）</td>\n<td align=\"left\">适用于要求可靠传输的应用，例如文件传输</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><h4 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h4><p>IP协议（Internet Protocol，互联网协议），是TCP/IP协议栈中最核心的协议之一，通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。</p>\n<ul>\n<li><p>IP 就是一张身份证，存在于电脑、手机、监控摄像头、汽车等任何需要联网的设备上面；</p>\n</li>\n<li><p>IP 是可以被追踪到和定位的；</p>\n</li>\n</ul>\n<p>面试的时候有面试官聊到关于网络相关考点，于是问道：</p>\n<p><font color=#008000>能说出访问一个网页的全过程？</font></p>\n<p>答：打开浏览器，在地址栏输入URL，回车，出现网页内容。</p>\n<p>太笼统了，要具体！</p>\n<p><font color=#008000>在地址栏输入URL后，整个过程发生了什么？其中的原理是什么？</font></p>\n<p>答：整个过程可以概括为几下几个部分：</p>\n<ol>\n<li>通过解析域名找到 IP，如果缓存里没有就要请求 DNS 服务器得到 IP 地址；</li>\n<li>与目的主机进行 TCP 连接（三次握手）构建 HTTP 请求；</li>\n<li>发送与收取数据（浏览器与目的主机开始HTTP访问过程）；</li>\n<li>与目的主机断开 TCP 连接（四次挥手）；</li>\n</ol>\n<h5 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h5><p><font color=#008000>能简单说说域名解析？并且一个域名可以对应多个IP地址吗？</font></p>\n<p>域名通过 <code>DNS</code> 解析 得到 <code>IP</code> </p>\n<p>首先得知道啥是 DNS ？</p>\n<p>DNS（Domain Name System）是因特网的一项服务，它作为域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。</p>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><ul>\n<li>解析域名</li>\n</ul>\n<p>人们在通过浏览器访问网站时只需要记住网站的域名即可，而不需要记住那些不太容易理解的IP地址。</p>\n<p>在DNS系统中有一个比较重要的的资源类型叫做主机记录也称为A记录，A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。</p>\n<ul>\n<li>负载均衡</li>\n</ul>\n<p>DNS除了能解析域名之外还具有负载均衡的功能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-17_02-49-29.png\" alt=\"\"></p>\n<hr>\n<p>由上图可以看出，在 DNS 服务器中应该配置了多个A记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">www.apusapp.com IN A 114.100.20.201;</span><br><span class=\"line\">www.apusapp.com IN A 114.100.20.202;</span><br><span class=\"line\">www.apusapp.com IN A 114.100.20.203;</span><br></pre></td></tr></table></figure>\n\n<p>每次域名解析请求都会根据对应的负载均衡算法计算出一个不同的IP地址并返回，这样A记录中配置多个服务器就可以构成一个集群，并可以实现负载均衡。</p>\n<p>一个域名可以对应多个IP地址。</p>\n","categories":["面试篇"],"tags":["进阶","计算机网络"]},{"title":"每日一面--HashMap红黑树","url":"/PaulGeorge123.github.io/2021/06/13/%E9%9D%A2%E8%AF%95--HashMap%E7%BA%A2%E9%BB%91%E6%A0%91/","content":"<blockquote>\n<p>每天一篇 Java 小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 HashMap为什么用红黑树：</strong></p>\n<hr>\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>上文说到，HashMap的扩容原理。</p>\n<p>JDK1.7 使用的是 <strong>数组 + 单链表</strong> 的数据结构。</p>\n<p>JDK1.8 及之后时，使用的是数组+链表+红黑树的数据结构。</p>\n<p>当阈值是默认阈值 <strong>0.75</strong>，链表的深度大于等于 <strong>8</strong>，数组容量大于等于 <strong>64</strong> 时，扩容的时候会把链表转成红黑树，时间复杂度从 <strong>O(n)</strong> 变成 <strong>O(logN)</strong>；当红黑树的节点深度小于等于 <strong>6</strong> 时，红黑树会转为<strong>链表结构</strong>。</p>\n<p><strong><font color=#008000>在Java8中为什么要使用红黑树来实现的HashMap？</font></strong></p>\n<p>答：好处就是避免在最极端的情况下冲突链表变得很长很长，在查询的时候，效率会非常慢。（单向链表）</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"什么是红黑树呢？\"><a href=\"#什么是红黑树呢？\" class=\"headerlink\" title=\"什么是红黑树呢？\"></a>什么是红黑树呢？</h4><p>别急，先来回顾一下什么是二叉树！</p>\n<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><p>简单地理解，满足以下两个条件的树就是二叉树：</p>\n<ol>\n<li>本身是有序树；</li>\n<li>树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；</li>\n</ol>\n<blockquote>\n<p>二叉树还可以继续分类，衍生出<strong>满二叉树</strong>和<strong>完全二叉树</strong>。</p>\n</blockquote>\n<h4 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h4><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为<strong>满二叉树</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T15-34-34.898Z.png\" alt=\"\"></p>\n<h4 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h4><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为<strong>完全二叉树</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T15-35-38.517Z.png\" alt=\"\"></p>\n<center>完全二叉树</center>\n\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T15-36-27.077Z.png\" alt=\"\"></p>\n<center>非完全二叉树</center>\n\n<hr>\n<p>好了说完二叉树相关的知识后，还没有引入红黑树，因为在不断优化的过程中还是需要慢慢来，回顾一下平衡二叉树（AVL Tree）。</p>\n<h4 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h4><p>二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T12-57-32.630Z.png\" style=\"zoom:67%;\" />\n\n<p>对二叉树的节点进行查找发现深度为 1 的节点的查找次数为 1，深度为2的查找次数为 2，深度为n的节点的查找次数为n，因此其平均查找次数为  (1+2+2+3+3+3) / 6 = 2.3 次</p>\n<p>当然上面是理想的情况，因为二叉查找树可以任意地构造，同样是 2,3,5,6,7,8 这六个数字，也可以按照下图的方式来构造。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T13-03-36.302Z.png\" style=\"zoom:67%;\" />\n\n<p>但是这棵二叉树的查询效率就低了。因此若想二叉树的查询效率尽可能高，需要这棵二叉树是平衡的，从而引出新的定义——平衡二叉树，或称 AVL 树。</p>\n<h4 id=\"平衡二叉树（AVL-Tree）\"><a href=\"#平衡二叉树（AVL-Tree）\" class=\"headerlink\" title=\"平衡二叉树（AVL Tree）\"></a>平衡二叉树（AVL Tree）</h4><p>平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足任何节点的两个子树的高度最大差为1。</p>\n<p>AVL树，它的任何节点的两个子树的高度差&lt;=1；</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T13-13-21.964Z.png\" style=\"zoom: 67%;\" />\n\n<center>AVL树</center>\n\n<p>不是AVL树，其根节点的左子树高度为3，而右子树高度为1；</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T13-15-54.465Z.png\" style=\"zoom:67%;\" />\n\n<center>非AVL树</center>\n\n\n\n<p>至此，引出红黑树(弱平衡二叉树)</p>\n<h4 id=\"红黑树-弱平衡二叉树\"><a href=\"#红黑树-弱平衡二叉树\" class=\"headerlink\" title=\"红黑树(弱平衡二叉树)\"></a>红黑树(弱平衡二叉树)</h4><p>红黑树也属于平衡二叉树，但在每个节点增加一个存储位表示节点的颜色，非红即黑。</p>\n<p>红黑树的英文是“Red-Black Tree”，简称R-B Tree。它是一种不严格的平衡二叉查找树，我前面说了，它的定义是不严格符合平衡二叉查找树的定义的。</p>\n<p>顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色除此之外，一棵红黑树还需要满足这样几个要求：</p>\n<ul>\n<li>性质1：每个节点要么是黑色，要么是红色。</li>\n<li>性质2：根节点是黑色。</li>\n<li>性质3：每个叶子节点（NIL）是黑色。</li>\n<li>性质4：每个红色结点的两个子结点一定都是黑色。</li>\n<li><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></li>\n</ul>\n<p>从性质5又可以推出：<strong>如果一个结点存在黑子结点，那么该结点肯定有两个子结点</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T16-37-06.560Z.png\" style=\"zoom:80%;\" />\n\n\n\n<hr>\n<h4 id=\"B树（Balance-Tree）\"><a href=\"#B树（Balance-Tree）\" class=\"headerlink\" title=\"B树（Balance-Tree）\"></a>B树（Balance-Tree）</h4><p><strong>B树是一颗多路平衡查找树</strong></p>\n<p>它类似普通的平衡二叉树，不同的一点是B 树允许每个节点有更多的子节点。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T14-44-46.777Z.png\" alt=\"\"></p>\n<p>B 树有如下特点:</p>\n<ol>\n<li>所有键值分布在整颗树中（索引值和具体data都在每个节点里）；</li>\n<li>任何一个关键字出现且只出现在一个结点中；</li>\n<li>搜索有可能在非叶子结点结束（最好情况 O(1) 就能找到数据）；</li>\n<li>在关键字全集内做一次查找,性能逼近二分查找；</li>\n</ol>\n<p><strong>B 树是专门为外部存储器设计的</strong>。如磁盘，它对于读取和写入大块数据有良好的性能，所以一般被用在文件系统及数据库中。</p>\n<p><strong>B 树允许每个节点有更多的子节点即可（多叉树）</strong>。子节点数量一般在上千，具体数量依赖外部存储器的特性。</p>\n<h4 id=\"B-树（-Balance-Tree）\"><a href=\"#B-树（-Balance-Tree）\" class=\"headerlink\" title=\"B+树（ Balance+Tree）\"></a>B+树（ Balance+Tree）</h4><p><strong>B+Tree是在B Tree基础上的一种优化</strong>，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</p>\n<p>B+Tree相对于B Tree有几点不同：</p>\n<ol>\n<li>非叶子节点只存储键值信息；</li>\n<li>所有叶子节点之间都有一个链指针；</li>\n<li><strong>数据记录都存放在叶子节点中</strong>；（查询时间复杂度固定为 log n）</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2021-06-14T16-41-28.142Z.png\" alt=\"\"></p>\n<p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种<strong>链式环结构</strong>。</p>\n<p>咋一看 B+ 树好像查询要比 B 树慢一些（同样的数据，查询【IO】次数变多了），但是是事实如此吗？</p>\n<p>根据空间局部性原理：如果一个存储器的某个位置被访问，那么将它附近的位置也会被访问。</p>\n<p>B+ 树可以很好的利用局部性原理，若我们访问节点 key为 80，则 key 为 79、83、87的节点将来也可能被访问，<strong>磁盘预读原理</strong>就会提前把这些数据都读进内存，使得范围查询和排序都很快，从而减少了磁盘 IO 的次数。</p>\n<p>由于B树的节点都存了 key 和 data ，而 B+ 树只有叶子节点存 data，非叶子节点都只是索引值，没有实际的数据，这就时 B+ 树在一次IO里面，能读出的索引值更多。从而减少查询时候需要的IO次数！</p>\n<p>B+ 树优势：</p>\n<ol>\n<li>B+ 树叶节点两两相连可大大增加区间访问性；</li>\n<li>B+ 树更适合外部存储。由于内节点无 data 域，每个节点能索引的范围更大更精确；</li>\n</ol>\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><p><strong><font color=#008000>MySQL 为什么使用 B Tree（B+Tree）存储？</font></strong></p>\n<p>这就是下篇博客要着重介绍的东西咯~</p>\n<p>我好像发现通过一个 hashmap 能够牵扯出一连串的知识啊！</p>\n<p>这可能就是它的知识体系吧，正如我们在面试的过程中，面试官通过一个”点“，问着问着就问出来一个“面”。</p>\n","categories":["面试篇"],"tags":["进阶","HashMap"]},{"title":"每日一面--Maven依赖冲突","url":"/PaulGeorge123.github.io/2021/07/17/%E9%9D%A2%E8%AF%95--Maven/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下关于 Maven 的依赖冲突 ：</strong> </p>\n<hr>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/maven.png\" style=\"zoom: 50%;\" />\n\n\n\n<p><strong>写在前面</strong></p>\n<p>之前在使用 maven 的时候还真的没有特意的留意过关于依赖冲突的问题。</p>\n<p>这不，面试中被问到还有点猝不及防！</p>\n<p>来吧，一起来回顾一遍~</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"Maven-是什么？\"><a href=\"#Maven-是什么？\" class=\"headerlink\" title=\"Maven 是什么？\"></a>Maven 是什么？</h3><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p>\n<p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p>\n<p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p>\n<hr>\n<h3 id=\"Maven-坐标\"><a href=\"#Maven-坐标\" class=\"headerlink\" title=\"Maven 坐标\"></a>Maven 坐标</h3><p>【一个完整的坐标信息，由 groupId、artifactId、version、packaging、classifier 组成】</p>\n<h4 id=\"GroupId\"><a href=\"#GroupId\" class=\"headerlink\" title=\"GroupId\"></a>GroupId</h4><p><strong>定义当前 Maven 项目从属的实际项目；</strong></p>\n<ol>\n<li>Maven 项目和实际项目不一定是一一对应的</li>\n<li>groupId 不应该同开发项目的公司或组织对应；</li>\n<li>groupId 的表述形式同 <a href=\"http://c.biancheng.net/java/\" target=\"_blank\" rel=\"noopener\">Java</a> 包名的表述方式类似，通常与域名反向一一对应；</li>\n</ol>\n<h4 id=\"ArtifactId\"><a href=\"#ArtifactId\" class=\"headerlink\" title=\"ArtifactId\"></a>ArtifactId</h4><p><strong>定义实际项目中的一个 Maven 项目（实际项目中的一个模块）</strong></p>\n<p>推荐命名的方式为：实际项目名称-模块名称；</p>\n<h4 id=\"Version\"><a href=\"#Version\" class=\"headerlink\" title=\"Version\"></a>Version</h4><p><strong>定义 Maven 当前所处的版本</strong></p>\n<h4 id=\"Packaging\"><a href=\"#Packaging\" class=\"headerlink\" title=\"Packaging\"></a>Packaging</h4><p><strong>定义 Maven 项目的打包方式【jar、war】</strong></p>\n<hr>\n<h3 id=\"Maven-POM\"><a href=\"#Maven-POM\" class=\"headerlink\" title=\"Maven POM\"></a>Maven POM</h3><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p>\n<p>POM 中可以指定以下配置：</p>\n<ul>\n<li>项目依赖 （√）</li>\n<li>插件（√）</li>\n<li>执行目标（√）</li>\n<li>项目构建 profile（√）</li>\n<li>项目版本（√）</li>\n<li>项目开发者列表</li>\n<li>相关邮件列表信息</li>\n</ul>\n<p>举个荔枝：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span> = <span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span> = <span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span> = <span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 模型版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.companyname.project-group<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 版本号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Maven-生命周期\"><a href=\"#Maven-生命周期\" class=\"headerlink\" title=\"Maven 生命周期\"></a>Maven 生命周期</h3><h4 id=\"Maven-构建生命周期\"><a href=\"#Maven-构建生命周期\" class=\"headerlink\" title=\"Maven 构建生命周期\"></a>Maven 构建生命周期</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_15-49-52.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">阶段</th>\n<th align=\"center\">处理</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">验证 validate</td>\n<td align=\"center\">验证项目</td>\n<td align=\"center\">验证项目是否正确且所有必须信息是可用的</td>\n</tr>\n<tr>\n<td align=\"center\">编译 compile</td>\n<td align=\"center\">执行编译</td>\n<td align=\"center\">源代码编译在此阶段完成</td>\n</tr>\n<tr>\n<td align=\"center\">测试 test</td>\n<td align=\"center\">测试</td>\n<td align=\"center\">使用适当的单元测试框架（例如JUnit）运行测试。</td>\n</tr>\n<tr>\n<td align=\"center\">包装 package</td>\n<td align=\"center\">打包</td>\n<td align=\"center\">创建JAR/WAR包如在 pom.xml 中定义提及的包</td>\n</tr>\n<tr>\n<td align=\"center\">检查 verify</td>\n<td align=\"center\">检查</td>\n<td align=\"center\">对集成测试的结果进行检查，以保证质量达标</td>\n</tr>\n<tr>\n<td align=\"center\">安装 install</td>\n<td align=\"center\">安装</td>\n<td align=\"center\">安装打包的项目到本地仓库，以供其他项目使用</td>\n</tr>\n<tr>\n<td align=\"center\">部署 deploy</td>\n<td align=\"center\">部署</td>\n<td align=\"center\">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td>\n</tr>\n</tbody></table>\n<h4 id=\"mvn-打包比较常用功能（重点）\"><a href=\"#mvn-打包比较常用功能（重点）\" class=\"headerlink\" title=\"mvn 打包比较常用功能（重点）\"></a>mvn 打包比较常用功能（重点）</h4><ul>\n<li><p><code>clean</code>：执行该命令会删除项目路径下的 <font color=#FF8C00>target</font> 文件，但是不会删除本地的 maven 仓库已经生成的 jar 文件。</p>\n</li>\n<li><p><code>compile</code>：编译命令，会在项目路径下生成一个 <font color=#FF8C00>target</font> 目录，在该目录中包含一个classes文件夹，里面全是生成的class文件及字节码文件。</p>\n</li>\n<li><p><code>package</code>：这个命令会在你的项目路径下一个 <font color=#FF8C00>target</font> 目录，并且拥有 compile 命令的功能进行编译，同时会在 <font color=#FF8C00>target</font> 目录下生成项目的 jar/war 文件。</p>\n</li>\n<li><p><code>install</code>：该命令包含了 package 命令功能，不但会在项目路径下生成 class 文件和 jar 包，同时会在本地 maven 仓库生成 jar 文件，供其他项目使用。</p>\n</li>\n</ul>\n<p>注意：</p>\n<p><font color=#FF8C00>同时执行多次install或者package命令会每次都更新jar文件</font></p>\n<hr>\n<h3 id=\"Maven-仓库\"><a href=\"#Maven-仓库\" class=\"headerlink\" title=\"Maven 仓库\"></a>Maven 仓库</h3><h4 id=\"Maven-仓库类型\"><a href=\"#Maven-仓库类型\" class=\"headerlink\" title=\"Maven 仓库类型\"></a>Maven 仓库类型</h4><p>Maven 仓库有三种类型：</p>\n<ul>\n<li>本地（local）：Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。</li>\n<li>中央（central）：Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。</li>\n<li>远程（remote）：如果 Maven 在中央仓库中也找不到依赖的文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。</li>\n</ul>\n<h4 id=\"Maven-依赖搜索顺序\"><a href=\"#Maven-依赖搜索顺序\" class=\"headerlink\" title=\"Maven 依赖搜索顺序\"></a>Maven 依赖搜索顺序</h4><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p>\n<ul>\n<li><strong>步骤 1</strong> － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li>\n<li><strong>步骤 2</strong> － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li>\n<li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li>\n<li><strong>步骤 4</strong> － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li>\n</ul>\n<h4 id=\"Maven-阿里云-Aliyun-仓库\"><a href=\"#Maven-阿里云-Aliyun-仓库\" class=\"headerlink\" title=\"Maven 阿里云(Aliyun)仓库\"></a>Maven 阿里云(Aliyun)仓库</h4><p>修改 <code>maven</code> 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Maven-的排除、归类和优化依赖\"><a href=\"#Maven-的排除、归类和优化依赖\" class=\"headerlink\" title=\"Maven 的排除、归类和优化依赖\"></a>Maven 的排除、归类和优化依赖</h3><h4 id=\"排除依赖\"><a href=\"#排除依赖\" class=\"headerlink\" title=\"排除依赖\"></a>排除依赖</h4><p>Maven 可能会自动引入快照版本的依赖，而快照版本的依赖是不稳定的，这时候就需要避免引入快照版本。这样的话需要用一种方式告知 Maven 排除快照版本的依赖引入，这种做法就是排除依赖。</p>\n<p>直接依赖的配置里面添加 exclusions（除外） → exclusion（排除）元素，指定要排除依赖的 groupId 和 artifactId 就行。</p>\n<p>例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.build.hibernate.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"归类依赖\"><a href=\"#归类依赖\" class=\"headerlink\" title=\"归类依赖\"></a>归类依赖</h4><p>在引用依赖的时候，很多情况需要引入一个 Maven 项目的多个模块，这些模块都应该是相同的版本。</p>\n<p>例如在下次升级，需要将 1.0 版本升级成 2.0 版本，这样就需要将 org.springframework 的每个模块的版本都统一更改，这样做很容易出现不一致的情况，就很容易出错。</p>\n<p>为了避免出现这种情况，可以在 pom.xml 中定义一个属性名称描述版本的值。</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 3.2.16.RELEASE,3.1.4.RELEASE --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.spring.version</span>&gt;</span>4.2.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">project.build.spring.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"优化依赖\"><a href=\"#优化依赖\" class=\"headerlink\" title=\"优化依赖\"></a>优化依赖</h4><p> Maven 定位依赖的方式、传递依赖的规则以及怎么样排除依赖等。但是要实现这些动作，还必须对项目中的依赖有全面的了解，这样才能更有效地达到目的。</p>\n<p>查看依赖的相关命令</p>\n<p>列出所有的依赖列表。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mvn dependency:list</span><br></pre></td></tr></table></figure>\n\n<p>以树形结构方式，列出依赖和层次关系。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mvn dependency:tree</span><br></pre></td></tr></table></figure>\n\n<p>分析主代码、测试代码编译的依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mvn dependency:analyze</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"面试一下\"><a href=\"#面试一下\" class=\"headerlink\" title=\"面试一下\"></a>面试一下</h3><h4 id=\"什么是依赖冲突-版本冲突\"><a href=\"#什么是依赖冲突-版本冲突\" class=\"headerlink\" title=\"什么是依赖冲突/版本冲突?\"></a>什么是依赖冲突/版本冲突?</h4><p>Maven 的依赖机制会导致 jar 包的冲突</p>\n<blockquote>\n<p>举个例子，在项目中，使用了两个 jar 包，分别是 A 和 B。<br>现在 A 需要依赖另一个 jar 包 C，B 也需要依赖 C。<br>但是 A 依赖的 C 的版本是 1.0，B 依赖的C的版本是 2.0。<br>这时候，Maven 会将这 1.0 的 C 和 2.0 的 C 都下载到你的项目中，这样你的项目中就存在了不同版本的 C。</p>\n</blockquote>\n<p>这时Maven会采用<a href=\"#dependency\"><font color=#FF8C00>最短路径优先原则</font></a>（即，根据寻找到的依赖路径中最短的），来决定使用哪个版本的 jar 包，而另一个无用的 jar 包则未被使用，这就是所谓的依赖冲突。</p>\n<p>注意：</p>\n<p>在大多数时候，依赖冲突可能并不会对系统造成什么异常，因为 Maven 始终选择了一个 jar 包来使用。<br>但是，不排除在某些特定条件下，会出现类似找不到类的异常。<br>所以，只要存在依赖冲突，最好还是解决掉，不要给系统留下隐患。</p>\n<p>解决办法：</p>\n<p>最经典的就是 log4j 的依赖排除，使用 Maven 提供的标签 exclusion</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：</p>\n<p>log4j-core 本身是依赖了 log4j-api 的，但是因为一些其他的模块也依赖了 log4j-api，并且两个 log4j-api 版本不同，所以我们使用标签排除掉 log4j-core 所依赖的 log4j-api，这样 Maven 就不会下载 log4j-core 所依赖的 log4j-api 了，也就保证了我们的项目中只有一个版本的 log4j-api。</p>\n<h4 id=\"maven-的依赖原则\"><a href=\"#maven-的依赖原则\" class=\"headerlink\" title=\"maven 的依赖原则\"></a><span id=\"dependency\">maven 的依赖原则</span></h4><p>maven 有三种原则依赖原则</p>\n<p><font color=#008000>当一个项目中出现重复引用依赖 jar 包时，maven 一般有如下三种原则处理 jar</font></p>\n<ol>\n<li>最短路径原则</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">A -&gt; B -&gt; C -&gt; D(v1)</span><br><span class=\"line\">F -&gt; G -&gt; D(v2)</span><br></pre></td></tr></table></figure>\n\n<p>这个时候项目中就出现了两个版本的 D，这时 maven 会采用最短路径原则，选择 v2 版本的 D，因为 v1 版本的 D 是由 A 包间接依赖的，整个依赖路径长度为 3，而 v2 版本的 D 是由 F 包间接依赖的，整个依赖路径长度为 2。</p>\n<ol start=\"2\">\n<li>优先声明原则</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">A -&gt; B -&gt; D(v1)</span><br><span class=\"line\">F -&gt; G -&gt; D(v2)</span><br></pre></td></tr></table></figure>\n\n<p>如果两个 jar 包版本路径深度相同，则使用优先声明的版本 v1</p>\n<ol start=\"3\">\n<li>多次直接引不同版本的 jar 时，使用最后声明的版本</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.17.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.20.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 pom 文件中，同时引用了如上两个版本，则会使用 4.3.20.RELEASE 版本（最后声明的版本）</p>\n<h4 id=\"install-和-package-的区别\"><a href=\"#install-和-package-的区别\" class=\"headerlink\" title=\"install 和 package 的区别\"></a>install 和 package 的区别</h4><p>Maven install 安装指令，其实做了 2 件事情：</p>\n<ol>\n<li>将项目打包（jar/war），将打包结果放到项目下的 <font color=#FF8C00>target</font> 目录下；</li>\n<li>同时将上述打包结果放到<font color=#FF8C00>本地仓库</font>的相应目录中，供其他项目或模块引用；</li>\n</ol>\n<p>Maven package 打包指令，其实就做了 1 件事：</p>\n<ol>\n<li>将项目打包（jar/war），将打包结果放到项目下的  <font color=#FF8C00>target</font> 目录下 （要先 clean）；</li>\n</ol>\n<p>注意：</p>\n<p> clean 命令作用是：清理项目中 <font color=#FF8C00>target</font> 目录下文件；</p>\n","categories":["面试篇"],"tags":["进阶","maven"]},{"title":"实践一下--JWT","url":"/PaulGeorge123.github.io/2021/08/17/%E9%9D%A2%E8%AF%95--JWT/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 JWT</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_01-52-58.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>目前大部分的项目都逐渐从单体架构向着前后端分离的方向发展</p>\n<p>这个时候就涉及到前后端数据之间的交互，传输问题了，<font color=#008000> JWT</font> 闪亮登场！</p>\n<a id=\"more\"></a>\n\n<h3 id=\"JWT-是什么？\"><a href=\"#JWT-是什么？\" class=\"headerlink\" title=\"JWT 是什么？\"></a>JWT 是什么？</h3><p><strong>基本概念</strong></p>\n<p><code>JWT</code>全称是<code>JSON Web Token</code>，如果从字面上理解感觉是基于<code>JSON</code>格式用于网络传输的令牌。常见的场景如<code>HTTP</code>授权请求头参数和<code>URI</code>查询参数。</p>\n<hr>\n<h3 id=\"传统-Token-方式和-JWT\"><a href=\"#传统-Token-方式和-JWT\" class=\"headerlink\" title=\"传统 Token 方式和 JWT\"></a>传统 Token 方式和 JWT</h3><p><strong>传统 token 方式：</strong></p>\n<p>用户登录成功后，服务端生成一个随机 token 给用户，并且在服务端(数据库或缓存)中保存一份 token，以后用户再来访问时需携带 token，服务端接收到 token 之后，去数据库或缓存中进行校验 token 的是否超时、是否合法。</p>\n<p><strong>jwt 方式：</strong></p>\n<p>用户登录成功后，服务端通过 jwt 生成一个随机 token 给用户（服务端无需保留token），以后用户再来访问时需携带 token，服务端接收到 token之后，通过 jwt 对 token 进行校验是否超时、是否合法。</p>\n<hr>\n<h3 id=\"JWT-的结构\"><a href=\"#JWT-的结构\" class=\"headerlink\" title=\"JWT 的结构\"></a>JWT 的结构</h3><p><strong>简单的举个荔枝</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-16-32.png\" alt=\"\"></p>\n<p>在其紧凑形式中，<strong>JSON Web Tokens</strong> 由用点 ( <code>.</code>)分隔的三个部分组成，它们是：</p>\n<ul>\n<li>标题（header）【令牌头部，记录了整个令牌的类型和签名算法】</li>\n<li>有效载荷（payload）【令牌负荷，记录了保存的主体信息，比如你要保存的用户信息就可以放到这里】</li>\n<li>签名（signature）【令牌签名，按照头部固定的签名算法对整个令牌进行签名，该签名的作用是：保证令牌不被伪造和篡改】</li>\n</ul>\n<p>因此，JWT 通常如下所示。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">xxxxx.yyyyy.zzzzz</span>  =<span class=\"string\">======&gt;  标题.有效载荷.签名</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1、标题</strong></p>\n<p>标头<em>通常</em>由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。</p>\n<p>例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，这个 JSON 被<strong>Base64Url</strong>编码以形成 JWT 的第一部分。</p>\n<p><strong>2、有效载荷</strong></p>\n<p>令牌的第二部分是负载，其中包含声明。声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的声明：<em>注册声明</em>、<em>公共</em>声明和<em>私人</em>声明。</p>\n<p>一个示例有效载荷可能是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"admin\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后对有效负载进行<strong>Base64Url</strong>编码以形成 JSON Web 令牌的第二部分。</p>\n<p><strong>3、签名</strong></p>\n<p>要创建签名部分，您必须获取编码的标头、编码的有效载荷、秘密、标头中指定的算法，并对其进行签名。</p>\n<p>例如，如果要使用 HMAC SHA256 算法，则签名将通过以下方式创建：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + \".\" +</span><br><span class=\"line\">  base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure>\n\n<p>签名用于验证消息在此过程中没有更改，并且在使用私钥签名的令牌的情况下，它还可以验证 JWT 的发送者是它所说的那个人。</p>\n<p><strong>4、放在一起</strong></p>\n<p>输出是三个由点分隔的 Base64-URL 字符串，可以在 HTML 和 HTTP 环境中轻松传递，同时与基于 XML 的标准（如 SAML）相比更加紧凑。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-35-37.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"JWT-的原理\"><a href=\"#JWT-的原理\" class=\"headerlink\" title=\"JWT 的原理\"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"attr\">\"姓名\"</span>: <span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"角色\"</span>: <span class=\"string\">\"管理员\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"到期时间\"</span>: <span class=\"string\">\"2018年7月1日0点0分\"</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p>\n<p><strong>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</strong></p>\n<p><strong>区别</strong> </p>\n<ol>\n<li>session 存储在服务端占用服务器资源，而 JWT 存储在客户端</li>\n<li>session 存储在 Cookie 中，存在伪造跨站请求伪造攻击的风险 </li>\n<li>session 只存在一台服务器上，那么下次请求就必须请求这台服务器，不利于分布式应用 </li>\n<li>存储在客户端的 JWT 比存储在服务端的 session 更具有扩展性</li>\n</ol>\n<hr>\n<h3 id=\"JWT的认证流程图\"><a href=\"#JWT的认证流程图\" class=\"headerlink\" title=\"JWT的认证流程图\"></a>JWT的认证流程图</h3><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-16-33.png\" alt=\"\"></p>\n<p><strong>流程说明：</strong></p>\n<ol>\n<li>浏览器发起请求登陆，携带用户名和密码；</li>\n<li>服务端验证身份，根据算法，将用户标识符打包生成 token;</li>\n<li>服务器返回JWT信息给浏览器，JWT不包含敏感信息；</li>\n<li>浏览器发起请求获取用户资料，把刚刚拿到的 token一起发送给服务器；</li>\n<li>服务器发现数据中有 token，验明正身；</li>\n<li>服务器返回该用户的用户资料；</li>\n</ol>\n<hr>\n<h3 id=\"JSON-网络令牌如何工作\"><a href=\"#JSON-网络令牌如何工作\" class=\"headerlink\" title=\"JSON 网络令牌如何工作\"></a>JSON 网络令牌如何工作</h3><p>每当用户想要访问受保护的路由或资源时，用户代理应该发送 JWT，通常在使用<strong>Bearer</strong>模式的<strong>Authorization</strong>标头中。标题的内容应如下所示：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Authorization</span>: <span class=\"string\">Bearer &lt;token&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Authorization</code>标头中的有效 JWT ，如果令牌在<code>Authorization</code>标头中发送，跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie。</p>\n</blockquote>\n<h3 id=\"JWT-的应用场景\"><a href=\"#JWT-的应用场景\" class=\"headerlink\" title=\"JWT 的应用场景\"></a>JWT 的应用场景</h3><ul>\n<li><p><strong>Authorization (授权)</strong> </p>\n<p> 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的 JWT 的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p>\n</li>\n<li><p><strong>Information Exchange (信息交换)</strong> </p>\n<p>对于安全的在各方之间传输信息而言，JSON Web Tokens 无疑是一种很好的方式。因为 JWT 可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"JWT-测试\"><a href=\"#JWT-测试\" class=\"headerlink\" title=\"JWT 测试\"></a>JWT 测试</h3><h4 id=\"1、导入依赖\"><a href=\"#1、导入依赖\" class=\"headerlink\" title=\"1、导入依赖\"></a>1、导入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、生成token\"><a href=\"#2、生成token\" class=\"headerlink\" title=\"2、生成token\"></a>2、生成token</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *   常见的异常信息</span></span><br><span class=\"line\"><span class=\"comment\"> * - SignatureVerificationException   签名不一致异常</span></span><br><span class=\"line\"><span class=\"comment\"> * - TokenExpiredException            令牌过期异常</span></span><br><span class=\"line\"><span class=\"comment\"> * - AlgorirhmMismatchExceotion       算法不匹配异常</span></span><br><span class=\"line\"><span class=\"comment\"> * - InvalidClaimException            失效的payload异常</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"JWTTest 接口测试\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JWTTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"生成 token\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">creatToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"typ\"</span>, <span class=\"string\">\"JWT\"</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"alg\"</span>, <span class=\"string\">\"HS256\"</span>);</span><br><span class=\"line\">        Calendar instance = Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 20秒后令牌token失效</span></span><br><span class=\"line\">        instance.add(Calendar.SECOND, <span class=\"number\">5</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">        String token = JWT.create()</span><br><span class=\"line\">                .withHeader(map) <span class=\"comment\">// header可以不写，因为默认值就是它</span></span><br><span class=\"line\">                .withClaim(<span class=\"string\">\"userId\"</span>, <span class=\"number\">21</span>)  <span class=\"comment\">//payload</span></span><br><span class=\"line\">                .withClaim(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\">                .withExpiresAt(instance.getTime()) <span class=\"comment\">// 指定令牌的过期时间</span></span><br><span class=\"line\">                .sign(Algorithm.HMAC256(<span class=\"string\">\"jsonwebtoken\"</span>));<span class=\"comment\">//签名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成结果</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">token:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjEyMzQ1NiIsIm5hbWUiOiJqYW1lcyIsImV4cCI6MTYzMDM1NDU4Mn0.ubecr4PGlovbRggmfZBgoOnThtsSyykLyrcMiAmOaqY</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、根据令牌和签名解析数据\"><a href=\"#3、根据令牌和签名解析数据\" class=\"headerlink\" title=\"3、根据令牌和签名解析数据\"></a>3、根据令牌和签名解析数据</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"JWTTest 接口测试\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JWTTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"根据令牌和签名解析数据\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decryptionToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过签名生成验证对象</span></span><br><span class=\"line\">        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(<span class=\"string\">\"jsonwebtoken\"</span>)).build();</span><br><span class=\"line\">        String token = <span class=\"string\">\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Mjk3NDEwNjQsInVzZXJJZCI6MjEsInVzZXJuYW1lIjoidG9tIn0._spam3Ix5AvASN857eUOSFzDnVmZwk754lCbv8p4VfE\"</span>;</span><br><span class=\"line\">        DecodedJWT verify = jwtVerifier.verify(token);</span><br><span class=\"line\">        log.info(verify.getClaim(<span class=\"string\">\"userId\"</span>));</span><br><span class=\"line\">        log.info(verify.getClaim(<span class=\"string\">\"username\"</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">\"令牌过期时间：\"</span> + verify.getExpiresAt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成结果</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[           main] c.a.m.t.t.JWTTest                        : \"james\"</span><br><span class=\"line\">[           main] c.a.m.t.t.JWTTest                        : \"123456\"</span><br><span class=\"line\">[           main] c.a.m.t.t.JWTTest                        : 令牌过期时间：Tue Aug 31 04:16:22 CST 2021</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、常见的异常信息\"><a href=\"#4、常见的异常信息\" class=\"headerlink\" title=\"4、常见的异常信息\"></a>4、常见的异常信息</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">- SignatureVerificationException   签名不一致异常</span><br><span class=\"line\">- TokenExpiredException            令牌过期异常</span><br><span class=\"line\">- AlgorirhmMismatchExceotion       算法不匹配异常</span><br><span class=\"line\">- InvalidClaimException            失效的payload异常</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"JWT-SpringBoot\"><a href=\"#JWT-SpringBoot\" class=\"headerlink\" title=\"JWT + SpringBoot\"></a>JWT + SpringBoot</h3><h4 id=\"1、导入依赖-1\"><a href=\"#1、导入依赖-1\" class=\"headerlink\" title=\"1、导入依赖\"></a>1、导入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span><span class=\"comment\">&lt;!-- 去掉springboot默认配置 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 引入log4j2依赖 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--MyBatis-Plus代码生成器需要的依赖，开始--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- lombok --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.49<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- mybatis-plus --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;version&gt;3.2.0&lt;/version&gt;--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 代码生成器 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-generator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Velocity --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.velocity<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>velocity-engine-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--MyBatis-Plus代码生成器需要的依赖，结束--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- swagger --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoymin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- druid --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- test --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、Mybatis-Plus-自动生成\"><a href=\"#2、Mybatis-Plus-自动生成\" class=\"headerlink\" title=\"2、Mybatis-Plus 自动生成\"></a>2、Mybatis-Plus 自动生成</h4><p><strong>entity</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"keyword\">false</span>)</span><br><span class=\"line\"><span class=\"meta\">@TableName</span>(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>(value=<span class=\"string\">\"User对象\"</span>, description=<span class=\"string\">\"InnoDB free: 10240 kB\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"主键ID\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span>(value = <span class=\"string\">\"id\"</span>, type = IdType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"邮箱\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"email\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"创建时间\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(value = <span class=\"string\">\"create_time\"</span>, fill = FieldFill.INSERT)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"更新时间\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(value = <span class=\"string\">\"update_time\"</span>, fill = FieldFill.INSERT_UPDATE)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"乐观锁\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"version\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer version;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"逻辑删除\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@TableField</span>(<span class=\"string\">\"remove_logic\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer removeLogic;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api</span>(<span class=\"string\">\"用户管理\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/abc/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"用户登录\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">login</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"name\"</span>)</span> String name, @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"password\"</span>)</span> String password) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.login(name, password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"查询所有用户\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/query_all_list\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">queryAllList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.queryAllList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证 token 合法性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"用户登录\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/verify\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">verify</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"token\"</span>)</span> String token) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IService</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Result <span class=\"title\">login</span><span class=\"params\">(String name, String password)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证 token 合法性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Result <span class=\"title\">verify</span><span class=\"params\">(String token)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Result <span class=\"title\">queryAllList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>serviceImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">UserMapper</span>, <span class=\"title\">User</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">login</span><span class=\"params\">(String name, String password)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"用户名：[&#123;&#125;]\"</span>, name);</span><br><span class=\"line\">        log.info(<span class=\"string\">\"密码：[&#123;&#125;]\"</span>, password);</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">            wrapper.eq(<span class=\"string\">\"name\"</span>, name).eq(<span class=\"string\">\"password\"</span>, password);</span><br><span class=\"line\">            User userInfo = userMapper.selectOne(wrapper);</span><br><span class=\"line\">            <span class=\"comment\">// log.info(\"用户：[&#123;&#125;]\", userInfo.toString());</span></span><br><span class=\"line\">            <span class=\"comment\">// 设置 payload 有效信息</span></span><br><span class=\"line\">            Map&lt;String, String&gt; payload = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            payload.put(<span class=\"string\">\"name\"</span>, userInfo.getName());</span><br><span class=\"line\">            payload.put(<span class=\"string\">\"password\"</span>, userInfo.getPassword());</span><br><span class=\"line\">            <span class=\"comment\">// 生成jwt令牌</span></span><br><span class=\"line\">            String token = JwtUtils.creatToken(payload);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"name\"</span>, userInfo.getName());</span><br><span class=\"line\">            map.put(<span class=\"string\">\"password\"</span>, userInfo.getPassword());</span><br><span class=\"line\">            map.put(<span class=\"string\">\"token\"</span>, token);  <span class=\"comment\">// 响应token</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.success(map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.failure(map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证 token 合法性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">verify</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"当前token为：[&#123;&#125;]\"</span>, token);</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 验证令牌</span></span><br><span class=\"line\">            JwtUtils.verifyGetTokenInfo(token);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"请求成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.success(map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"无效签名！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.failure(map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"token过期\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.failure(map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"算法不一致\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.failure(map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"token无效！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResUtils.failure(map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">queryAllList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResUtils.success(userMapper.selectList(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapper</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mapper.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.ase.mybatis.abc.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、封装-JWT-工具类\"><a href=\"#3、封装-JWT-工具类\" class=\"headerlink\" title=\"3、封装 JWT 工具类\"></a>3、封装 JWT 工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JwtUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置加密的私钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SING = <span class=\"string\">\"jsonwebtoken\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、生成 token  header.payload.singature 【加密后发送给客户端】</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">creatToken</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Calendar instance = Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 默认7天过期</span></span><br><span class=\"line\">        instance.add(Calendar.DATE, <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建jwt builder</span></span><br><span class=\"line\">        JWTCreator.Builder builder = JWT.create();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// payload</span></span><br><span class=\"line\">        map.forEach((k, v) -&gt; &#123;</span><br><span class=\"line\">            builder.withClaim(k, v);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        String token = builder.withExpiresAt(instance.getTime())  <span class=\"comment\">//指定令牌过期时间</span></span><br><span class=\"line\">                .sign(Algorithm.HMAC256(SING));  <span class=\"comment\">// sign</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、验证 token 合法性, 并获取 token 信息方法 【客户端请求时 header 中携带, 如果客户端携带的 token 是合法的, 则获取有效载荷中的数据】</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DecodedJWT <span class=\"title\">verifyGetTokenInfo</span><span class=\"params\">(String token)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、创建拦截器\"><a href=\"#4、创建拦截器\" class=\"headerlink\" title=\"4、创建拦截器\"></a>4、创建拦截器</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JwtInterceptors</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求头中令牌</span></span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">\"Authorization\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 要删除的字符串结束位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">        <span class=\"comment\">// 正规表达式</span></span><br><span class=\"line\">        String regPattern = <span class=\"string\">\"Bearer \"</span>;</span><br><span class=\"line\">        Pattern pattern = Pattern.compile(regPattern, Pattern.CASE_INSENSITIVE);</span><br><span class=\"line\">        <span class=\"comment\">// 去掉原始字符串开头位置的指定字符</span></span><br><span class=\"line\">        Matcher matcher = pattern.matcher(token);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matcher.lookingAt()) &#123;</span><br><span class=\"line\">            end = matcher.end();</span><br><span class=\"line\">            token = token.substring(end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(token);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 验证令牌</span></span><br><span class=\"line\">            JwtUtils.verifyGetTokenInfo(token);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"请求成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  <span class=\"comment\">// 放行请求</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"无效签名！\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (TokenExpiredException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"token过期\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"算法不一致\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"token无效！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(<span class=\"string\">\"state\"</span>,<span class=\"keyword\">false</span>);  <span class=\"comment\">// 设置状态</span></span><br><span class=\"line\">        <span class=\"comment\">// 将map以json的形式响应到前台  map --&gt; json  (jackson)</span></span><br><span class=\"line\">        String json = <span class=\"keyword\">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        response.getWriter().println(json);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、定制拦截器规则\"><a href=\"#5、定制拦截器规则\" class=\"headerlink\" title=\"5、定制拦截器规则\"></a>5、定制拦截器规则</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注册添加拦截器 JwtInterceptors</span></span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> JwtInterceptors())</span><br><span class=\"line\">                .addPathPatterns(<span class=\"string\">\"/**\"</span>)  <span class=\"comment\">// 其他接口token验证 【用于设置拦截器的过滤路径规则；addPathPatterns(\"/**\")对所有请求都拦截】</span></span><br><span class=\"line\">                .excludePathPatterns(<span class=\"string\">\"/abc/user/login\"</span>);  <span class=\"comment\">// 登录是所有用户都放行的 【用于设置不需要拦截的过滤规则】</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6、请求头验证token\"><a href=\"#6、请求头验证token\" class=\"headerlink\" title=\"6、请求头验证token\"></a>6、请求头验证token</h4><p><strong>登录获取 token</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-38-25.png\" alt=\"\"></p>\n<p><strong>编写脚本将 token 存在环境变量中，即时更新</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-36-52.png\" alt=\"\"></p>\n<p><strong>请求携带 token 通过验证得到返回结果</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-37-20.png\" alt=\"\"></p>\n","categories":["框架"],"tags":["进阶","spring"]},{"title":"每日一面--MySQL 存储引擎","url":"/PaulGeorge123.github.io/2021/07/19/%E9%9D%A2%E8%AF%95--MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 MySQL 存储引擎</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_00-12-04.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>本文依照数据库 5.7 来描述滴~</p>\n<p><font color=#008000>明确一点：</font></p>\n<p>数据库实例（instance）才是真正用于操作数据库文件的。</p>\n<p>MySQL 是一个单进程、多线程架构的数据库；</p>\n<p>在集群的情况下，一个数据库对应对个数据库实例。</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><p>数据库：由一个个文件组成（二进制）</p>\n<p>数据库实例：执行类似于（Insert、Update、Delete）来更改数据库的内容</p>\n<h4 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h4><ul>\n<li>Atomicity（原子性）</li>\n<li>Consistency（一致性）</li>\n<li>Isolation（隔离性）</li>\n<li>Durability（持久性）</li>\n</ul>\n<br/>\n\n<h3 id=\"MySQL-存储引擎对比\"><a href=\"#MySQL-存储引擎对比\" class=\"headerlink\" title=\"MySQL 存储引擎对比\"></a>MySQL 存储引擎对比</h3><table>\n<thead>\n<tr>\n<th align=\"center\">特点</th>\n<th align=\"center\">MyISAM</th>\n<th align=\"center\">InnoDB</th>\n<th align=\"center\">Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">批量插入的速度</td>\n<td align=\"center\">高</td>\n<td align=\"center\">低</td>\n<td align=\"center\">高</td>\n</tr>\n<tr>\n<td align=\"center\"><font color=#008000>事务安全</font></td>\n<td align=\"center\">-</td>\n<td align=\"center\"><font color=#008000>支持</font></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">全文索引</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\"><font color=#008000>锁机制</font></td>\n<td align=\"center\"><font color=#008000>表锁</font></td>\n<td align=\"center\"><font color=#008000>行锁</font></td>\n<td align=\"center\"><font color=#008000>表锁</font></td>\n</tr>\n<tr>\n<td align=\"center\">存储限制</td>\n<td align=\"center\">256 TB</td>\n<td align=\"center\">64 T</td>\n<td align=\"center\">RAM</td>\n</tr>\n<tr>\n<td align=\"center\">B 树索引</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">哈希索引</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">集群索引</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">数据缓存</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">索引缓存</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">数据可压缩</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">空间使用</td>\n<td align=\"center\">低</td>\n<td align=\"center\">高</td>\n<td align=\"center\">N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><font color=#008000>内存使用</font></td>\n<td align=\"center\"><font color=#008000>低</font></td>\n<td align=\"center\"><font color=#008000>高</font></td>\n<td align=\"center\"><font color=#008000>中</font></td>\n</tr>\n<tr>\n<td align=\"center\"><font color=#008000>支持外键</font></td>\n<td align=\"center\"><font color=#008000>不支持</font></td>\n<td align=\"center\"><font color=#008000>支持</font></td>\n<td align=\"center\"><font color=#008000>不支持</font></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"MySQL-存储引擎\"><a href=\"#MySQL-存储引擎\" class=\"headerlink\" title=\"MySQL 存储引擎\"></a>MySQL 存储引擎</h3><h4 id=\"MySQL-插件式存储引擎概念\"><a href=\"#MySQL-插件式存储引擎概念\" class=\"headerlink\" title=\"MySQL 插件式存储引擎概念\"></a>MySQL 插件式存储引擎概念</h4><p><strong>MySQL 存储引擎（核心）</strong></p>\n<p><font color=#FF8C00>存储引擎是基于表的，而不是数据库</font></p>\n<p><strong>MySQL 默认存储引擎</strong></p>\n<p>使用下面的语句可以修改数据库临时的默认存储引擎</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET default_storage_engine &#x3D; &lt;存储引擎名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是当再次重启客户端时，默认存储引擎仍然是 InnoDB</p>\n<h3 id=\"表锁概念\"><a href=\"#表锁概念\" class=\"headerlink\" title=\"表锁概念\"></a>表锁概念</h3><h4 id=\"行锁和表锁\"><a href=\"#行锁和表锁\" class=\"headerlink\" title=\"行锁和表锁\"></a>行锁和表锁</h4><p>在mysql 的 InnoDB引擎支持行锁，与Oracle不同，mysql的行锁是通过索引加载的，即是行锁是加在索引响应的行上的，要是对应的SQL语句没有走索引，则会全表扫描，</p>\n<p>行锁则无法实现，取而代之的是表锁。</p>\n<p><strong>表锁</strong>：不会出现死锁，发生锁冲突几率高，并发低。</p>\n<p><strong>行锁：</strong>会出现死锁，发生锁冲突几率低，并发高。</p>\n<p><strong>锁冲突：</strong>例如说事务A将某几行上锁后，事务B又对其上锁，锁不能共存否则会出现锁冲突。<strong>（但是共享锁可以共存，共享锁和排它锁不能共存，排它锁和排他锁也不可以）</strong></p>\n<p><strong>死锁：</strong>例如说两个事务，事务A锁住了1-5行，同时事务B锁住了6-10行，此时事务A请求锁住6-10行，就会阻塞直到事务B施放6-10行的锁，而随后事务B又请求锁住1-5行，事务B也阻塞直到事务A释放1-5行的锁。死锁发生时，会产生 Deadlock 错误。</p>\n<p><font color=#FF8C00>锁是对表操作的，所以自然锁住全表的表锁就不会出现死锁</font></p>\n<h4 id=\"行锁的类型\"><a href=\"#行锁的类型\" class=\"headerlink\" title=\"行锁的类型\"></a>行锁的类型</h4><p>行锁分 共享锁 和 排它锁</p>\n<p>共享锁：</p>\n<p>又称读锁，当一个事务对某几行上读锁时，允许其他事务对这几行进行读操作，但不允许其进行写操作，也不允许其他事务给这几行上排它锁，但允许上读锁。</p>\n<p>排它锁：</p>\n<p>又称写锁，当一个事务对某几个上写锁时，不允许其他事务写，但允许读。更不允许其他事务给这几行上任何锁。包括写锁。</p>\n<p>举个荔枝：</p>\n<p>上共享锁的写法：<font color=#008000>lock in share mode</font> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select  math from results where math &gt; 60 lock in share mode；</span><br></pre></td></tr></table></figure>\n\n<p>上排它锁的写法：<font color=#008000>for update</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select math from results where math &gt; 60 for update</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"行锁的实现\"><a href=\"#行锁的实现\" class=\"headerlink\" title=\"行锁的实现\"></a>行锁的实现</h4><ol>\n<li><p>行锁必须有索引才能实现，否则会自动锁全表，那么就不是行锁了。</p>\n</li>\n<li><p>两个事务不能锁同一个索引，例如：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 事务A先执行：</span><br><span class=\"line\">select math from results where math &gt; 60 for update;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 事务B再执行：</span><br><span class=\"line\">select math from results where math &lt; 60 for update；</span><br><span class=\"line\"># 这样的话，事务 B 是会阻塞的。如果事务 B 把 math 索引换成其他索引就不会阻塞，</span><br><span class=\"line\"># 但注意，换成其他索引锁住的行不能和 math 索引锁住的行有重复。</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h3 id=\"InnoDB-存储引擎\"><a href=\"#InnoDB-存储引擎\" class=\"headerlink\" title=\"InnoDB 存储引擎\"></a>InnoDB 存储引擎</h3><p><font color=#FF8C00>5.8版本后的默认存储引擎</font></p>\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ol>\n<li>支持事务的安装</li>\n<li>灾难恢复型好</li>\n<li>使用行级锁</li>\n<li>实现了缓冲处理</li>\n<li>支持外键</li>\n<li>适合大型的数据库网站</li>\n</ol>\n<br/>\n\n<h3 id=\"MyISAM-存储引擎\"><a href=\"#MyISAM-存储引擎\" class=\"headerlink\" title=\"MyISAM 存储引擎\"></a>MyISAM 存储引擎</h3><p><font color=#FF8C00>5.8版本的默认存储引擎</font></p>\n<h4 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ol>\n<li>支持全文索引</li>\n</ol>\n<h4 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势\"></a>劣势</h4><ol>\n<li><p>不支持事务</p>\n</li>\n<li><p>不支持行锁</p>\n</li>\n</ol>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><p>MYD 和 MYI</p>\n<p>其缓冲池中只存索引文件，而不是缓冲数据文件；</p>\n<ul>\n<li>MYD：用来存放数据文件（Date）</li>\n<li>MYI：用来存放索引文件（Index）</li>\n</ul>\n<p>5.0 版本前：默认支持表的大小为 4 GB；</p>\n<p>5.0 版本时：默认支持表的大小为 256 TB；</p>\n<br/>\n\n<h3 id=\"Memory-存储引擎\"><a href=\"#Memory-存储引擎\" class=\"headerlink\" title=\"Memory 存储引擎\"></a>Memory 存储引擎</h3><p>将表中的数据存放在内存当中，一旦数据库重新启动或者崩溃，则表中的数据都将消失。</p>\n<p>适合用于存储临时数据的临时表。</p>\n<p>默认使用的是哈希索引而不是 B+ 树索引；</p>\n<p>只支持表锁，不支持 text 和 blob 列类型。</p>\n","categories":["面试篇"],"tags":["进阶","MySQL 存储引擎"]},{"title":"每日一面--MyBatis","url":"/PaulGeorge123.github.io/2021/07/23/%E9%9D%A2%E8%AF%95--MyBatis/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 MyBatis</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-logo.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>用久了 MyBatis 的逆向工程，原生的写法有点生疏了，趁着想起来赶紧复习一下！</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"关于-MyBatis\"><a href=\"#关于-MyBatis\" class=\"headerlink\" title=\"关于 MyBatis\"></a>关于 MyBatis</h2><h3 id=\"什么是-MyBatis？\"><a href=\"#什么是-MyBatis？\" class=\"headerlink\" title=\"什么是 MyBatis？\"></a>什么是 MyBatis？</h3><p>Mybatis是一个半自动化的持久层框架，一般我们都分为三层，控制层，业务层，持久层，所谓的持久层就是专门负责写入数据库的层次。</p>\n<h3 id=\"MyBatis-为什么说他是半自动化？\"><a href=\"#MyBatis-为什么说他是半自动化？\" class=\"headerlink\" title=\"MyBatis 为什么说他是半自动化？\"></a>MyBatis 为什么说他是半自动化？</h3><p>Hibernate 和 JPA 我们可以称为全自动化，所谓的全自动化就是他给我们直接省去了大量的 jdbc 代码，就连sql 语句我们都不用写，所以我们称他为全自动化，而Mybatis之所以称为半自动化就是虽然帮我省去了 jdbc 的一些重复代码，但是 sql 语句仍然需要我们自己写。</p>\n<h3 id=\"MyBatis-的优点是什么？\"><a href=\"#MyBatis-的优点是什么？\" class=\"headerlink\" title=\"MyBatis 的优点是什么？\"></a>MyBatis 的优点是什么？</h3><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架；</p>\n<p><strong>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集；</strong></p>\n<p>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和 Java 的 POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录；</p>\n<p><strong>并且mybatis还给我们提供了很多第三方插件（分页插件 / 逆向工程）；</strong></p>\n<h3 id=\"MyBatis有哪些缺点？\"><a href=\"#MyBatis有哪些缺点？\" class=\"headerlink\" title=\"MyBatis有哪些缺点？\"></a>MyBatis有哪些缺点？</h3><ol>\n<li>编写 SQL 语句时工作量很大，尤其是字段多、关联表多时，更是如此。</li>\n<li>SQL 语句依赖于数据库，导致数据库移植性差，不能更换数据库。</li>\n<li>框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li>\n<li>二级缓存机制不佳。</li>\n</ol>\n<h3 id=\"如何选择？\"><a href=\"#如何选择？\" class=\"headerlink\" title=\"如何选择？\"></a>如何选择？</h3><p>面对这些持久化框架我们应该如何来进行选择呢？</p>\n<p>选型上都会拿 MyBatis 和 JPA 两个持久层框架一起使用，JPA 用来简单查询和新增修改是非常方便的，并且支持一对多关系。然后复杂的查询语句用 MyBatis 来完成。、</p>\n<br/>\n\n<h2 id=\"MyBatis-常用标签和注解\"><a href=\"#MyBatis-常用标签和注解\" class=\"headerlink\" title=\"MyBatis 常用标签和注解\"></a>MyBatis 常用标签和注解</h2><h3 id=\"了解一下\"><a href=\"#了解一下\" class=\"headerlink\" title=\"了解一下\"></a>了解一下</h3><p>MyBatis的常用标签有很多，比如</p>\n<p><code>&lt;sql id=&quot;&quot;&gt;</code>：预定义可以复用的sql语句</p>\n<p><code>&lt;include refid=&quot;&quot;&gt;</code>：根据id引用定义的sql语句</p>\n<p><code>&lt;trim&gt;</code>：空白补全，配合<code>&lt;if&gt;</code>标签使用</p>\n<p><code>&lt;if test=&quot;&quot;&gt;</code>：条件判断，该语句返回的true，则该标签内的语句就生效</p>\n<p><code>&lt;bind name=&quot;&quot; value=&quot;&quot;&gt;</code>：创建一个变量，并且可以绑定到上下文</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"BaseResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.entity.User\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"INTEGER\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顶级标签\"><a href=\"#顶级标签\" class=\"headerlink\" title=\"顶级标签\"></a>顶级标签</h3><h4 id=\"1、sql\"><a href=\"#1、sql\" class=\"headerlink\" title=\"1、sql\"></a>1、sql</h4><p><strong>作用：【可被其他语句引用的可重用语句块】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"valid\"</span>&gt;</span> where id = 1 <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引用 sql --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span> = <span class=\"string\">'queryUser'</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span>&gt;</span></span><br><span class=\"line\">    select * from user </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span> = <span class=\"string\">'valid'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、insert\"><a href=\"#2、insert\" class=\"headerlink\" title=\"2、insert\"></a>2、insert</h4><p><strong>作用：【映射插入语句】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insert\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.entity.User\"</span> &gt;</span></span><br><span class=\"line\">    insert into user (id, name)</span><br><span class=\"line\">    values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、update\"><a href=\"#3、update\" class=\"headerlink\" title=\"3、update\"></a>3、update</h4><p><strong>作用：【映射更新语句】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span>&gt;</span></span><br><span class=\"line\">  update User set</span><br><span class=\"line\">    name = #&#123;name&#125;,</span><br><span class=\"line\">    sex= #&#123;sex&#125;</span><br><span class=\"line\">  where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、delete\"><a href=\"#4、delete\" class=\"headerlink\" title=\"4、delete\"></a>4、delete</h4><p><strong>作用：【映射删除语句】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteUser\"</span>&gt;</span></span><br><span class=\"line\">  delete from User where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态sql标签\"><a href=\"#动态sql标签\" class=\"headerlink\" title=\"动态sql标签\"></a>动态sql标签</h3><p><font color=#008000><strong>常用标签：&lt; if &gt;、&lt; where &gt;、&lt; trim &gt;、&lt; foreach &gt;</strong></font></p>\n<h4 id=\"1、if\"><a href=\"#1、if\" class=\"headerlink\" title=\"1、if\"></a>1、if</h4><p><strong>作用：【where 语句的条件动态拼接】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findUserByName\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">  SELECT * FROM User</span><br><span class=\"line\">  WHERE valid = 1</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"name!= null\"</span>&gt;</span></span><br><span class=\"line\">    AND name like #&#123;name&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、choose-when-otherwise\"><a href=\"#2、choose-when-otherwise\" class=\"headerlink\" title=\"2、choose (when, otherwise)\"></a>2、choose (when, otherwise)</h4><p><strong>作用：【多条件分支，相当于Java中的switch语句】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">  SELECT * FROM User WHERE age = 26</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"name!= null\"</span>&gt;</span></span><br><span class=\"line\">      AND name like #&#123;name&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"sex!= null \"</span>&gt;</span></span><br><span class=\"line\">      AND sex like #&#123;sex&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">      AND valid = 1</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>choose 有点像 Java 中的 switch 语句。choose执行过程中按顺序判断 when 中的条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的 sql。</p>\n<h4 id=\"3、trim-where-set\"><a href=\"#3、trim-where-set\" class=\"headerlink\" title=\"3、trim (where, set)\"></a>3、trim (where, set)</h4><p><strong>作用：【用于添加 SQL 语句的前缀或者后缀】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"WHERE\"</span> <span class=\"attr\">prefixOverrides</span>=<span class=\"string\">\"AND | OR \"</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- set 元素会动态前置 SET 关键字，同时也会删掉无关的逗号 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"SET\"</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以可利用 &lt; trim &gt; 来代替 &lt; where &gt; 的功能</p>\n<ul>\n<li><p>prefix：指定sql语句拼接的前缀</p>\n</li>\n<li><p>subfix：指定sql语句拼接的后缀</p>\n</li>\n<li><p>prefixOverrides：指定sql语句前面要去除的关键字或字符，如AND 逗号 括号等</p>\n</li>\n<li><p>suffixOverrides：指定sql语句后面要去除的关键字或字符</p>\n</li>\n</ul>\n<h4 id=\"4、foreach\"><a href=\"#4、foreach\" class=\"headerlink\" title=\"4、foreach\"></a>4、foreach</h4><p><strong>作用：【用于在 SQL 语句中迭代一个集合，可用在构建 in 条件中】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">  SELECT *</span><br><span class=\"line\">  FROM User</span><br><span class=\"line\">  WHERE ID in</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">open</span>=<span class=\"string\">\"(\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span> <span class=\"attr\">close</span>=<span class=\"string\">\")\"</span>&gt;</span></span><br><span class=\"line\">        #&#123;item&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>collection=”要遍历的集合” </li>\n<li>item = “可以在元素体内使用的集合项”</li>\n<li>index = “索引”</li>\n<li>open = “开始字符串”</li>\n<li>separator = “分隔符”</li>\n<li>close = “结束字符串”</li>\n</ul>\n<h4 id=\"5、bind\"><a href=\"#5、bind\" class=\"headerlink\" title=\"5、bind\"></a>5、bind</h4><p><strong>作用：【标签表示在表达式以外创建一个变量，并将其绑定到当前的上下文】</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bind</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"'%' + _parameter.getTitle() + '%'\"</span> /&gt;</span></span><br><span class=\"line\">  SELECT * FROM User</span><br><span class=\"line\">  WHERE name LIKE #&#123;pattern&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<h2 id=\"MyBatis-使用\"><a href=\"#MyBatis-使用\" class=\"headerlink\" title=\"MyBatis 使用\"></a>MyBatis 使用</h2><h3 id=\"1、MyBatis-中的-resultType-和-resultMap\"><a href=\"#1、MyBatis-中的-resultType-和-resultMap\" class=\"headerlink\" title=\"1、MyBatis 中的 resultType 和 resultMap\"></a>1、MyBatis 中的 resultType 和 resultMap</h3><p>resultType 用于返回值只有一个字段的类型，resultMap 用于返回值有多个字段的类型。至于结果是 List 还是一个，则在 Mapper 中定义返回值是List还是单个。</p>\n<p>使用 resultType：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span>  </span><br><span class=\"line\">        SELECT count(*) FROM USER  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 resultMap：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.entity.Blog\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"BlogResult\"</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"title\"</span>/&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"content\"</span>/&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"owner\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"owner\"</span>/&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span>   </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectBlog\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BlogResult\"</span>&gt;</span>    </span><br><span class=\"line\">   select * from t_blog where id = #&#123;id&#125;    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、xml中的timestamp比较\"><a href=\"#2、xml中的timestamp比较\" class=\"headerlink\" title=\"2、xml中的timestamp比较\"></a>2、xml中的timestamp比较</h3><p><strong>转义字符表</strong></p>\n<table>\n<thead>\n<tr>\n<th>转义</th>\n<th>符号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;lt;</code></td>\n<td>&lt;</td>\n</tr>\n<tr>\n<td><code>&amp;gt;</code></td>\n<td>&gt;</td>\n</tr>\n<tr>\n<td><code>&amp;amp;</code></td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td><code>&amp;apos;</code></td>\n<td>’</td>\n</tr>\n<tr>\n<td><code>&amp;quot;</code></td>\n<td>“</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、MyBatis-批量插入\"><a href=\"#3、MyBatis-批量插入\" class=\"headerlink\" title=\"3、MyBatis 批量插入\"></a>3、MyBatis 批量插入</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertForeach\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.util.List\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\tinsert into user</span><br><span class=\"line\">\t( id,name )</span><br><span class=\"line\">\tvalues</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">\t  (</span><br><span class=\"line\">\t    #&#123;item.id&#125;,</span><br><span class=\"line\">\t    #&#123;item.name&#125;</span><br><span class=\"line\">\t  )</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span>\t\t</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4、MyBatis-传递多个参数\"><a href=\"#4、MyBatis-传递多个参数\" class=\"headerlink\" title=\"4、MyBatis 传递多个参数\"></a>4、MyBatis 传递多个参数</h3><h4 id=\"方法一-使用map接口传递参数\"><a href=\"#方法一-使用map接口传递参数\" class=\"headerlink\" title=\"方法一:使用map接口传递参数\"></a>方法一:使用map接口传递参数</h4><p>map是一个键值对应的集合，使用者要通过阅读它的键，才能明了其作用；其次，使用map不能限定其传递的数据类型，因此业务性质不强，可读性差。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findRolesByMap</span><span class=\"params\">(Map&lt;String, Object&gt; parameterMap)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findRolesByMap\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"map\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"role\"</span>&gt;</span></span><br><span class=\"line\">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二-使用注解传递多个参数\"><a href=\"#方法二-使用注解传递多个参数\" class=\"headerlink\" title=\"方法二:使用注解传递多个参数\"></a>方法二:使用注解传递多个参数</h4><p>注解 @Param 可以通过它去定义映射器的参数名称</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findRolesByAnnotation</span><span class=\"params\">(@Param(<span class=\"string\">\"roleName\"</span>)</span> String rolename, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"note\"</span>)</span> String note)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findRolesByAnnotation\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"role\"</span>&gt;</span></span><br><span class=\"line\">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法三-通过Java-Bean传递多个参数\"><a href=\"#方法三-通过Java-Bean传递多个参数\" class=\"headerlink\" title=\"方法三:通过Java Bean传递多个参数\"></a>方法三:通过Java Bean传递多个参数</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findRolesByBean</span><span class=\"params\">(RoleParams roleParam)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findRolesByBean\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.entity.RoleParams\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"role\"</span>&gt;</span></span><br><span class=\"line\">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法四-混合使用\"><a href=\"#方法四-混合使用\" class=\"headerlink\" title=\"方法四:混合使用　\"></a>方法四:混合使用　</h4><p>不指定 parameterType ，需要指定具体的属性。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findByMix</span><span class=\"params\">(@Param(<span class=\"string\">\"params\"</span>)</span> RoleParams roleParams, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"page\"</span>)</span> PageParam PageParam)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findByMix\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"role\"</span>&gt;</span></span><br><span class=\"line\">    select id, role_name as roleName, note from t_role</span><br><span class=\"line\">    where role_name like concat('%', #&#123;params.roleName&#125;, '%') and note like concat('%', #&#123;params.note&#125;, '%') limit #&#123;page.start&#125;, #&#123;page.limit&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当 n≤5 时，使用 @Param 注解传递多个参数；</li>\n<li>当 n＞5 时，建议使用 Java Bean 方式；</li>\n</ul>\n<h3 id=\"5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）\"><a href=\"#5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）\" class=\"headerlink\" title=\"5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）\"></a>5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）</h3><h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>查询数据的时候，查不到 userName 的信息，原因：数据库的字段名是 user_name POJO中的属性名字是userName<br>两端不一致，造成mybatis无法填充对应的字段信息。修改方法：在sql语句中使用别名。</p>\n<h4 id=\"解决方案一\"><a href=\"#解决方案一\" class=\"headerlink\" title=\"解决方案一\"></a>解决方案一</h4><p>开启驼峰匹配：相当于去掉数据库名字中的下划线，然后在与java中的属性名进行对应。</p>\n<p>数据库中的 user_name 和 java 属性中的 userName 是一样的。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mybatis.configuration.map-underscore-to-camel-case</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决方案二\"><a href=\"#解决方案二\" class=\"headerlink\" title=\"解决方案二\"></a>解决方案二</h4><p>resultType 类指定返回值的类型，这样 Mybatis 会帮我们自动映射属性，即只有当类的属性名和字段名相同时，才存在映射关系。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserList\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.entity.User\"</span>&gt;</span></span><br><span class=\"line\">    select * from user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们属性名和字段名不同那么我们就需要用 resultMap 来重新映射。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"UserMapper\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.ariverh.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserList\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"UserMapper\"</span>&gt;</span></span><br><span class=\"line\">    select id,name as userName from user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<br/>\n\n\n\n<h2 id=\"MyBatis缓存机制\"><a href=\"#MyBatis缓存机制\" class=\"headerlink\" title=\"MyBatis缓存机制\"></a>MyBatis缓存机制</h2><h3 id=\"了解一下-1\"><a href=\"#了解一下-1\" class=\"headerlink\" title=\"了解一下\"></a>了解一下</h3><p>缓存机制减轻数据库压力，提高数据库性能</p>\n<p>mybatis 的缓存分为两级：一级缓存、二级缓存</p>\n<p>namespace 指定的是对应的 mapper 接口</p>\n<h3 id=\"一级缓存：\"><a href=\"#一级缓存：\" class=\"headerlink\" title=\"一级缓存：\"></a>一级缓存：</h3><p>一级缓存为 <code>sqlsesson</code> 缓存，缓存的数据只在 SqlSession 内有效。在操作数据库的时候需要先创建 SqlSession 会话对象，在对象中有一个 HashMap 用于存储缓存数据，此 HashMap 是当前会话对象私有的，别的 SqlSession 会话对象无法访问。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-sql-session-01.jpg\" style=\"zoom: 50%;\" />\n\n<h4 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h4><p>第一次执行 select 完毕会将查到的数据写入 SqlSession 内的 HashMap 中缓存起来</p>\n<p>第二次执行 select 会从缓存中查数据，如果 select 同传参数一样，那么就能从缓存中返回数据，不用去数据库了，从而提高了效率。</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>1、如果 SqlSession 执行了 DML 操作（insert、update、delete），并 commit 了，那么 mybatis 就会清空当前 SqlSession 缓存中的所有缓存数据，这样可以保证缓存中的存的数据永远和数据库中一致，避免出现差异</p>\n<p>2、当一个 SqlSession 结束后那么他里面的一级缓存也就不存在了， mybatis 默认是开启一级缓存，不需要配置</p>\n<p>3、 mybatis 的缓存是基于 [namespace:sql语句:参数] 来进行缓存的，意思就是， SqlSession 的 HashMap 存储缓存数据时，是使用 [namespace:sql:参数] 作为 key ，查询返回的语句作为 value 保存的</p>\n<p><strong>4、一级缓存只在数据库会话内部共享。</strong></p>\n<h3 id=\"二级缓存：\"><a href=\"#二级缓存：\" class=\"headerlink\" title=\"二级缓存：\"></a>二级缓存：</h3><h4 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>在上文中提到的一级缓存中，其最大的共享范围就是一个 SqlSession 内部，如果多个 SqlSession 之间需要共享缓存，则需要使用到二级缓存。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-sql-session-02.png\" style=\"zoom: 80%;\" />\n\n\n\n<h4 id=\"具体流程-1\"><a href=\"#具体流程-1\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h4><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p>\n<p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li>\n<li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li>\n<li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li>\n</ol>\n<br/>\n\n<h2 id=\"MyBatis-面试一下\"><a href=\"#MyBatis-面试一下\" class=\"headerlink\" title=\"MyBatis 面试一下\"></a>MyBatis 面试一下</h2><h3 id=\"MyBatis-中-和-区别\"><a href=\"#MyBatis-中-和-区别\" class=\"headerlink\" title=\"MyBatis 中#{}和${}区别\"></a>MyBatis 中#{}和${}区别</h3><p><strong>#{}</strong> 是预编译处理，像传进来的数据会加个” “（#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号）</p>\n<p><strong>${}</strong> 就是字符串替换。直接替换掉占位符。$方式一般用于传入数据库对象。</p>\n<p>所以为了防止 SQL 注入，能用 <strong>#{}</strong> 的不要去用 <strong>${}</strong></p>\n<p>如果非要用 ${} 的话，那要注意防止 SQL 注入问题，可以手动判定传入的变量，进行过滤，一般 SQL 注入会输入很长的一条 SQL 语句</p>\n","categories":["面试篇"],"tags":["进阶","MyBatis"]},{"title":"每日一面--MySQL索引","url":"/PaulGeorge123.github.io/2021/08/05/%E9%9D%A2%E8%AF%95--MySQL%E7%B4%A2%E5%BC%95/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下基于 MySQL 索引</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mysql_index.jpg\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>面试的时候经常会问到如何在大量数据查询的时候提示效率，能想到的首先一定是建立索引，那具体说说？</font></p>\n<p><font color=#FF8C00>索引是对数据库表中一列或多列的值进行排序的一种结构。</font></p>\n<p><font color=#FF8C00>MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</font></p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"MySQL-索引介绍\"><a href=\"#MySQL-索引介绍\" class=\"headerlink\" title=\"MySQL 索引介绍\"></a>MySQL 索引介绍</h3><p>索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有 MySQL 列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。</p>\n<p>创建索引时，需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。</p>\n<p>说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。</p>\n<hr>\n<h3 id=\"MySQL-索引的优缺点\"><a href=\"#MySQL-索引的优缺点\" class=\"headerlink\" title=\"MySQL 索引的优缺点\"></a>MySQL 索引的优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><font color=#008000>索引大大减小了服务器需要扫描的数据量，从而大大加快数据的检索速度，这也是创建索引的最主要的原因。</font></li>\n<li><font color=#FF8C00>索引可以帮助服务器避免排序和创建临时表</font></li>\n<li><font color=#FF8C00>索引可以将随机IO变成顺序IO</font></li>\n<li>索引对于 InnoDB（对索引支持行级锁）非常重要，因为它可以让查询锁更少的元组，提高了表访问并发性</li>\n<li>关于 InnoDB、索引和锁：InnoDB 在二级索引上使用共享锁（读锁），但访问主键索引需要排他锁（写锁）</li>\n<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>\n<li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li>\n<li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li>\n<li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>创建索引和维护索引要<font color=#FF8C00>耗费时间</font>，这种时间随着数据量的增加而增加</li>\n<li>索引需要占<font color=#FF8C00>物理空间</font>，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用 的空间会更大</li>\n<li>对表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的<font color=#FF8C00>维护速度</font></li>\n<li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li>\n<li>对于非常小的表，大部分情况下简单的全表扫描更高效；</li>\n</ul>\n<hr>\n<h3 id=\"MySQL-索引存储结构\"><a href=\"#MySQL-索引存储结构\" class=\"headerlink\" title=\"MySQL 索引存储结构\"></a>MySQL 索引存储结构</h3><p><a href=\"https://codeyg.top/2021/06/13/%E9%9D%A2%E8%AF%95--HashMap%E7%BA%A2%E9%BB%91%E6%A0%91/\"><strong>索引结构</strong></a></p>\n<h4 id=\"B-Tree索引\"><a href=\"#B-Tree索引\" class=\"headerlink\" title=\"B-Tree索引\"></a>B-Tree索引</h4><p><strong>B树的特征：</strong></p>\n<ul>\n<li><strong>关键字集合分布在整颗树中；</strong></li>\n<li>任何一个关键字出现且只出现在一个结点中；</li>\n<li><strong>搜索有可能在非叶子结点结束；</strong></li>\n<li>其搜索性能等价于在关键字全集内做一次二分查找；</li>\n<li>自动层次控制；</li>\n</ul>\n<h4 id=\"B-Tree索引-1\"><a href=\"#B-Tree索引-1\" class=\"headerlink\" title=\"B+Tree索引\"></a>B+Tree索引</h4><p><strong>B+树的特征：</strong></p>\n<ul>\n<li><strong>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</strong></li>\n<li><strong>不可能在非叶子结点命中；</strong></li>\n<li><strong>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</strong></li>\n<li>每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</li>\n<li>更适合文件索引系统；</li>\n</ul>\n<h4 id=\"B-Tree索引-2\"><a href=\"#B-Tree索引-2\" class=\"headerlink\" title=\"B-Tree索引\"></a>B-Tree索引</h4><p>InnoDB 使用的是B+Tree。</p>\n<p>B+Tree：每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</p>\n<p>B-Tree 通常意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同，很适合查找范围数据。</p>\n<p>B-Tree 可以对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及不以通配符开始的 LIKE 使用索引。</p>\n<h4 id=\"HASH\"><a href=\"#HASH\" class=\"headerlink\" title=\"HASH\"></a>HASH</h4><p>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。</p>\n<p><font color=#008000>Hash 索引仅仅能满足”=”,“IN”和”&lt;=&gt;”查询，不能使用范围查询。</font>也不支持任何范围查询，例如WHERE price &gt; 100。<br>　　<br>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和 Hash 运算前完全一样。</p>\n<h4 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h4><p><font color=#008000>索引是占据物理空间的，在不同的存储引擎中，索引存在的文件也不同。存储引擎是基于表的。</font></p>\n<p><strong>存储引擎为MyISAM：</strong></p>\n<ul>\n<li><p>*.frm：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等</p>\n</li>\n<li><p>*.MYD：MyISAM DATA，用于存储 MyISAM 表的数据</p>\n</li>\n<li><p>*.MYI：MyISAM INDEX，用于存储 MyISAM 表的索引相关信息</p>\n</li>\n</ul>\n<p><strong>存储引擎为InnoDB：</strong></p>\n<ul>\n<li>*.frm：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等</li>\n<li>*.ibd：InnoDB DATA，表数据和索引的文件。该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据</li>\n</ul>\n<hr>\n<h3 id=\"MySQL-索引分类\"><a href=\"#MySQL-索引分类\" class=\"headerlink\" title=\"MySQL 索引分类\"></a>MySQL 索引分类</h3><p>MySQL 的索引有两种分类方式：逻辑分类和物理分类。</p>\n<h4 id=\"逻辑分类\"><a href=\"#逻辑分类\" class=\"headerlink\" title=\"逻辑分类\"></a>逻辑分类</h4><h5 id=\"按功能划分\"><a href=\"#按功能划分\" class=\"headerlink\" title=\"按功能划分\"></a>按功能划分</h5><ul>\n<li>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</li>\n<li>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li>\n<li>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</li>\n<li>全文索引：它查找的是文本中的关键词，主要用于全文检索。（篇幅较长，下文有独立主题说明）</li>\n</ul>\n<h5 id=\"按列数划分\"><a href=\"#按列数划分\" class=\"headerlink\" title=\"按列数划分\"></a>按列数划分</h5><ul>\n<li>单例索引：一个索引只包含一个列，一个表可以有多个单例索引。</li>\n<li>组合索引：一个组合索引包含两个或两个以上的列。查询的时候遵循 mysql 组合索引的 “最左前缀”原则，即使用 where 时条件要按照建立索引的时候字段的排列方式放置索引才会生效。</li>\n</ul>\n<h4 id=\"物理分类\"><a href=\"#物理分类\" class=\"headerlink\" title=\"物理分类\"></a>物理分类</h4><h5 id=\"聚簇索引和非聚簇索引（辅助索引或二级索引）\"><a href=\"#聚簇索引和非聚簇索引（辅助索引或二级索引）\" class=\"headerlink\" title=\"聚簇索引和非聚簇索引（辅助索引或二级索引）\"></a>聚簇索引和非聚簇索引（辅助索引或二级索引）</h5><blockquote>\n<p>聚簇是为了提高某个属性(或属性组)的查询速度，把这个或这些属性(称为聚簇码)上具有相同值的元组集中存放在连续的物理块。</p>\n</blockquote>\n<font color=#008000>\n聚簇索引（clustered index）不是单独的一种索引类型，而是一种数据存储方式。这种存储方式是依靠B+树来实现的，根据表的主键构造一棵B+树且B+树叶子节点存放的都是表的行记录数据时，方可称该主键索引为聚簇索引。聚簇索引也可理解为将数据存储与索引放到了一块，找到索引也就找到了数据。</font>\n\n<p><font color=#FF8C00>非聚簇索引：数据和索引是分开的，B+树叶子节点存放的不是数据表的行记录。</font></p>\n<p><strong>虽然 InnoDB 和 MyISAM 存储引擎都默认使用 B+ 树结构存储索引，但是只有 InnoDB 的主键索引才是聚簇索引，InnoDB 中的辅助索引以及 MyISAM 使用的都是非聚簇索引。每张表最多只能拥有一个聚簇索引。</strong></p>\n<h5 id=\"聚簇索引优缺点\"><a href=\"#聚簇索引优缺点\" class=\"headerlink\" title=\"聚簇索引优缺点\"></a>聚簇索引优缺点</h5><p><strong>优点：</strong></p>\n<ul>\n<li>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li>\n<li>聚簇索引对于主键的排序查找和范围查找速度非常快</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键（主键列不要选没有意义的自增列，选经常查询的条件列才好，不然无法体现其主键索引性能）</li>\n<li>更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</li>\n<li>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</li>\n</ul>\n<hr>\n<h3 id=\"InnoDB-和-MyISAM-索引实现\"><a href=\"#InnoDB-和-MyISAM-索引实现\" class=\"headerlink\" title=\"InnoDB 和 MyISAM 索引实现\"></a>InnoDB 和 MyISAM 索引实现</h3><h4 id=\"InnoDB-索引实现\"><a href=\"#InnoDB-索引实现\" class=\"headerlink\" title=\"InnoDB 索引实现\"></a>InnoDB 索引实现</h4><h5 id=\"聚簇索引（主键索引）\"><a href=\"#聚簇索引（主键索引）\" class=\"headerlink\" title=\"聚簇索引（主键索引）\"></a>聚簇索引（主键索引）</h5><ol>\n<li>InnoDB使用B+TREE存储数据，除了主键索引为聚簇索引，其它索引均为非聚簇索引。</li>\n<li>一个表中只能存在一个聚簇索引（主键索引），但可以存在多个非聚簇索引。</li>\n<li>InnoDB表的索引和数据是存储在一起的，<code>.idb</code>表数据和索引的文件</li>\n</ol>\n<p>叶子节点包含了完整的数据记录，这就是聚簇索引。因为InnoDB的数据文件（.idb）按主键聚集，所以InnoDB必须有主键（MyISAM可以没有），如果没有显示指定主键，则选取首个为唯一且非空的列作为主键索引，如果还没具备，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p>\n<h5 id=\"非聚簇索引（辅助索引或二级索引）\"><a href=\"#非聚簇索引（辅助索引或二级索引）\" class=\"headerlink\" title=\"非聚簇索引（辅助索引或二级索引）\"></a>非聚簇索引（辅助索引或二级索引）</h5><p>在聚簇索引之外创建的索引（不是根据主键创建的）称之为辅助索引，辅助索引访问数据总是需要二次查找。辅助索引叶子节点存储的不再是行数据记录，而是主键值。首先通过辅助索引找到主键值，然后到主键索引树中通过主键值找到数据行。</p>\n<h5 id=\"拓展：InnoDB-索引优化\"><a href=\"#拓展：InnoDB-索引优化\" class=\"headerlink\" title=\"拓展：InnoDB 索引优化\"></a>拓展：InnoDB 索引优化</h5><ul>\n<li>InnoDB 中主键不宜定义太大，因为辅助索引也会包含主键列，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。</li>\n<li>InnoDB 中尽量不使用非单调字段作主键（不使用多列），因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</li>\n</ul>\n<h4 id=\"MyISAM-索引实现\"><a href=\"#MyISAM-索引实现\" class=\"headerlink\" title=\"MyISAM 索引实现\"></a>MyISAM 索引实现</h4><ol>\n<li>MyISAM也使用B+Tree作为索引结构，但具体实现方式却与InnoDB截然不同。MyISAM使用的都是非聚簇索引。</li>\n<li>MyISAM表的索引和数据是分开存储的，<code>.MYD</code>表数据文件 <code>.MYI</code>表索引文件</li>\n</ol>\n<h5 id=\"MyISAM-主键索引\"><a href=\"#MyISAM-主键索引\" class=\"headerlink\" title=\"MyISAM 主键索引\"></a>MyISAM 主键索引</h5><p>叶子节点的存放的是数据记录的地址。也就是说索引和行数据记录是没有保存在一起的，所以MyISAM的主键索引是非聚簇索引。</p>\n<h5 id=\"MyISAM-辅助索引\"><a href=\"#MyISAM-辅助索引\" class=\"headerlink\" title=\"MyISAM 辅助索引\"></a>MyISAM 辅助索引</h5><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。 MyISAM辅助索引也是非聚簇索引。</p>\n<hr>\n<h4 id=\"InnoDB-和-MyISAM-的索引检索过程\"><a href=\"#InnoDB-和-MyISAM-的索引检索过程\" class=\"headerlink\" title=\"InnoDB 和 MyISAM 的索引检索过程\"></a>InnoDB 和 MyISAM 的索引检索过程</h4><p><font color=#008000>InnoDB辅助索引的访问需要两次索引查找，第一次从辅助索引树找到主键值，第二次根据主键值到主键索引树中找到对应的行数据。</font></p>\n<p><font color=#FF8C00>MyISM使用的是非聚簇索引，表数据存储在独立的地方，这两棵（主键和辅助键）B+树的叶子节点都使用一个地址指向真正的表数据。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</font></p>\n<h4 id=\"聚簇索引和非聚簇索引的区别\"><a href=\"#聚簇索引和非聚簇索引的区别\" class=\"headerlink\" title=\"聚簇索引和非聚簇索引的区别\"></a>聚簇索引和非聚簇索引的区别</h4><ul>\n<li>聚簇索引的叶子节点存放的是数据行（主键值也是行内数据），支持覆盖索引；而非聚簇索引的叶子节点存放的是主键值或指向数据行的指针。</li>\n<li>由于叶子节点(数据页)只能按照一棵B+树排序，故一张表只能有一个聚簇索引。辅助索引的存在不影响聚簇索引中数据的组织，所以一张表可以有多个辅助索引。</li>\n</ul>\n<h3 id=\"MySQL-索引失效的几种情况\"><a href=\"#MySQL-索引失效的几种情况\" class=\"headerlink\" title=\"MySQL 索引失效的几种情况\"></a>MySQL 索引失效的几种情况</h3><p><strong><font color=#008000>1、前导模糊查询不能利用索引(like ‘%XX’或者like ‘%XX%’)</font></strong></p>\n<p><strong><font color=#008000>2、如果是组合索引的话，如果不按照索引的顺序进行查找，比如直接使用第三个位置上的索引而忽略第一二个位置上的索引时，则会进行全表查询</font></strong></p>\n<p><strong><font color=#008000>3、条件中有or</font></strong></p>\n<p><strong><font color=#008000>4、索引无法存储null值，所以where的判断条件如果对字段进行了null值判断，将导致数据库放弃索引而进行全表查询</font></strong></p>\n<p><strong><font color=#008000>5、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</font></strong></p>\n<p><strong><font color=#008000>6、in 和 not in 也要慎用，否则会导致全表扫描</font></strong></p>\n<p><strong><font color=#008000>7、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</font></strong></p>\n<p><strong><font color=#008000>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</font></strong></p>\n","categories":["面试篇"],"tags":["进阶","MySQL"]},{"title":"每日一面--Redis 五种数据结构详解","url":"/PaulGeorge123.github.io/2021/07/21/%E9%9D%A2%E8%AF%95--Redis%205%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Redis 的五种数据结构</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-42-43.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>Redis 是基于 C 语言编写的开源非关系型内存数据库，可以用作数据库、缓存、消息中间件。</p>\n<p>Redis 的五种数据结构详解，包括这五种的数据结构的底层原理实现。</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"Redis的五种数据结构\"><a href=\"#Redis的五种数据结构\" class=\"headerlink\" title=\"Redis的五种数据结构\"></a>Redis的五种数据结构</h4><ol>\n<li><code>String</code>：字符串类型</li>\n<li><code>List</code>：列表类型</li>\n<li><code>Set</code>：无序集合类型</li>\n<li><code>ZSet</code>：有序集合类型</li>\n<li><code>Hash</code>：哈希表类型</li>\n</ol>\n<h4 id=\"Redis核心对象\"><a href=\"#Redis核心对象\" class=\"headerlink\" title=\"Redis核心对象\"></a>Redis核心对象</h4><p>在Redis中有一个<strong>「核心的对象」</strong>叫做 <code>redisObject</code> ，是用来表示所有的 key 和 value 的，用 redisObject 结构体来表示<code>String、Hash、List、Set、ZSet</code>五种数据类型。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_09-28-52.png\" alt=\"\"></p>\n<p>在redisObject中<strong>「type表示属于哪种数据类型，encoding表示该数据的存储方式」</strong>，也就是底层的实现的该数据类型的数据结构。</p>\n<h4 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h4><p>redis 中的字符串和 c 语言中的字符串类型却是有明显的区别。</p>\n<p>string 类型的数据结构存储方式有三种<code>int、raw、embstr</code>。</p>\n<p><strong>未完待续……</strong></p>\n","categories":["面试篇"],"tags":["进阶","redis"]},{"title":"每日一面--Redis","url":"/PaulGeorge123.github.io/2021/07/15/%E9%9D%A2%E8%AF%95--Redis/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Redis</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-16_21-42-34.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<h4 id=\"为什么不直接访问数据库？要在中间加一个Redis缓存？\"><a href=\"#为什么不直接访问数据库？要在中间加一个Redis缓存？\" class=\"headerlink\" title=\"为什么不直接访问数据库？要在中间加一个Redis缓存？\"></a><font color=#008000>为什么不直接访问数据库？要在中间加一个Redis缓存？</font></h4><p>其实我在了解redis之前一直有这样一个疑问，但是既然使用redis作为中间缓存一定是有道理的！</p>\n<p>那么一起来看一下使用redis有哪些好处吧~</p>\n<a id=\"more\"></a>\n\n\n\n<p><strong>原因：</strong></p>\n<ol>\n<li>Redis 可以用几十 G 内存来做缓存；</li>\n<li>Redis 的缓存可以持久化 （RBD &amp; AOF）；</li>\n<li>Redis 可以实现分布式的缓存；</li>\n<li>Redis 可以处理每秒百万级的并发，是专业的缓存服务；</li>\n<li>Redis 缓存有过期机制；</li>\n<li>Redis 有丰富的 API。</li>\n</ol>\n<p>其中redis最典型的应用场景，当做缓存使用。</p>\n<p>因为传统的关系型数据库如Mysql已经不能适用所有的场景了，比如秒杀的库存扣减，APP首页的访问流量高峰等等……</p>\n<ul>\n<li>服务在处理请求时先从redis里获取结果，获取到了就可以直接返回，没有获取到的话再从数据库里获取，然后存到redis里以供下次使用。</li>\n<li>用redis的好处是可以做到分布式，有状态的数据都存在redis里，使业务服务层无状态，以便业务层有很高的可扩展性。</li>\n</ul>\n<h4 id=\"先来说下redis是什么吧？\"><a href=\"#先来说下redis是什么吧？\" class=\"headerlink\" title=\"先来说下redis是什么吧？\"></a><font color=#008000>先来说下redis是什么吧？</font></h4><p>我：Redis是C语言开发的一个开源的高性能键值对（key-value）的内存数据库；</p>\n<p>它是一种NoSQL（非关系型数据库）的数据库。</p>\n<p>可以用作数据库、缓存、消息中间件等。</p>\n<p>我接着说：Redis作为一个内存数据库。</p>\n<ol>\n<li>性能优秀，数据在内存中，读写速度非常快，支持并发10W QPS；</li>\n<li>单进程单线程，是线程安全的，采用IO多路复用机制；</li>\n<li>丰富的数据类型；</li>\n<li>支持数据持久化。可以将内存中数据保存在磁盘中，重启时加载；</li>\n<li>主从复制，哨兵，高可用；</li>\n<li>可以用作分布式锁；</li>\n<li>可以作为消息中间件使用，支持发布订阅。</li>\n</ol>\n<br/>\n\n<h4 id=\"具体说一下Redis有哪些数据结构呀？\"><a href=\"#具体说一下Redis有哪些数据结构呀？\" class=\"headerlink\" title=\"具体说一下Redis有哪些数据结构呀？\"></a><font color=#008000>具体说一下Redis有哪些数据结构呀？</font></h4><p>答：字符串（String）、字典（Hash）、列表（List）、集合（Set）、有序集合（SortedSet）</p>\n<p><font color=#FF8C00>后面了解到还有：HyperLogLog、Geo、Pub/Sub 【这是加分的内容】</font></p>\n<br/>\n\n<h4 id=\"使用过Redis分布式锁么，它是怎么回事？\"><a href=\"#使用过Redis分布式锁么，它是怎么回事？\" class=\"headerlink\" title=\"使用过Redis分布式锁么，它是怎么回事？\"></a><font color=#008000>使用过Redis分布式锁么，它是怎么回事？</font></h4><p>答：先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p>\n<br/>\n\n<h4 id=\"假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？\"><a href=\"#假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？\" class=\"headerlink\" title=\"假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？\"></a><font color=#008000>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？</font></h4><p>（这道题很经典啊，网上见过~）</p>\n<p>答：使用<code>keys</code>指令可以扫出指定模式的key列表 【 key  keys xxx*】</p>\n<br/>\n\n<h4 id=\"那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？\"><a href=\"#那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？\" class=\"headerlink\" title=\"那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？\"></a><font color=#008000>那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</font></h4><p>答：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。</p>\n<p><font color=#FF8C00>后面了解到：这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</font></p>\n<br/>\n\n<h4 id=\"使用过Redis做异步队列么，你是怎么用的？\"><a href=\"#使用过Redis做异步队列么，你是怎么用的？\" class=\"headerlink\" title=\"使用过Redis做异步队列么，你是怎么用的？\"></a><font color=#008000>使用过Redis做异步队列么，你是怎么用的？</font></h4><p>答：一般使用list结构作为队列，<code>rpush</code>生产消息，<code>lpop</code>消费消息。list还有个指令叫<code>blpop</code>，在没有消息的时候，它会阻塞住直到消息到来。</p>\n<br/>\n\n<h4 id=\"能不能生产一次消费多次呢？\"><a href=\"#能不能生产一次消费多次呢？\" class=\"headerlink\" title=\"能不能生产一次消费多次呢？\"></a><font color=#008000>能不能生产一次消费多次呢？</font></h4><p>答：使用pub/sub主题订阅者模式，可以实现 1:N 的消息队列。</p>\n<br/>\n\n<h4 id=\"pub-su-b有什么缺点？\"><a href=\"#pub-su-b有什么缺点？\" class=\"headerlink\" title=\"pub/su b有什么缺点？\"></a><font color=#008000>pub/su b有什么缺点？</font></h4><p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如<code>RabbitMQ</code>等。</p>\n<br/>\n\n<h4 id=\"Redis是怎么持久化的？\"><a href=\"#Redis是怎么持久化的？\" class=\"headerlink\" title=\"Redis是怎么持久化的？\"></a><font color=#008000>Redis是怎么持久化的？</font></h4><p>（送分题~）</p>\n<p>答：RBD 和 AOF </p>\n<ul>\n<li><p>RDB做镜像全量持久化，即将整个Redis内存数据持久化到一个文件。</p>\n</li>\n<li><p>AOF做增量持久化，AOF会将redis中每一步对数据修改的操作记录（日志）append到相应的文件中。</p>\n</li>\n</ul>\n<br/>\n\n<h4 id=\"那说一下-RBD-和-AOF-的优劣，及其原理吧\"><a href=\"#那说一下-RBD-和-AOF-的优劣，及其原理吧\" class=\"headerlink\" title=\"那说一下 RBD 和 AOF 的优劣，及其原理吧\"></a><font color=#008000>那说一下 RBD 和 AOF 的优劣，及其原理吧</font></h4><p>答：</p>\n<p><strong>RDB</strong></p>\n<p>优点：</p>\n<ul>\n<li>二进制压缩文件，恢复速度快</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>可能丢失数据（服务器宕机的时候）</li>\n</ul>\n<p>原理：</p>\n<p><strong>fork</strong> 和 <strong>cow</strong></p>\n<ul>\n<li>fork是指redis通过创建子进程来进行RDB操作；</li>\n<li>cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</li>\n</ul>\n<p><strong>AOF</strong></p>\n<p>优点：</p>\n<ul>\n<li>不易丢失数据，数据完整性好</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每一步操作都记录，相对影响性能</li>\n<li>数据恢复慢，文件较大</li>\n</ul>\n<p>原理：</p>\n<p>为了降低 IO 消耗，AOF 写文件时，会先将数据写到缓冲区，然后再把缓冲区的内容 flush 到磁盘，这个过程叫做 fsync。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ appendfsync always  //每次写操作都flush，影响性能</span><br><span class=\"line\">$ appendfsync everysec  //每秒flush</span><br><span class=\"line\">$ appendfsync no  //消极等待OS刷新(一般30s),可能丢失数据</span><br></pre></td></tr></table></figure>\n\n<p>相比于always的激进和no的消极，everysec在性能和数据完整性上取了一个折中。</p>\n<br/>\n\n<h4 id=\"是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？\"><a href=\"#是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？\" class=\"headerlink\" title=\"是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？\"></a><font color=#008000>是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？</font></h4><p>答：</p>\n<ul>\n<li><p>Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。</p>\n</li>\n<li><p>Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。</p>\n</li>\n</ul>\n<br/>\n\n<h4 id=\"Redis-会遇到的缓存雪崩，缓存穿透，缓存击穿吧\"><a href=\"#Redis-会遇到的缓存雪崩，缓存穿透，缓存击穿吧\" class=\"headerlink\" title=\"Redis 会遇到的缓存雪崩，缓存穿透，缓存击穿吧\"></a><font color=#008000>Redis 会遇到的缓存雪崩，缓存穿透，缓存击穿吧</font></h4><p>先来了解一下缓存雪崩，缓存穿透，缓存击穿是什么意思！</p>\n<p>一、缓存雪崩</p>\n<p><strong>含义：</strong></p>\n<p>缓存雪崩表示在某一时间段，缓存集中失效，导致请求全部走数据库，有可能搞垮数据库，使整个服务瘫痪。</p>\n<p>使缓存集中失效的原因：</p>\n<ol>\n<li><p>redis服务器挂掉了。</p>\n</li>\n<li><p>对缓存数据设置了相同的过期时间，导致某时间段内缓存集中失效。（√）</p>\n</li>\n</ol>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li><p>针对原因1，可以实现redis的高可用，Redis Cluster 或者 Redis Sentinel(哨兵) 等方案。</p>\n</li>\n<li><p>针对原因2，设置缓存过期时间时加上一个随机值，避免缓存在同一时间过期。</p>\n</li>\n</ol>\n<p>举个荔枝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置过期时间加上一个随机值</span></span><br><span class=\"line\"><span class=\"variable\">$redis</span>-&gt;<span class=\"built_in\">set</span>(<span class=\"string\">'article_content_1'</span>, <span class=\"string\">'文章内容'</span>, 60 + mt_rand(1, 60));</span><br><span class=\"line\"><span class=\"variable\">$redis</span>-&gt;<span class=\"built_in\">set</span>(<span class=\"string\">'article_content_2'</span>, <span class=\"string\">'文章内容'</span>, 60 + mt_rand(1, 60));</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用双缓存策略，设置两个缓存，原始缓存和备用缓存，原始缓存失效时，访问备用缓存，备用缓存失效时间设置长点。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 原始缓存</span></span><br><span class=\"line\"><span class=\"variable\">$redis</span>-&gt;<span class=\"built_in\">set</span>(<span class=\"string\">'article_content_2'</span>, <span class=\"string\">'文章内容'</span>, 60);</span><br><span class=\"line\"><span class=\"comment\">## 设置备用缓存，失效时间设置长点</span></span><br><span class=\"line\"><span class=\"variable\">$redis</span>-&gt;<span class=\"built_in\">set</span>(<span class=\"string\">'article_content_backup_2'</span>, <span class=\"string\">'文章内容'</span>, 1800);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>二、缓存穿透</p>\n<p><strong>含义：</strong></p>\n<p>缓存穿透表示查询一个一定不存在的数据，由于没有获取到缓存，所以没写入缓存，导致这个不存在的数据每次都需要去数据库查询，失去了缓存的意义。</p>\n<p>请求的数据大量的没有获取到缓存，导致走数据库，有可能搞垮数据库，使整个服务瘫痪。</p>\n<p>比如文章表，一般我们的主键ID都是无符号的自增类型，有些人想要搞垮你的数据库，每次请求都用负数ID，而ID为负数的记录在数据库根本就没有。</p>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li>对于像ID为负数的非法请求直接过滤掉，采用<a href=\"https://codeyg.top/2021/07/16/%E9%9D%A2%E8%AF%95--%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/\"><font color=#FF8C00>布隆过滤器 ( Bloom Filter )</font> </a>。</li>\n<li>禁用IP 限制IP访问。</li>\n<li><strong>限流</strong> 每秒最多访问3次。</li>\n<li>针对在数据库中找不到记录的，我们仍然将该空数据存入缓存中，当然一般会设置一个较短的过期时间。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//设置文章ID为-10000的缓存为空</span><br><span class=\"line\"><span class=\"variable\">$id</span> = -10000;</span><br><span class=\"line\"><span class=\"variable\">$redis</span>-&gt;<span class=\"built_in\">set</span>(<span class=\"string\">'article_content_'</span> . <span class=\"variable\">$id</span>, <span class=\"string\">''</span>, 60);</span><br><span class=\"line\"> </span><br><span class=\"line\">var_dump(<span class=\"variable\">$redis</span>-&gt;get(<span class=\"string\">'article_content_'</span> . <span class=\"variable\">$id</span>));</span><br></pre></td></tr></table></figure>\n\n\n\n<p>三、缓存击穿</p>\n<p><strong>含义：</strong></p>\n<p>缓存击穿表示某个key的缓存非常热门，有很高的并发一直在访问，如果该缓存失效，那同时会走数据库，压垮数据库。</p>\n<p>缓存击穿与缓存雪崩的区别是这里针对的是某一热门 key 缓存，而雪崩针对的是大量缓存的集中失效。</p>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li>让该热门 key 的缓存永不过期。</li>\n<li>使用互斥锁，通过 redis 的 setnx 实现互斥锁。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRedis</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $redis = <span class=\"keyword\">new</span> Redis();</span><br><span class=\"line\">    $redis-&gt;connect(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6379</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $redis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//加锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lock</span>(<span class=\"params\">$key, $random</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $redis = getRedis();</span><br><span class=\"line\">    <span class=\"comment\">//设置锁的超时时间，避免释放锁失败，del()操作失败，产生死锁。</span></span><br><span class=\"line\">    $ret = $redis-&gt;<span class=\"keyword\">set</span>($key, $random, ['nx', 'ex' =&gt; 3 * 60]);</span><br><span class=\"line\">    return $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//解锁</span><br><span class=\"line\">function unLock($key, $random)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $redis = getRedis();</span><br><span class=\"line\">    <span class=\"comment\">//这里的随机数作用是，防止更新缓存操作时间过长，超过了锁的有效时间，导致其他请求拿到了锁。</span></span><br><span class=\"line\">    <span class=\"comment\">//但上一个请求更新缓存完毕后，如果不加判断直接删除锁，就会误删其他请求创建的锁。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($redis-&gt;<span class=\"keyword\">get</span>($key) == $random) &#123;</span><br><span class=\"line\">        $redis-&gt;del($key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//从缓存中获取文章数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArticleInCache</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $redis = getRedis();</span><br><span class=\"line\">    $key = <span class=\"string\">'article_content_'</span> . $id;</span><br><span class=\"line\">    $ret = $redis-&gt;<span class=\"keyword\">get</span>($key);</span><br><span class=\"line\">    if ($ret === false) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成锁的key</span></span><br><span class=\"line\">        $lockKey = $key . <span class=\"string\">'_lock'</span>;</span><br><span class=\"line\">        <span class=\"comment\">//生成随机数，用于设置锁的值，后面释放锁时会用到</span></span><br><span class=\"line\">        $random = mt_rand();</span><br><span class=\"line\">        <span class=\"comment\">//拿到互斥锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lock($lockKey, $random)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是伪代码，表示从数据库中获取文章数据</span></span><br><span class=\"line\">            $value = $db-&gt;getArticle($id);</span><br><span class=\"line\">            <span class=\"comment\">//更新缓存，过期时间可以根据情况自已调整</span></span><br><span class=\"line\">            $redis-&gt;<span class=\"keyword\">set</span>($key, $value, 2 * 60);</span><br><span class=\"line\">            //释放锁</span><br><span class=\"line\">            unLock($lockKey, $random);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待200毫秒，然后重新获取缓存值，让其他获取到锁的进程取得数据并设置缓存</span></span><br><span class=\"line\">            usleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            getArticleInCache($id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["面试篇"],"tags":["进阶","redis"]},{"title":"每日一面--Redis和MySQL数据一致性问题","url":"/PaulGeorge123.github.io/2021/07/22/%E9%9D%A2%E8%AF%95--Redis%E5%92%8CMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Redis 和 MySQL 数据一致性问题</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_00-53-11.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p>对于Web来说，用户量和访问量增一定程度上推动项目技术和架构的更迭和进步。</p>\n<p>当页面并发量和访问量并不多，MySQL<code>足以支撑</code>自己逻辑业务的发展。其实可以不加缓存，最多对静态页面进行缓存即可。</p>\n<p><font color=#008000>什么时候需要缓存？</font></p>\n<p>页面的并发量显著增多，数据库有些压力，并且有些数据更新频率较低<code>反复被查询</code>或者查询速度<code>较慢</code>。</p>\n<p>对高命中的对象存到 Key-Value 形式的 Redis 中，那么，如果数据被命中，那么可以不经过效率很低的 DB。从高效的 Redis 中查找到数据。</p>\n<p>虽然还能通过静态页面缓存页面、cdn加速、甚至负载均衡这些方法提高系统并发量，但是本片博客只是针对 Redis 缓存做讨论</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"Redis-缓存的应用\"><a href=\"#Redis-缓存的应用\" class=\"headerlink\" title=\"Redis 缓存的应用\"></a>Redis 缓存的应用</h3><h4 id=\"不使用缓存的时候\"><a href=\"#不使用缓存的时候\" class=\"headerlink\" title=\"不使用缓存的时候\"></a>不使用缓存的时候</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-08-41.png\"  />\n\n<hr>\n<h4 id=\"缓存适用的高并发场景\"><a href=\"#缓存适用的高并发场景\" class=\"headerlink\" title=\"缓存适用的高并发场景\"></a>缓存适用的高并发场景</h4><p>缓存适用于高并发的场景，提升服务容量。</p>\n<p>主要是将从经常被访问的数据或者查询成本较高从慢的介质中存到比较快的介质中，比如从硬盘—&gt;内存。</p>\n<p>大多数关系数据库是基于硬盘读写的，其效率和资源有限，而 redis 是基于内存的，其读写速度差别差别很大。当并发过高关系数据库性能达到瓶颈时候，就可以策略性将常访问数据放到 redis 提高系统吞吐和并发量。</p>\n<h5 id=\"常用网站为什么会响应慢？\"><a href=\"#常用网站为什么会响应慢？\" class=\"headerlink\" title=\"常用网站为什么会响应慢？\"></a>常用网站为什么会响应慢？</h5><p>对于常用网站和场景，关系数据库主要可能慢在两个地方：</p>\n<ul>\n<li>读写IO性能较差</li>\n<li>一个数据可能通过较大量计算得到</li>\n</ul>\n<blockquote>\n<p>所以使用缓存能够减少磁盘IO次数和关系数据库的计算次数</p>\n</blockquote>\n<p><strong>体现：</strong></p>\n<ul>\n<li>基于内存，读写较快</li>\n<li>使用哈希算法直接定位结果不需要计算</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-24-18.png\"  />\n\n<hr>\n<h3 id=\"Redis-缓存需要注意的问题\"><a href=\"#Redis-缓存需要注意的问题\" class=\"headerlink\" title=\"Redis 缓存需要注意的问题\"></a>Redis 缓存需要注意的问题</h3><p>缓存使用不当会带来很多问题，所以需要对一些细节进行认真考量和设计。</p>\n<p><font color=#FF8C00>最难的数据一致性！</font></p>\n<h4 id=\"是否用缓存\"><a href=\"#是否用缓存\" class=\"headerlink\" title=\"是否用缓存\"></a>是否用缓存</h4><p>项目不能为了用缓存而用缓存，缓存并一定适合所有场景！</p>\n<p>如果对<strong>数据一致性要求极高</strong>，又或者<strong>数据频繁更改而查询并不多</strong>，又或者根本没并发量的、查询简单的不一定需要缓存，还可能浪费资源使得项目变得臃肿难维护。</p>\n<h4 id=\"过期策略选择\"><a href=\"#过期策略选择\" class=\"headerlink\" title=\"过期策略选择\"></a>过期策略选择</h4><p>缓存装的是相对热点和常用的数据，redis 资源也是有限，需要选择一个合理的策略让缓存过期删除，根据时间来的 FIFO 是最好实现的。且 redis 在全局 key 支持过期策略。</p>\n<p>并且过期时间也要根据系统情况合理设置，如果硬件好点当前可以稍微久一点，但是过期时间过久或者过短可能都不太好，过短可能缓存命中率不高，而过久很可能造成很多冷门数据存储在Redis中不释放。</p>\n<h3 id=\"Redis-缓存数据一致性问题\"><a href=\"#Redis-缓存数据一致性问题\" class=\"headerlink\" title=\"Redis 缓存数据一致性问题\"></a>Redis 缓存数据一致性问题</h3><h4 id=\"读数据\"><a href=\"#读数据\" class=\"headerlink\" title=\"读数据\"></a>读数据</h4><p><code>read</code>：从 redis 中读取，如果 redis 中没有，那么就从 MySQL 中获取更新 redis 缓存。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-37-06.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"写数据-【先更新数据库，再更新缓存-普通低并发-】\"><a href=\"#写数据-【先更新数据库，再更新缓存-普通低并发-】\" class=\"headerlink\" title=\"写数据 【先更新数据库，再更新缓存(普通低并发)】\"></a>写数据 【先更新数据库，再更新缓存(普通低并发)】</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-49-00.png\" alt=\"\"></p>\n<p>先更新数据库信息，再更新Redis缓存。这是常规做法，缓存基于数据库，取自数据库。</p>\n<p>但是其中可能遇到一些问题，例如上述如果更新缓存失败(宕机等其他状况)，将会使得数据库和 redis 数据不一致。<font color=#FF0000>造成 DB 新数据，缓存旧数据</font></p>\n<hr>\n<h4 id=\"写数据-【先删除缓存，再写入数据库-低并发优化-】\"><a href=\"#写数据-【先删除缓存，再写入数据库-低并发优化-】\" class=\"headerlink\" title=\"写数据 【先删除缓存，再写入数据库(低并发优化)】\"></a>写数据 【先删除缓存，再写入数据库(低并发优化)】</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-04-31.png\" alt=\"\"></p>\n<p>这种情况能够有效避免【先更新数据库，再更新缓存】中防止写入 redis 失败的问题。将缓存删除进行更新。理想是让下次访问 redis 为空去 mysql 取得最新值到缓存中。但是这种情况仅限于低并发的场景中而不适用高并发场景!</p>\n<p><strong>存在的问题</strong></p>\n<p>我们在【先更新数据库，再更新缓存】讨论过如果更新库成功，缓存更新失败会导致脏数据。我们理想是删除缓存让下一个线程访问适合更新缓存。问题是：如果这下一个线程来的太早呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-11-16.png\" alt=\"\"></p>\n<p>因为在多线的情况下，无法保证那条线程优先执行。</p>\n<p>将会出现 redis 缓存数据和 mysql 不一致</p>\n<p><font color=#FF0000>高并发下依然会造成缓存是旧数据，DB 是新数据</font></p>\n<hr>\n<h4 id=\"写数据【延时双删策略】\"><a href=\"#写数据【延时双删策略】\" class=\"headerlink\" title=\"写数据【延时双删策略】\"></a>写数据【延时双删策略】</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-23-14.png\" alt=\"\"></p>\n<p>能过缓解在【先删除缓存，再写入数据库】中在更新MySQL过程中有读的线程进入造成Redis缓存与MySQL数据不一致。</p>\n<p>方法就是 <font color=#FF0000>删除缓存</font>-&gt;<font color=#008000>更新缓存</font>-&gt;<font color=#FF0000>延时【几百ms，可异步】再次删除缓存</font></p>\n<p><strong>存在的问题</strong></p>\n<p>第二次删除错误、多写多读高并发情况下对MySQL访问的压力等等，当然你可以选择用MQ等消息队列异步解决。</p>\n<hr>\n<h4 id=\"写数据【直接操作缓存，定期写入sql-适合高并发-】\"><a href=\"#写数据【直接操作缓存，定期写入sql-适合高并发-】\" class=\"headerlink\" title=\"写数据【直接操作缓存，定期写入sql(适合高并发)】\"></a>写数据【直接操作缓存，定期写入sql(适合高并发)】</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-34-36.png\" alt=\"\"></p>\n<p>直接操作缓存，将缓存定期写入sql。</p>\n<p>因为 redis 这种非关系数据库又基于内存操作 KV 相比传统关系型要快很多！</p>\n<p><strong>异步更新缓存(基于订阅 binlog 的同步机制)</strong></p>\n<p><strong>技术整体思路：</strong></p>\n<p>MySQL binlog 增量订阅消费 + 消息队列 + 增量数据更新到 redis</p>\n<ul>\n<li><strong>读Redis</strong>：热数据基本都在 redis</li>\n<li><strong>写MySQL</strong>：增删改都是操作 mysql</li>\n<li><strong>更新Redis数据</strong>：mysql 的数据操作 binlog，来更新到 redis</li>\n</ul>\n<p><strong>数据操作主要分为两大块：</strong></p>\n<ul>\n<li>一个是全量(将全部数据一次写入到 redis)</li>\n<li>一个是增量（实时更新）</li>\n</ul>\n","categories":["面试篇"],"tags":["进阶","redis"]},{"title":"每日一面--Spring 循环依赖以及三级缓存","url":"/PaulGeorge123.github.io/2021/07/21/%E9%9D%A2%E8%AF%95--Spring%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8F%8A%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Spring 循环依赖以及三级缓存</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-45-33.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>什么是循环依赖？</font></p>\n<p>简单的说就是 A 依赖 B，B 依赖 A 这样就构成了循环依赖。</p>\n<p><font color=#008000>具体说一说 spring 是如何解决循环依赖的吧</font></p>\n<p>让我好好想一想……</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"什么是循环依赖\"><a href=\"#什么是循环依赖\" class=\"headerlink\" title=\"什么是循环依赖\"></a>什么是循环依赖</h3><p>所谓的循环依赖是指，A 依赖 B，B 又依赖 A，它们之间形成了循环依赖。或者是 A 依赖 B，B 依赖 C，C 又依赖 A，形成了循环依赖。更或者是自己依赖自己。</p>\n<p>举个图解荔枝：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_22-16-10.png\" style=\"zoom:90%;\" />\n\n\n\n<p>举个代码荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanB</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> BeanA beanA;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanA</span><span class=\"params\">(BeanA beanA)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.beanA = beanA;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BeanB beanB;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanB</span><span class=\"params\">(BeanB beanB)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanB = beanB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"beanA\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ase.BeanA\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanB\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"beanB\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"beanB\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ase.BeanB\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanA\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"beanA\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>按照上面的例子，Spring 启动后，读取如上的配置文件，会按顺序先实例化 A，但是创建的时候又发现它依赖了 B，接着就去实例化 B ，同样又发现它依赖了 A ，从而导致了无限循环，淦！</p>\n<p><strong>尝试思考</strong></p>\n<p>Spring 实例化对象分两步：</p>\n<p>第一步，会先创建一个原始对象，只是没有设置属性，可以理解为”半成品”—— 官方叫 A 对象的早期引用（EarlyBeanReference）；</p>\n<p>第二步，当实例化 B 的时候发现依赖了 A， B 就会把这个“半成品”设置进去先完成实例化，既然 B 完成了实例化，所以 A 就可以获得 B 的引用，也完成实例化了，这其实就是 Spring 解决循环依赖的思想；</p>\n<hr>\n<h3 id=\"循环依赖发生的时机\"><a href=\"#循环依赖发生的时机\" class=\"headerlink\" title=\"循环依赖发生的时机\"></a>循环依赖发生的时机</h3><h4 id=\"Bean-实例化\"><a href=\"#Bean-实例化\" class=\"headerlink\" title=\"Bean 实例化\"></a>Bean 实例化</h4><p>主要分为三步，如图：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_22-33-22.png\" style=\"zoom:80%;\" />\n\n\n\n<p>问题出现在：第一步和第二步的过程中，也就是填充属性 / 方法的过程中</p>\n<h4 id=\"Spring-如何解决的\"><a href=\"#Spring-如何解决的\" class=\"headerlink\" title=\"Spring 如何解决的\"></a>Spring 如何解决的</h4><ul>\n<li>Spring 为了解决单例的循环依赖问题，使用了 <strong>三级缓存</strong> ，递归调用时发现 Bean 还在创建中即为循环依赖</li>\n<li>单例模式的 Bean 保存在如下的数据结构中：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**一级缓存，用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 二级缓存：存放原始的 bean 对象（尚未填充属性），用于解决循环依赖 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 三级级缓存：存放 bean 工厂对象，用于解决循环依赖 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">bean 的获取过程：先从一级获取，失败再从二级、三级里面获取</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">创建中状态：是指对象已经 new 出来了但是所有的属性均为 null 等待被 init</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一级缓存：singletonObjects，存放完全实例化属性赋值完成的 Bean，直接可以使用。</li>\n<li>二级缓存：earlySingletonObjects，存放早期 Bean 的引用，尚未属性装配的 Bean</li>\n<li>三级缓存：singletonFactories，三级缓存，存放实例化完成的 Bean工厂。</li>\n</ul>\n<h4 id=\"循环依赖的解决流程图\"><a href=\"#循环依赖的解决流程图\" class=\"headerlink\" title=\"循环依赖的解决流程图\"></a>循环依赖的解决流程图</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_00-13-55.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"A、B-相互依赖\"><a href=\"#A、B-相互依赖\" class=\"headerlink\" title=\"A、B 相互依赖\"></a>A、B 相互依赖</h4><p>检测循环依赖的过程如下：</p>\n<ul>\n<li><p>A 创建过程中需要 B，于是 <strong>A 将自己放到三级缓里面</strong> ，去实例化 B</p>\n</li>\n<li><p>B 实例化的时候发现需要 A，于是 B 先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了</p>\n<ul>\n<li><strong>然后把三级缓存里面的这个 A 放到二级缓存里面，并删除三级缓存里面的 A</strong></li>\n<li>B 顺利初始化完毕，<strong>将自己放到一级缓存里面</strong>（此时B里面的A依然是创建中状态）</li>\n</ul>\n</li>\n<li><p>然后回来接着创建 A，此时 B 已经创建结束，直接从一级缓存里面拿到 B ，然后完成创建，<strong>并将自己放到一级缓存里面</strong></p>\n</li>\n<li><p>如此一来便解决了循环依赖的问题</p>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>先让最底层对象完成初始化，通过三级缓存与二级缓存提前曝光创建中的 Bean，让其他 Bean 率先完成初始化。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><font color=#FF8C00>Spring 还是有一些无法解决的循环依赖！</font></p>\n<p>使用构造器注入其他 Bean 的实例，这个就没办法了，要手动改代码。</p>\n","categories":["面试篇"],"tags":["进阶","Spring"]},{"title":"每日一面--SpringBoot启动原理","url":"/PaulGeorge123.github.io/2021/06/27/%E9%9D%A2%E8%AF%95--SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 SpringBoot 启动原理：</strong></p>\n<hr>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/spring-boot-logo.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>最近在不断的面试中总结<code>Spring</code>全家桶已经是必须要熟练掌握的框架了，其中化繁为简的<code>SpringBoot</code>更是经常被提及的框架，所以我今天就来聊聊 SpringBoot。</p>\n<p>说起<code>SpringBoot</code>的江湖地位，由于其设计优雅，实现简单，可以节省不少开发时间。</p>\n<a id=\"more\"></a>\n\n\n\n<blockquote>\n<p>以下源码的 <code>SpringBoot</code> 版本：2.3.9.RELEASE</p>\n</blockquote>\n<p>其实<code>SpringBoot</code>的启动大体上分为 2 个步骤：</p>\n<ol>\n<li>启动类上注解：@SpringBootApplication</li>\n<li>启动类中的main方法：org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)</li>\n</ol>\n<h4 id=\"启动原理\"><a href=\"#启动原理\" class=\"headerlink\" title=\"启动原理\"></a>启动原理</h4><h5 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h5><p>main 方法上的注解 @SpringBootApplication：</p>\n<p>三个注解核心注解：</p>\n<ul>\n<li>@SpringBootConfiguration</li>\n<li>@EnableAutoConfiguratio</li>\n<li>@ComponentScan</li>\n</ul>\n<p><strong>@SpringBootConfiguration</strong></p>\n<p>根据 Javadoc 可知，该注解作用就是将当前的类作为一个 <strong>JavaConfig</strong>，然后<strong>触发注解</strong><code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>的<strong>处理</strong>，本质上与<strong>@Configuration</strong>注解没有区别。</p>\n<p><strong>@ComponentScan</strong></p>\n<p>扫描的 <code>Spring</code> 对应的组件，如 <strong>@Componet</strong>，<strong>@Repository</strong>。</p>\n","categories":["面试篇"],"tags":["进阶","SpringBoot"]},{"title":"每日一面--Spring入门","url":"/PaulGeorge123.github.io/2021/06/19/%E9%9D%A2%E8%AF%95--Spring%E6%A1%86%E6%9E%B6/","content":"<blockquote>\n<p>每天一篇Java小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Spring 框架</strong></p>\n<hr>\n<br>\n\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-20_17-58-03.png\" style=\"zoom:50%;\" />\n\n<br>\n\n<br>\n\n<p><strong>写在前面</strong></p>\n<p>百度百科：</p>\n<p>Spring 框架是由于软件开发的复杂性而创建的。</p>\n<p>Spring 使用的是基本的<code>JavaBean</code>来完成以前只可能由<code>EJB</code>完成的事情。然而，Spring 的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分 Java 应用都可以从 Spring 中受益。</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring-核心\"><a href=\"#Spring-核心\" class=\"headerlink\" title=\"Spring 核心\"></a>Spring 核心</h3><h4 id=\"Spring-的整体架构\"><a href=\"#Spring-的整体架构\" class=\"headerlink\" title=\"Spring 的整体架构\"></a>Spring 的整体架构</h4><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/1555451-20200715233519469-2015600342.png\" style=\"zoom:90%;\" />\n\n<hr>\n<h4 id=\"Spring-应用的设计模式\"><a href=\"#Spring-应用的设计模式\" class=\"headerlink\" title=\"Spring 应用的设计模式\"></a>Spring 应用的设计模式</h4><ul>\n<li><strong>工厂设计模式</strong> : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。</li>\n<li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li>\n<li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模板方法模式</strong> : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li>\n<li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>\n<li><strong>观察者模式</strong>: Spring 事件驱动模型就是观察者模式很经典的一个应用。</li>\n<li><strong>适配器模式</strong> :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、Spring MVC 中也是用到了适配器模式适配 controller。</li>\n</ul>\n<h3 id=\"Spring-三层架构\"><a href=\"#Spring-三层架构\" class=\"headerlink\" title=\"Spring 三层架构\"></a>Spring 三层架构</h3><ul>\n<li>A 表现层  <code>web</code>层 、 <code>MVC</code>是表现层的一个设计模型 </li>\n<li>B 业务层 <code>service</code>层</li>\n<li>C 持久层 <code>dao</code>层</li>\n</ul>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>要与 SPringMVC 的三层架构区分开。</p>\n<h4 id=\"核心容器\"><a href=\"#核心容器\" class=\"headerlink\" title=\"核心容器\"></a>核心容器</h4><ul>\n<li><strong>spring-core</strong> 模块提供了框架的基本组成部分，包括 <code>IoC</code> 和依赖注入功能。</li>\n<li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li>\n<li><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。<strong>spring-context-support</strong> 提供了对第三方集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li>\n<li><strong>spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li>\n</ul>\n<h4 id=\"数据访问-集成\"><a href=\"#数据访问-集成\" class=\"headerlink\" title=\"数据访问/集成\"></a>数据访问/集成</h4><p><font color=#FF0000>注：JDBC【Java Data Base Connectivity】，ORM【Object Relational Mapping】，OXM【Object XML Mapping】，JMS【Java Message Service】</font></p>\n<ul>\n<li><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li>\n<li><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li>\n<li><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li>\n<li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li>\n<li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细）</li>\n</ul>\n<h4 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h4><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：</p>\n<ul>\n<li><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li>\n<li><strong>Web-MVC</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li>\n<li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li>\n<li><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li>\n</ul>\n<hr>\n<h3 id=\"Spring-框架的优点\"><a href=\"#Spring-框架的优点\" class=\"headerlink\" title=\"Spring 框架的优点\"></a>Spring 框架的优点</h3><ol>\n<li>非侵入式设计</li>\n<li>方便解耦、简化开发</li>\n<li>支持AOP</li>\n<li>支持声明式事务处理</li>\n<li>方便程序的测试</li>\n<li>方便集成各种优秀框架</li>\n<li>降低Jave EE API的使用难度。</li>\n</ol>\n<p><font color=#008000>说到 spring 的容器管理就不得不先提一下 bean 的概念</font></p>\n<h3 id=\"Bean-的概念\"><a href=\"#Bean-的概念\" class=\"headerlink\" title=\"Bean 的概念\"></a>Bean 的概念</h3><ol>\n<li>在 Java 中，“Bean”是对“可重用组件”的惯用叫法。组件本身就是一个抽象概念，Bean 作为其代称，也是一个抽象概念，当我们将一个类或一个对象作为组件来考虑时，就可以称它为 Bean。</li>\n<li>在 Spring 中，Bean 的概念同上，它有时也被称为 Component。由 Spring 容器管理的 Bean 则称为 Spring Bean。</li>\n</ol>\n<p><strong>扩展：</strong></p>\n<ul>\n<li><p><em>Java Bean</em> 的概念不同于 Bean，Java Bean 是指符合 <em>JavaBeans</em> 规范的一类特殊的 Bean，即：所有属性均为 private，提供 getter 和 setter，提供默认构造方法。JavaBean 也可以认为是遵循特定约定的 POJO。</p>\n</li>\n<li><p>POJO（Plain Ordinary Java Object）是指简单且普通的 Java 对象。严格来说，它不继承类，不实现接口，不处理业务逻辑，仅用于封装数据。</p>\n</li>\n</ul>\n<p><font color=#008000>说到 spring 就不得不提到两个重要的概念</font></p>\n<ul>\n<li>IoC 【控制反转】</li>\n<li>DI 【依赖注入】</li>\n</ul>\n<h3 id=\"IOC-与-DI\"><a href=\"#IOC-与-DI\" class=\"headerlink\" title=\"IOC 与 DI\"></a>IOC 与 DI</h3><h4 id=\"IOC-定义\"><a href=\"#IOC-定义\" class=\"headerlink\" title=\"IOC 定义\"></a>IOC 定义</h4><p>IoC（Inverse Of Control，控制反转）是一种设计思想，所谓控制反转，指的是对资源的控制方式进行反转。</p>\n<p><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</p>\n<h4 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h4><p>【控制权在自己】：在 OOP 中，对象之间往往存在某种依赖关系，当一个对象依赖另一个对象时，传统 OOP 的做法是在它内部直接 <strong>new</strong> 一个出来，这种做法是由对象自己主动创建并管理依赖资源。</p>\n<p>【控制权在 Spring 容器】：”控制反转”是指 <strong>new</strong> 实例工作不由程序员来做而是交给 Spring 容器来做。使得对象不再主动控制依赖资源，而是被动接受资源，IoC 要求将资源的控制权下放给 <strong>Ioc</strong> 容器，它将对资源进行集中管理，对象需要什么资源就从容器中取，或者让容器主动将资源注入进来。</p>\n<h4 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h4><p>在 IoC 之后，对象与依赖资源之间不再具有强耦合性，资源可以被直接替换，而无需改动需求方的代码。</p>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在 Spring 中 <strong>BeanFactory</strong> 是 IOC 容器的实际代表者。【工厂模式】</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-20_20-38-32.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Spring-的两种-IoC-容器\"><a href=\"#Spring-的两种-IoC-容器\" class=\"headerlink\" title=\"Spring 的两种 IoC 容器\"></a>Spring 的两种 IoC 容器</h4><p>Spring 提供了两种 IoC 容器： BeanFactory 和 ApplicationContext </p>\n<ul>\n<li>BeanFactory 提供基本的 IoC 服务支持。</li>\n<li>ApplicationContext 对 BeanFactory 进行了扩展与增强，除了拥有 BeanFactory 的所有能力外，还提供了许多高级特性，如事件发布、资源加载、国际化消息等。ApplicationContext 接口继承自 BeanFactory 接口，它的实现也是直接复用了 BeanFactory 的实现，因此可以说，ApplicationContext 是 BeanFactory 的增强版。</li>\n</ul>\n<p>两者在核心功能上的区别主要是默认的加载策略不同，这点区别几乎可以忽略不计，通常情况下，我们总是使用更为强大的 ApplicationContext，很少会直接使用 BeanFactory。</p>\n<h4 id=\"IoC-的两种实现方式\"><a href=\"#IoC-的两种实现方式\" class=\"headerlink\" title=\"IoC 的两种实现方式\"></a>IoC 的两种实现方式</h4><ul>\n<li>DI（Dependency Injection，依赖注入）<br>所谓依赖注入，是指对象所依赖的资源将通过被动注入的方式得到，换言之，容器会主动地根据预先配置的依赖关系将资源注入进来。</li>\n<li>DL（Dependency Lookup，依赖查找）<br>依赖查找是早先提出的一种 IoC 实现方式，它要求对象主动查找依赖资源，这种方式已经不再使用。</li>\n</ul>\n<h4 id=\"DI-定义\"><a href=\"#DI-定义\" class=\"headerlink\" title=\"DI 定义\"></a>DI 定义</h4><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>依赖注入主要有两种实现方式，分别是属性 setter 注入和构造方法注入</p>\n<ol>\n<li><strong>属性 setter 注入</strong></li>\n</ol>\n<p>指 IoC 容器使用 setter 方法注入被依赖的实例。通过调用无参构造器或无参 static 工厂方法实例化 bean 后，调用该 bean 的 setter 方法，即可实现基于 setter 的 DI。</p>\n<ol start=\"2\">\n<li><strong>构造方法注入</strong></li>\n</ol>\n<p>指 IoC 容器使用构造方法注入被依赖的实例。基于构造器的 DI 通过调用带参数的构造方法实现，每个参数代表一个依赖。</p>\n<h4 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。</p>\n<hr>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><h4 id=\"AOP-的定义\"><a href=\"#AOP-的定义\" class=\"headerlink\" title=\"AOP 的定义\"></a>AOP 的定义</h4><ol>\n<li><p>AOP（面向切面编程），它是利用对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n</li>\n<li><p>AOP 采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）</p>\n</li>\n</ol>\n<p><strong>AOP：面向切面编程【底层就是动态代理】，指程序在运行期间动态的将某段代码切入到指定方法位置进行的编程方式。</strong></p>\n<h4 id=\"AOP-的优势\"><a href=\"#AOP-的优势\" class=\"headerlink\" title=\"AOP 的优势\"></a>AOP 的优势</h4><ol>\n<li>减少重复的代码</li>\n<li>提供开发的效率</li>\n<li>维护方便</li>\n</ol>\n<h4 id=\"AOP-体系\"><a href=\"#AOP-体系\" class=\"headerlink\" title=\"AOP 体系\"></a>AOP 体系</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-24_20-13-10.png\" alt=\"\"></p>\n<h4 id=\"AOP-的使用场景\"><a href=\"#AOP-的使用场景\" class=\"headerlink\" title=\"AOP 的使用场景\"></a>AOP 的使用场景</h4><p><strong>日志场景</strong></p>\n<ul>\n<li>诊断上下文，如：【log4j 或 logback 】</li>\n<li>辅助信息，如：方法执行时间 【System.currentTimeMillis()】</li>\n</ul>\n<p><strong>统计场景</strong></p>\n<ul>\n<li>方法调用次数</li>\n<li>执行异常次数</li>\n<li>数据抽样</li>\n<li>数值累加</li>\n</ul>\n<p><strong>安防场景</strong></p>\n<ul>\n<li>熔断，如：【Netflix Hystrix】</li>\n<li>限流和降级：如：【Alibaba Sentinel】</li>\n<li>认证和授权，如：【Spring Security】</li>\n<li>监控，如：【JMX】</li>\n</ul>\n<p><strong>性能场景</strong></p>\n<ul>\n<li><p>缓存，如 【Spring Cache】</p>\n</li>\n<li><p>超时控制</p>\n</li>\n</ul>\n<h4 id=\"AOP-的底层原理\"><a href=\"#AOP-的底层原理\" class=\"headerlink\" title=\"AOP 的底层原理\"></a>AOP 的底层原理</h4><p><strong>JDK的动态代理技术（主要）</strong></p>\n<ol>\n<li>为接口创建代理类的字节码文件</li>\n<li>使用 ClassLoader 将字节码文件加载到 JVM</li>\n<li>创建代理类实例对象，执行对象的目标方法</li>\n</ol>\n<h4 id=\"AOP-的重要名词\"><a href=\"#AOP-的重要名词\" class=\"headerlink\" title=\"AOP 的重要名词\"></a>AOP 的重要名词</h4><ol>\n<li><p><strong>【 Joinpoint 】连接点</strong> </p>\n<p>所谓连接点是指那些被拦截到的点。在spring中指的是所有方法,因为spring只支持方法类型的连接点。</p>\n</li>\n<li><p><strong>【 Pointcut 】切入点</strong></p>\n<p> （编写切入点表达式），程序增强的入口。</p>\n</li>\n<li><p><strong>【 Advice 】通知/增强</strong></p>\n<p>对spring中方法要进行增强，编写事务管理相关代码。</p>\n</li>\n<li><p><strong>【 Target 】目标对象</strong></p>\n<p>代理的目标对象</p>\n</li>\n<li><p><strong>【 Weaving 】织入</strong></p>\n<p>是指把增强应用到目标对象来创建新的代理对象的过程</p>\n</li>\n<li><p><strong>【 Proxy 】代理</strong></p>\n<p>一个类被AOP织入增强后，就产生一个结果代理类</p>\n</li>\n<li><p><font color=#FF8C00>Aspect(切面) = 切入点 + 通知</font></p>\n</li>\n</ol>\n<h4 id=\"AOP-通知执行顺序\"><a href=\"#AOP-通知执行顺序\" class=\"headerlink\" title=\"AOP 通知执行顺序\"></a>AOP 通知执行顺序</h4><h5 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h5><p><strong>正常情况</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-25_01-29-28.png\" alt=\"\"></p>\n<p><strong>异常情况</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-25_01-29-42.png\" alt=\"\"></p>\n<p><strong>多个切面的情况（假设正常情况）</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-25_01-29-12.png\" alt=\"\"></p>\n<h5 id=\"注意-3\"><a href=\"#注意-3\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>从 Spring 5.2.7 开始，Spring AOP 不再严格按照 AspectJ 定义的规则来执行 advice，而是根据其类型按照从高到低的优先级进行执行：@Around，@Before ，@After，@AfterReturning，@AfterThrowing</p>\n<h5 id=\"1、单个切面类\"><a href=\"#1、单个切面类\" class=\"headerlink\" title=\"1、单个切面类\"></a>1、单个切面类</h5><p><strong>Spring 5.28：</strong><br>　　　　正常情况：around 环绕前置 ==&gt; @Before ==&gt; target 目标方法执行 ==&gt; @AfterReturning ==&gt; @After ==&gt; around 环绕返回 ==&gt; around 环绕最终<br>　　　　异常情况：around 环绕前置 ==&gt; @Before ==&gt; target 目标方法执行 ==&gt; @AfterThrowing ==&gt; @After ==&gt; around 环绕异常 ==&gt; around 环绕最终</p>\n<h5 id=\"2、多个切面\"><a href=\"#2、多个切面\" class=\"headerlink\" title=\"2、多个切面\"></a>2、多个切面</h5><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-25_01-05-02.png\" style=\"zoom:80%;\" />\n\n<p><strong>Spring 5.28：</strong><br>　　　　正常情况：切面1环绕前置 ==&gt; 切面1@Before ==&gt; 切面2环绕前置 ==&gt; 切面2@Before ==&gt; 目标方法执行 ==&gt; 切面2@AfterReturning ==&gt; 切面2@After ==&gt; 切面2环绕返回 ==&gt; 切面2环绕最终 ==&gt; 切面1@AfterReturning ==&gt; 切面1@After ==&gt; 切面1环绕返回 ==&gt; 切面1环绕最终<br>　　　　异常情况：切面1环绕前置 ==&gt; 切面1@Before ==&gt; 切面2环绕前置 ==&gt; 切面2@Before ==&gt; 目标方法执行 ==&gt; 切面2@AfterThrowing ==&gt; 切面2@After ==&gt; 切面2环绕异常 ==&gt; 切面2环绕最终 ==&gt; 切面1@AfterThrowing ==&gt; 切面1@After ==&gt; 切面1环绕异常 ==&gt; 切面1环绕最终</p>\n<h5 id=\"3、-Order注解指定先后顺序\"><a href=\"#3、-Order注解指定先后顺序\" class=\"headerlink\" title=\"3、@Order注解指定先后顺序\"></a>3、@Order注解指定先后顺序</h5><p>数字越小，优先级越高，先进后出</p>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order</span>(value = <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceProxy</span> </span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Order</span>(value = <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceProxy2</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 结果： </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：环绕前置通知</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：<span class=\"doctag\">@Before</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：环绕前置通知</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：<span class=\"doctag\">@Before</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 目标方法执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：<span class=\"doctag\">@AfterReturning</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：<span class=\"doctag\">@After</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：环绕返回通知</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面一：环绕最终通知</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：<span class=\"doctag\">@AfterReturning</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：<span class=\"doctag\">@After</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：环绕返回通知</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面二：环绕最终通知</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>由此得出：</strong></p>\n<p>spring aop 就是一个同心圆，要执行的方法为圆心，最外层的 order 最小。</p>\n<h4 id=\"AOP-实践\"><a href=\"#AOP-实践\" class=\"headerlink\" title=\"AOP 实践\"></a>AOP 实践</h4><p>AOP看起来很麻烦, 只要3步就可以了:</p>\n<ol>\n<li>将业务逻辑组件和切面类都加入到容器中, 告诉spring哪个是切面类(@Aspect)</li>\n<li>在切面类上的每个通知方法上标注通知注解, 告诉Spring何时运行(写好切入点表达式,参照官方文档)</li>\n<li>开启基于注解的AOP模式 @EableXXXX</li>\n</ol>\n<h5 id=\"1、引入-Aop-的依赖\"><a href=\"#1、引入-Aop-的依赖\" class=\"headerlink\" title=\"1、引入 Aop 的依赖\"></a>1、引入 Aop 的依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、编写-Aop-切面类\"><a href=\"#2、编写-Aop-切面类\" class=\"headerlink\" title=\"2、编写 Aop 切面类\"></a>2、编写 Aop 切面类</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></span><br><span class=\"line\"><span class=\"comment\">     * 切点的集合，这个表达式所描述的是一个虚拟面（规则）</span></span><br><span class=\"line\"><span class=\"comment\">     * 就是为了Annotation扫描时能够拿到注解中的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * execution函数用于匹配方法执行的连接点，语法为：</span></span><br><span class=\"line\"><span class=\"comment\">     * execution(方法修饰符(可选)  返回类型  方法名  参数  异常模式(可选))</span></span><br><span class=\"line\"><span class=\"comment\">     * 参数部分允许使用通配符：</span></span><br><span class=\"line\"><span class=\"comment\">     * *  匹配任意字符，但只能匹配一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * .. 匹配任意字符，可以匹配任意多个元素，表示类时，必须和*联合使用</span></span><br><span class=\"line\"><span class=\"comment\">     * +  必须跟在类名后面，如Horseman+，表示类本身和继承或扩展指定类的所有类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.ase.aop.controller.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置环绕通知,使用在方法aspect()上注册的切入点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((ProceedingJoinPoint) joinPoint).proceed();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">            log.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">            log.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 前置通知: 在目标方法()运行之前运行 (<span class=\"doctag\">@Before</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logStart</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"before: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 后置通知：在目标方法()运行结束之后运行,无论正常或异常结束 (<span class=\"doctag\">@After</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAfter</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"after: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回通知：在目标方法()正常返回之后运行 (<span class=\"doctag\">@AfterReturning</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAfterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"afterReturn: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异常通知：在目标方法()出现异常后运行(<span class=\"doctag\">@AfterThrowing</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing</span>(pointcut = <span class=\"string\">\"aspect()\"</span>, throwing = <span class=\"string\">\"ex\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logException</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"afterThrow: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">        log.info(<span class=\"string\">\"message: &#123;&#125;\"</span>, ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、编写切点方法\"><a href=\"#3、编写切点方法\" class=\"headerlink\" title=\"3、编写切点方法\"></a>3、编写切点方法</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/aop\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">api1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"nowTime\"</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、结果\"><a href=\"#4、结果\" class=\"headerlink\" title=\"4、结果\"></a>4、结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet <span class=\"string\">'dispatcherServlet'</span></span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] o.s.web.servlet.DispatcherServlet        : Initializing Servlet <span class=\"string\">'dispatcherServlet'</span></span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] o.s.web.servlet.DispatcherServlet        : Completed initialization in <span class=\"number\">0</span> ms</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] com.ase.aop.config.LogAspect             : before: execution(Map com.ase.aop.controller.BaseController.api1())</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] com.ase.aop.controller.BaseController    : map = &#123;nowTime=<span class=\"number\">2021</span>-<span class=\"number\">07</span>-<span class=\"number\">24</span> <span class=\"number\">20</span>:<span class=\"number\">37</span>:<span class=\"number\">05</span>&#125;</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] com.ase.aop.config.LogAspect             : afterReturn: execution(Map com.ase.aop.controller.BaseController.api1())</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] com.ase.aop.config.LogAspect             : after: execution(Map com.ase.aop.controller.BaseController.api1())</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">2</span>] com.ase.aop.config.LogAspect             : <span class=\"function\">around <span class=\"title\">execution</span><span class=\"params\">(Map com.ase.aop.controller.BaseController.api1()</span>)\tUse time : 16 ms!</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"注意-4\"><a href=\"#注意-4\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p><strong>JoinPoint 对象封装了 Spring Aop 中切面方法的信息</strong>,在切面方法中添加 JoinPoint 参数,就可以获取到封装了该方法信息的JoinPoint对象.。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Signature getSignature()</td>\n<td>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</td>\n</tr>\n<tr>\n<td>Object[] getArgs()</td>\n<td>获取传入目标方法的参数对象</td>\n</tr>\n<tr>\n<td>Object getTarget()</td>\n<td>获取被代理的对象</td>\n</tr>\n<tr>\n<td>Object getThis()</td>\n<td>获取代理对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用-annotation（注解）\"><a href=\"#使用-annotation（注解）\" class=\"headerlink\" title=\"使用 annotation（注解）\"></a>使用 annotation（注解）</h4><p>可以定义一个注解，注解分为两部分 :</p>\n<p>① 元注解 ; ② public @interface 注解名称 ;</p>\n<h5 id=\"annotation-注解属性\"><a href=\"#annotation-注解属性\" class=\"headerlink\" title=\"annotation 注解属性\"></a>annotation 注解属性</h5><p>注解的本质是接口 , 接口中可以定义 常量 和 方法 ;</p>\n<p>在注解中定义 接口方法 , 就是 注解的属性 ;</p>\n<p>为注解添加属性 : 接口中的方法都是抽象方法 , 其中 public abstract 可以省略 ;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)            <span class=\"comment\">//  注解用于字段上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)    <span class=\"comment\">// 保留到运行时，可通过注解获取</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//public abstract String path();</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">path</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注解属性使用格式 :</p>\n<blockquote>\n<p>@注解名称(属性名称 = 属性值)</p>\n</blockquote>\n<p>举个荔枝：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation</span>(path = <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">MyMethods(String arg)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"annotation-注解属性类型\"><a href=\"#annotation-注解属性类型\" class=\"headerlink\" title=\"annotation 注解属性类型\"></a>annotation 注解属性类型</h5><p>注解属性 ( 接口方法 ) 返回值类型要求 :</p>\n<p>① 基本数据类型 : byte , short , int , long , float , double , char , boolean ;</p>\n<p>② 字符串类型 : String ;</p>\n<p>③ 枚举类型 : enum ;</p>\n<p>④ 注解类型 ;</p>\n<p>⑤ 以上类型的数组形式 ;</p>\n<p><strong>注解属性返回值必须是以上的类型 , 不能设置其它类型返回值 , 否则会报错 ;</strong></p>\n<p>定义 注解属性 时 , 可以 使用 default 关键字 指定属性默认值 </p>\n<p>举个荔枝：注解属性 intValue 值类型为 int 整型 , 默认值 100</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">intValue</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 100</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>如果 注解属性指定了默认值 , 在使用注解时 , 可以选择不为该属性赋值 ( 此时使用默认属性值 ) , 也可以进行赋值 ( 指定一个新的属性值 ) ;</p>\n<p>如果 注解属性没有指定默认值 , 则使用注解 时 , 必须为其指定一个默认值 , 否则编译时报错 ;</p>\n<p>如果 注解属性名称是 value , 并且 注解中只有 1 个属性 , 那么在使用注解为注解属性赋值时 , 可以省略注解名称 , 直接传入注解属性值 ;</p>\n<h5 id=\"annotation-反射获取注解\"><a href=\"#annotation-反射获取注解\" class=\"headerlink\" title=\"annotation 反射获取注解\"></a>annotation 反射获取注解</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"Annotation 自定义注解测试\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAnnotationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用我们的自定义注解</span></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span>(path = <span class=\"string\">\"Annotation-Aop\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String path;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"自定义注解\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myAnnotationTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取类模板</span></span><br><span class=\"line\">        Class c = MyAnnotationTest<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取所有字段</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : c.getDeclaredFields()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断这个字段是否有MyField注解</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.isAnnotationPresent(MyAnnotation<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                MyAnnotation annotation = field.getAnnotation(MyAnnotation<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                log.info(<span class=\"string\">\"字段:[\"</span> + field.getName() + <span class=\"string\">\"], 描述:[\"</span> + annotation.path() + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结果</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[main] INFO com.ase.aop.annotation.MyAnnotationTest - 字段:[path], 描述:[Annotation-Aop]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Log-日志实践\"><a href=\"#Log-日志实践\" class=\"headerlink\" title=\"Log 日志实践\"></a>Log 日志实践</h4><h5 id=\"1、引入-Aop-的依赖-1\"><a href=\"#1、引入-Aop-的依赖-1\" class=\"headerlink\" title=\"1、引入 Aop 的依赖\"></a>1、引入 Aop 的依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、自定义注解\"><a href=\"#2、自定义注解\" class=\"headerlink\" title=\"2、自定义注解\"></a>2、自定义注解</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)            <span class=\"comment\">//  注解用于字段上</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)    <span class=\"comment\">// 保留到运行时，可通过注解获取</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyLog &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、编写-Aop-切面类\"><a href=\"#3、编写-Aop-切面类\" class=\"headerlink\" title=\"3、编写 Aop 切面类\"></a>3、编写 Aop 切面类</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></span><br><span class=\"line\"><span class=\"comment\">     * 切点的集合，这个表达式所描述的是一个虚拟面（规则）</span></span><br><span class=\"line\"><span class=\"comment\">     * 就是为了Annotation扫描时能够拿到注解中的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.ase.aop.annotation.MyLog)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置环绕通知,使用在方法aspect()上注册的切入点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">// 获取方法名称</span></span><br><span class=\"line\">        String methodName = joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">// 获取入参</span></span><br><span class=\"line\">        Object[] param = joinPoint.getArgs();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object o : param)&#123;</span><br><span class=\"line\">            sb.append(o + <span class=\"string\">\"; \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"进入[\"</span> + methodName + <span class=\"string\">\"]方法,参数为:\"</span> + sb.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 继续执行方法</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ((ProceedingJoinPoint) joinPoint).proceed();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">            log.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">            log.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + throwable.getMessage());</span><br><span class=\"line\">            throwable.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(methodName , <span class=\"string\">\"&#123;&#125; 方法执行结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 前置通知: 在目标方法(div)运行之前运行 (<span class=\"doctag\">@Before</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logStart</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"before: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 后置通知：在目标方法(div)运行结束之后运行,无论正常或异常结束 (<span class=\"doctag\">@After</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAfter</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"after: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回通知：在目标方法(div)正常返回之后运行 (<span class=\"doctag\">@AfterReturning</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAfterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"afterReturn: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异常通知：在目标方法(div)出现异常后运行(<span class=\"doctag\">@AfterThrowing</span>)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing</span>(pointcut = <span class=\"string\">\"aspect()\"</span>, throwing = <span class=\"string\">\"ex\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logException</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"afterThrow: &#123;&#125;\"</span>, joinPoint);</span><br><span class=\"line\">        log.info(<span class=\"string\">\"message: &#123;&#125;\"</span>, ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、编写切点方法\"><a href=\"#4、编写切点方法\" class=\"headerlink\" title=\"4、编写切点方法\"></a>4、编写切点方法</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/aop\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">aop1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"nowTime\"</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)));</span><br><span class=\"line\">        log.info(<span class=\"string\">\"map = \"</span> + map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyLog</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/aop2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">aop2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"nowTime\"</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)));</span><br><span class=\"line\">        log.info(<span class=\"string\">\"map = \"</span> + map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、结果\"><a href=\"#5、结果\" class=\"headerlink\" title=\"5、结果\"></a>5、结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">进入[aop2]方法,参数为:</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] com.ase.aop.config.LogAspect             : before: execution(Map com.ase.aop.controller.BaseController.aop2())</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] com.ase.aop.controller.BaseController    : map = &#123;nowTime=<span class=\"number\">2021</span>-<span class=\"number\">07</span>-<span class=\"number\">25</span> <span class=\"number\">00</span>:<span class=\"number\">04</span>:<span class=\"number\">02</span>&#125;</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] com.ase.aop.config.LogAspect             : afterReturn: execution(Map com.ase.aop.controller.BaseController.aop2()) </span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] com.ase.aop.config.LogAspect             : after: execution(Map com.ase.aop.controller.BaseController.aop2())</span><br><span class=\"line\">[nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">1</span>] com.ase.aop.config.LogAspect             : <span class=\"function\">around <span class=\"title\">execution</span><span class=\"params\">(Map com.ase.aop.controller.BaseController.aop2()</span>)\tUse time : 17 ms!</span></span><br><span class=\"line\"><span class=\"function\">[nio-8080-exec-1] com.ase.aop.config.LogAspect             : aop2方法执行结束</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意-5\"><a href=\"#注意-5\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p><strong>在编写的切点方法中只有标注了自定义的注解 MyLog 的 aop2 切点方法才会被 Aop 切面所处理</strong></p>\n","categories":["框架"],"tags":["Spring"]},{"title":"每日一面--CurrentHashMap","url":"/PaulGeorge123.github.io/2021/07/22/%E9%9D%A2%E8%AF%95--currentHashMap/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下  CurrentHashMap</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_09-35-56.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>使用 HashMap 如何保证线程安全？</font></p>\n<p>答：1、使用锁（Synchronize）</p>\n<p>​        2、使用 CurrentHashMap</p>\n<p><font color=#008000>详细的说一下 CurrentHashMap 吧</font></p>\n<p>好嘞~</p>\n<a id=\"more\"></a>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-10-25.png\" alt=\"\"></p>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><h4 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h4><p>哈希表就是一种以 键-值(key-indexed) 存储数据的结构，我们只要输入待查找的值即key，即可查找到其对应的值。</p>\n<p>哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。</p>\n<h4 id=\"2-链式哈希表\"><a href=\"#2-链式哈希表\" class=\"headerlink\" title=\"2.链式哈希表\"></a>2.链式哈希表</h4><p>链式哈希表从根本上说是由一组链表构成。每个链表都可以看做是一个“桶”，我们将所有的元素通过散列的方式放到具体的不同的桶中。</p>\n<p>插入元素时，首先将其键传入一个哈希函数（该过程称为哈希键），函数通过散列的方式告知元素属于哪个“桶”，然后在相应的链表头插入元素。查找或删除元素时，用同们的方式先找到元素的“桶”，然后遍历相应的链表，直到发现我们想要的元素。因为每个“桶”都是一个链表，所以链式哈希表并不限制包含元素的个数。然而，如果表变得太大，它的性能将会降低。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-21-53.png\" alt=\"\"></p>\n<center>哈希表的链表式结构</center>\n\n<p><strong>3.应用场景</strong></p>\n<p>缓存技术（比如redis、memcached）的核心其实就是在内存中维护一张巨大的哈希表，还有HashMap、CurrentHashMap… … </p>\n<h3 id=\"ConcurrentHashMap与HashMap等的区别\"><a href=\"#ConcurrentHashMap与HashMap等的区别\" class=\"headerlink\" title=\"ConcurrentHashMap与HashMap等的区别\"></a>ConcurrentHashMap与HashMap等的区别</h3><h4 id=\"1-HashMap\"><a href=\"#1-HashMap\" class=\"headerlink\" title=\"1.HashMap\"></a>1.HashMap</h4><p>HashMap 是线程不安全的，在多线程环境下，使用 HasHmap 进行 put 操作会引起死循环，导致 CPU 利用率接近 100%，<strong>所以在并发情况下不能使用 HashMap。</strong></p>\n<h4 id=\"2-HashTable\"><a href=\"#2-HashTable\" class=\"headerlink\" title=\"2.HashTable\"></a>2.HashTable</h4><p>HashTable和HashMap的实现原理几乎一样，差别无非是</p>\n<ul>\n<li><p>HashTable 不允许 key 和 value 为 null</p>\n</li>\n<li><p>HashTable 是线程安全的</p>\n</li>\n</ul>\n<p>但是HashTable线程安全的策略实现代价却太大了，简单粗暴，get/put 所有相关操作都是s ynchronized 的，这相当于<strong>给整个哈希表加了一把大锁。</strong></p>\n<p>多线程访问时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，在竞争激烈的并发场景中性能就会非常差。</p>\n<h4 id=\"3-ConcurrentHashMap\"><a href=\"#3-ConcurrentHashMap\" class=\"headerlink\" title=\"3.ConcurrentHashMap\"></a>3.ConcurrentHashMap</h4><p>ConcurrentHashMap 是为了解决 HashMap 在并发环境下不安全而诞生的。其大量的利用了 volatile，final，CAS 等 lock-free 技术来减少锁竞争对于性能的影响。</p>\n<p><strong>ConcurrentHashMap 避免了对全局加锁改成了局部加锁操作</strong></p>\n<h3 id=\"JDK1-7-版本的-CurrentHashMap-的实现原理\"><a href=\"#JDK1-7-版本的-CurrentHashMap-的实现原理\" class=\"headerlink\" title=\"JDK1.7 版本的 CurrentHashMap 的实现原理\"></a>JDK1.7 版本的 CurrentHashMap 的实现原理</h3><p>在JDK1.7中ConcurrentHashMap采用了<strong>数组+Segment+分段锁</strong>的方式实现。</p>\n<h4 id=\"1-Segment-分段锁\"><a href=\"#1-Segment-分段锁\" class=\"headerlink\" title=\"1.Segment(分段锁)\"></a>1.Segment(分段锁)</h4><p>ConcurrentHashMap 中的<strong>分段锁称为 Segment</strong>，它即类似于 HashMap 的结构，即内部拥有一个 Entry 数组，数组中的每个元素又是一个链表,同时又是一个 ReentrantLock（Segment继承了ReentrantLock）。</p>\n<h4 id=\"2-内部结构\"><a href=\"#2-内部结构\" class=\"headerlink\" title=\"2.内部结构\"></a>2.内部结构</h4><p>ConcurrentHashMap 使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。如下图是ConcurrentHashMap的内部结构图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-50-44.png\" alt=\"\"></p>\n<p>Segment 默认是<strong>16</strong>，按理说最多同时支持<strong>16</strong>个线程并发读写，但是是操作不同的 Segment，初始化时也可以指定 Segment 数量，每一个 Segment 都会有一把锁，保证线程安全。</p>\n<h4 id=\"该结构的优劣势\"><a href=\"#该结构的优劣势\" class=\"headerlink\" title=\"该结构的优劣势\"></a>该结构的优劣势</h4><p><strong>坏处</strong>：是这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长。</p>\n<p><strong>好处</strong>：是写操作的时候可以只对元素所在的 Segment 进行加锁即可，不会影响到其他的 Segment，在最理想的情况下，ConcurrentHashMap 可以最高同时支持 Segment 数量大小的写操作(刚好这些写操作都非常平均地分布在所有的Segment上)。</p>\n<h3 id=\"JDK1-8-版本的-CurrentHashMap-的实现原理\"><a href=\"#JDK1-8-版本的-CurrentHashMap-的实现原理\" class=\"headerlink\" title=\"JDK1.8 版本的 CurrentHashMap 的实现原理\"></a>JDK1.8 版本的 CurrentHashMap 的实现原理</h3><h4 id=\"1-Node\"><a href=\"#1-Node\" class=\"headerlink\" title=\"1.Node\"></a>1.Node</h4><p><strong>Node</strong>：保存 key，value 及 key 的 hash 值的数据结构。其中 value 和 next 都用 volatile 修饰，保证并发的可见性。</p>\n<h4 id=\"2-Table\"><a href=\"#2-Table\" class=\"headerlink\" title=\"2.Table\"></a>2.Table</h4><p><strong>Table</strong>：默认为null，初始化发生在第一次插入操作，默认大小为16的数组，用来存储 Node 节点数据，扩容时大小总是 2 的幂次方。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> V val;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-实现方式\"><a href=\"#2-实现方式\" class=\"headerlink\" title=\"2.实现方式\"></a>2.实现方式</h4><p>JDK1.8 的 currentHashMap参考了 1.8HashMap 的实现方式,采用了<strong>数组+链表+红黑树</strong>的实现方式。其中大量的使用CAS操作。CAS (compare and swap)</p>\n<p>JDK8 中彻底放弃了 Segment 转而采用的是 Node，其设计思想也不再是  JDK1.7 中的分段锁思想。</p>\n<p>红黑树是一种性能非常好的二叉查找树，其查找性能为 <strong>O(logN)</strong>，早期完全采用链表结构时 Map 的查找时间复杂度为 <strong>O(N)</strong>。</p>\n<h4 id=\"3-原理图\"><a href=\"#3-原理图\" class=\"headerlink\" title=\"3.原理图\"></a>3.原理图</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_11-41-51.png\" alt=\"\"></p>\n<center>JDK8 中 currentHashMap 原理图</center>\n\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"版本对比\"><a href=\"#版本对比\" class=\"headerlink\" title=\"版本对比\"></a>版本对比</h4><p><strong>JDK1.7版本</strong>：ReentrantLock + Segment + HashEntry，</p>\n<p><strong>JDK1.8版本</strong>：Synchronized + CAS + Node + 红黑树</p>\n<h4 id=\"原理对比（1-8-于-1-7）\"><a href=\"#原理对比（1-8-于-1-7）\" class=\"headerlink\" title=\"原理对比（1.8 于 1.7）\"></a>原理对比（1.8 于 1.7）</h4><p><strong>1.数据结构：</strong>取消了 Segment 分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。</p>\n<p><strong>2.保证线程安全机制：</strong>JDK1.7 采用 segment 的分段锁机制实现线程安全，其中 segment 继承自 ReentrantLock。JDK1.8 采用 CAS + Synchronized 保证线程安全。</p>\n<p><strong>3.锁的粒度：</strong>原来是对需要进行数据操作的 Segment 加锁，现调整为对每个数组元素加锁（Node）。</p>\n<p><strong>4.链表转化为红黑树：</strong>定位结点的hash算法简化会带来弊端,Hash冲突加剧,因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。</p>\n<p><strong>5.查询时间复杂度：</strong>从原来的遍历链表 O(n)，变成遍历红黑树 O(logN)。</p>\n","categories":["面试篇"],"tags":["进阶","currentHashMap"]},{"title":"每日一面--数据库连接池","url":"/PaulGeorge123.github.io/2021/08/13/%E9%9D%A2%E8%AF%95--%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下数据库连接池</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-35-37.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>平时在使用 SpringBoot 框架结合 MyBatis 的时候有注意到数据库连接池吗？</font></p>\n<p>还真的没有过呀，还不是因为平时做的练习项目都是只注重使用而忽略了其更深层次的原理。</p>\n<p>哎！拖欠的知识终究是要花时间补回来的，顺便回顾一下吧！</p>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"什么是数据库连接池？\"><a href=\"#什么是数据库连接池？\" class=\"headerlink\" title=\"什么是数据库连接池？\"></a>什么是数据库连接池？</h3><p>官方：数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中的连接进行申请，使用，释放。</p>\n<p>个人理解：就像是 Java 中的线程池一样，创建数据库连接是一个很耗时的操作，也容易对数据库造成安全隐患。所以在程序初始化的时候集中创建数据库连接池，负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p>\n<br/>\n\n\n\n<h3 id=\"为什么要使用连接池？\"><a href=\"#为什么要使用连接池？\" class=\"headerlink\" title=\"为什么要使用连接池？\"></a>为什么要使用连接池？</h3><p> 数据库连接是一种关键的有限的昂贵的资源，在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。</p>\n<p>触类旁通的参照 Java 中的线程池，在一个“池”里放了好多半成品的数据库联接对象，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。</p>\n<p>好处：</p>\n<p>连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，</p>\n<br/>\n\n<h3 id=\"与传统的连接机制区别\"><a href=\"#与传统的连接机制区别\" class=\"headerlink\" title=\"与传统的连接机制区别\"></a>与传统的连接机制区别</h3><h4 id=\"不使用连接池流程\"><a href=\"#不使用连接池流程\" class=\"headerlink\" title=\"不使用连接池流程\"></a>不使用连接池流程</h4><p><strong>举个荔枝：</strong>执行一个 SQL 命令，如果不使用连接池，需要经过哪些流程【MySQL 为例】</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-14_21-19-12.png\" alt=\"\"></p>\n<p><strong>不使用数据库连接池的步骤：</strong></p>\n<ol>\n<li>TCP 建立连接的三次握手</li>\n<li>MySQL 认证的三次握手</li>\n<li>真正的 SQ L执行</li>\n<li>MySQL 的关闭</li>\n<li>TCP 的四次握手关闭</li>\n</ol>\n<p><strong>优点：实现简单</strong></p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>网络 IO 较多</li>\n<li>数据库的负载较高</li>\n<li>响应时间较长及 QPS 较低</li>\n<li>应用频繁的创建连接和关闭连接，导致临时对象较多，GC 频繁</li>\n<li>在关闭连接后，会出现大量 TIME_WAIT 的TCP 状态（在2个MSL之后关闭）</li>\n</ol>\n<h4 id=\"使用连接池流程\"><a href=\"#使用连接池流程\" class=\"headerlink\" title=\"使用连接池流程\"></a>使用连接池流程</h4><p><strong>举个荔枝：</strong>执行一个 SQL 命令，如果使用连接池，只需要经过哪些流程【MySQL 为例】</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-14_21-28-29.png\" alt=\"\"></p>\n<p><strong>使用数据库连接池的步骤：</strong></p>\n<ol>\n<li><p>第一次访问的时候，需要建立连接</p>\n</li>\n<li><p>之后的访问，均会<strong>复用</strong>之前创建的连接，直接执行 SQL 语句。</p>\n</li>\n</ol>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>较少了网络开销</p>\n</li>\n<li><p>系统的性能会有一个实质的提升</p>\n</li>\n<li><p>没了麻烦的 TIME_WAIT 状态</p>\n</li>\n</ol>\n<p><strong>连接池解决现状问题的原理</strong></p>\n<table>\n<thead>\n<tr>\n<th>Connection连接对象</th>\n<th>操作特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建时</td>\n<td>连接对象不再由自己创建，而是系统启动的时候已经创建一定数量的连接， 并且放在连接池中</td>\n</tr>\n<tr>\n<td>使用时</td>\n<td>直接从连接池中去获取一个已经创建好的连接对象即可</td>\n</tr>\n<tr>\n<td>关闭时</td>\n<td>不是真的关闭连接对象，而是将连接对象再放回到连接池中，供下一个用户使用</td>\n</tr>\n</tbody></table>\n<br/>\n\n\n\n<h3 id=\"数据库连接池的工作原理\"><a href=\"#数据库连接池的工作原理\" class=\"headerlink\" title=\"数据库连接池的工作原理\"></a>数据库连接池的工作原理</h3><h4 id=\"三部分组成\"><a href=\"#三部分组成\" class=\"headerlink\" title=\"三部分组成\"></a>三部分组成</h4><ol>\n<li>连接池的建立</li>\n<li>连接池中连接的使用管理</li>\n<li>连接池的关闭</li>\n</ol>\n<p><strong>举个荔枝：</strong>使用连接池【MySQL 为例】</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-32-29.png\" style=\"zoom:90%;\" />\n\n\n\n<ol>\n<li>系统在启动时初始化连接池；</li>\n<li>向连接池请求可用的数据库连接；</li>\n<li>如果没有获取到可用的数据库连接，并且连接池中连接的数量小于最大连接数，则按照规定的步长给连接池中添加连接，然后再获取，如果连接池中的数量已经到了最大连接数还没有获取到可用的连接，则等待其他请求释放了连接后再获取；</li>\n<li>使用获取到的数据库连接请求数据库；</li>\n<li>将数据库连接放回连接池，供其他连接使用；</li>\n</ol>\n<h4 id=\"连接池主要参数\"><a href=\"#连接池主要参数\" class=\"headerlink\" title=\"连接池主要参数\"></a>连接池主要参数</h4><p><strong>使用连接池时，要配置一下参数</strong></p>\n<ol>\n<li>最小连接数【是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费】</li>\n<li>最大连接数【是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作】</li>\n<li>最大空闲时间【如果一个连接对象长时间没有人使用，设置多久回收这个对象，默认是不回收】</li>\n<li>获取连接超时时间【如果连接池中没有连接对象，设置用户等待的最长时间是多久，单位是毫秒。<br>如果超过这个时间就抛出异常】</li>\n<li>超时重试连接次数</li>\n</ol>\n<h4 id=\"连接池需要注意的点\"><a href=\"#连接池需要注意的点\" class=\"headerlink\" title=\"连接池需要注意的点\"></a>连接池需要注意的点</h4><ul>\n<li>并发问题</li>\n<li>事务处理</li>\n<li>连接池的分配与释放</li>\n<li>连接池的配置与维护</li>\n</ul>\n<h4 id=\"数据库对比\"><a href=\"#数据库对比\" class=\"headerlink\" title=\"数据库对比\"></a>数据库对比</h4><p><strong>第一、二代连接池</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>数据库连接池</strong></th>\n<th><strong>最新版本</strong></th>\n<th><strong>发布时间</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C3P0</td>\n<td>c3p0-0.9.5.2</td>\n<td>on 9 Dec 2015</td>\n</tr>\n<tr>\n<td>DBCP</td>\n<td>2.2.0</td>\n<td>27 December 2017</td>\n</tr>\n<tr>\n<td><strong>Druid</strong></td>\n<td>0.11.0</td>\n<td>Dec 4 2017</td>\n</tr>\n<tr>\n<td><strong>HikariCP</strong></td>\n<td>2.7.6</td>\n<td>2018-01-14</td>\n</tr>\n</tbody></table>\n<br/>\n\n\n\n<h3 id=\"Druid连接池\"><a href=\"#Druid连接池\" class=\"headerlink\" title=\"Druid连接池\"></a>Druid连接池</h3><h4 id=\"Druid-简介\"><a href=\"#Druid-简介\" class=\"headerlink\" title=\"Druid 简介\"></a>Druid 简介</h4><blockquote>\n<p>Druid是阿里巴巴开发的号称为监控而生的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。如：一年一度的双十一活动，每年春运的抢火车票。</p>\n</blockquote>\n<h4 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h4><ul>\n<li>是一个阿里开源的连接池组件</li>\n<li>加⼊了日志监控，不需要额外的界面开发</li>\n</ul>\n<h4 id=\"Druid-常用的配置参数\"><a href=\"#Druid-常用的配置参数\" class=\"headerlink\" title=\"Druid 常用的配置参数\"></a>Druid 常用的配置参数</h4><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\"><strong>缺省值</strong></th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">url</td>\n<td align=\"center\"></td>\n<td align=\"center\">连接字符串</td>\n</tr>\n<tr>\n<td align=\"center\">username</td>\n<td align=\"center\"></td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">password</td>\n<td align=\"center\"></td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">driverClassName</td>\n<td align=\"center\"></td>\n<td align=\"center\">驱动类名，会自动根据URL识别，这一项可以不配置</td>\n</tr>\n<tr>\n<td align=\"center\">initialSize</td>\n<td align=\"center\">0</td>\n<td align=\"center\">初始连接数</td>\n</tr>\n<tr>\n<td align=\"center\">maxActive</td>\n<td align=\"center\">8</td>\n<td align=\"center\">最大连接池数量</td>\n</tr>\n<tr>\n<td align=\"center\">minIdle</td>\n<td align=\"center\"></td>\n<td align=\"center\">最小连接池数量</td>\n</tr>\n<tr>\n<td align=\"center\">maxWait</td>\n<td align=\"center\"></td>\n<td align=\"center\">最长等待时间，单位毫秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"Druid-连接池运行原理\"><a href=\"#Druid-连接池运行原理\" class=\"headerlink\" title=\"Druid 连接池运行原理\"></a>Druid 连接池运行原理</h4><ol>\n<li><p>连接池初始化的时候按照 initialSize 创建多个连接【默认 0 个】</p>\n</li>\n<li><p>有 DB 操作访问的时候，就从里面取一个 【类似线程池的 task 任务】</p>\n</li>\n<li><p>如果当前正在使用的连接 = maxActive ,就会进入等待，没有到 maxActive 拿一个空闲连接，没有空闲就创建一个新连接，等待超过 maxWati 则会报错【最大连接池数量为阈值来决定是否创建新的连接或者报错】</p>\n</li>\n<li><p>使用完毕还回去等待其它人用，不会物理销毁【持续存在】</p>\n</li>\n<li><p>每一个 connection 在连接池里都有空闲时长的，允许最大空闲时长：minEvictableldleTimeMillis，多久检测一次：timeBetweenEvictionRunsMillis</p>\n</li>\n<li><p>maxActive 如何配置：理论上应该设置成最大并发数 </p>\n</li>\n<li><p>只要连接被前端业务拿到就算不空闲了，这个时候如果说长时间占有连接，连接数是不会崩溃，连接池主动关闭是使用中的连接，属于一个高级功能</p>\n</li>\n</ol>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">removeAbandoned</span>=<span class=\"string\">“true”</span></span><br><span class=\"line\"><span class=\"attr\">removeAbandonedTimeout</span>=<span class=\"string\">“60”</span></span><br><span class=\"line\"><span class=\"attr\">logAbandoned</span>=<span class=\"string\">“true”</span></span><br></pre></td></tr></table></figure>\n<br/>\n\n\n\n<h3 id=\"Druid-连接池-SpringBoot-集成\"><a href=\"#Druid-连接池-SpringBoot-集成\" class=\"headerlink\" title=\"Druid 连接池 SpringBoot 集成\"></a>Druid 连接池 SpringBoot 集成</h3><h4 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.49<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis-plus --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- druid --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis-plus?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class=\"line\">      <span class=\"attr\">db-type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">min-idle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">max-active:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">max-wait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">time-between-eviction-runs-millis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">min-evictable-idle-time-millis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">validation-query:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">      <span class=\"attr\">test-while-idle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-borrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-return:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"comment\"># 打开PSCache</span></span><br><span class=\"line\">      <span class=\"attr\">pool-prepared-statements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class=\"line\">      <span class=\"comment\">#如果运行时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class=\"line\">      <span class=\"comment\">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span> <span class=\"string\">stat,wall,log4j,config</span></span><br><span class=\"line\">      <span class=\"comment\">#指定每个连接上PSCache的大小</span></span><br><span class=\"line\">      <span class=\"attr\">max-pool-prepared-statement-per-connection-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"comment\">#合并多个DruidDataSource的监控数据</span></span><br><span class=\"line\">      <span class=\"attr\">use-global-data-source-stat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"comment\">#通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class=\"line\">      <span class=\"attr\">connection-properties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"编写配置类\"><a href=\"#编写配置类\" class=\"headerlink\" title=\"编写配置类\"></a>编写配置类</h4><p><strong>Druid数据源监控</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//因为Springboot内置了servlet容器，所以没有web.xml，替代方法就是将ServletRegistrationBean注册进去</span></span><br><span class=\"line\">    <span class=\"comment\">//加入后台监控</span></span><br><span class=\"line\">    <span class=\"comment\">//这里其实就相当于servlet的web.xml</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"keyword\">new</span> ServletRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">\"/druid/*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//后台需要有人登录，进行配置</span></span><br><span class=\"line\">        <span class=\"comment\">//bean.addUrlMappings(); 这个可以添加映射，我们在构造里已经写了</span></span><br><span class=\"line\">        <span class=\"comment\">//设置一些初始化参数</span></span><br><span class=\"line\">        Map&lt;String,String&gt; initParas = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        initParas.put(<span class=\"string\">\"loginUsername\"</span>,<span class=\"string\">\"admin\"</span>);<span class=\"comment\">//它这个账户密码是固定的</span></span><br><span class=\"line\">        initParas.put(<span class=\"string\">\"loginPassword\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//允许谁能防伪</span></span><br><span class=\"line\">        initParas.put(<span class=\"string\">\"allow\"</span>,<span class=\"string\">\"\"</span>);<span class=\"comment\">//这个值为空或没有就允许所有人访问，ip白名单</span></span><br><span class=\"line\">        <span class=\"comment\">//initParas.put(\"allow\",\"localhost\");//只允许本机访问，多个ip用逗号,隔开</span></span><br><span class=\"line\">        <span class=\"comment\">//initParas.put(\"deny\",\"\");//ip黑名单，拒绝谁访问 deny和allow同时存在优先deny</span></span><br><span class=\"line\">        initParas.put(<span class=\"string\">\"resetEnable\"</span>,<span class=\"string\">\"false\"</span>);<span class=\"comment\">//禁用HTML页面的Reset按钮</span></span><br><span class=\"line\">        bean.setInitParameters(initParas);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//再配置一个过滤器，Servlet按上面的方式注册Filter也只能这样</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        <span class=\"comment\">//可以设置也可以获取,设置一个阿里巴巴的过滤器</span></span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//可以过滤和排除哪些东西</span></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//把不需要监控的过滤掉,这些不进行统计</span></span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"exclusions\"</span>,<span class=\"string\">\"*.js,*.css,/druid/*\"</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><p><strong>访问 URL：<a href=\"http://localhost:8080/druid/login.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/druid/login.html</a></strong></p>\n<p>就会到Druid的监控登录界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_03-46-55.png\" alt=\"\"></p>\n<p>输入我们配置的登录用户名和密码进行登录即可访问</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_03-47-26.png\" alt=\"\"></p>\n<h4 id=\"PSCache\"><a href=\"#PSCache\" class=\"headerlink\" title=\"PSCache\"></a>PSCache</h4><ul>\n<li>PreparedStatement Cache 【准备语句缓存】</li>\n<li>就要从 MySQL 的 SQL 执⾏行行过程来讲</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-01-13.png\" style=\"zoom: 90%;\" />\n\n<p><strong>名词解释</strong></p>\n<ol>\n<li><p>连接器【进⾏行行数据库连接，⽤用户名密码验证】</p>\n</li>\n<li><p>查询缓存【key-value， key 是 SQL， value 就是结果集】</p>\n</li>\n</ol>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">testOnBorrow</span>: <span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">testOnReturn</span>: <span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">poolPreparedStatements</span>: <span class=\"string\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">query_cache_type</span> : <span class=\"string\">DEMAND //默认的SQL都不不使⽤用查询缓存</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> <span class=\"string\">select SQL_CACHE * from student where id=1; //声明使⽤用</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>分析器</li>\n</ol>\n<ul>\n<li>词法分析【SQL的关键词进⾏行行识别】</li>\n<li>语法分析【对语法进⾏行行分析 “use near”】</li>\n</ul>\n<ol start=\"4\">\n<li><p>优化器器【决定我们SQL使⽤用那个⼈人索引】</p>\n</li>\n<li><p>执⾏器【会判断你是否对这个表有查询/更更新权限】</p>\n</li>\n<li><p>存储引擎【获取数据的具体⽂文件地址】</p>\n</li>\n</ol>\n","categories":["面试篇"],"tags":["进阶","druid"]},{"title":"每日一面--Thread Pool","url":"/PaulGeorge123.github.io/2021/07/27/%E9%9D%A2%E8%AF%95--%E7%BA%BF%E7%A8%8B%E6%B1%A0/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Thread Pool</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_00-48-33.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>什么是线程池？</font></p>\n<p>线程池是用来放置线程的池子。嗯，大概是这么回事吧！</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"关于线程池\"><a href=\"#关于线程池\" class=\"headerlink\" title=\"关于线程池\"></a>关于线程池</h4><p>线程池（ThreadPool）是一种基于池化思想管理和使用线程的机制。它是将多个线程预先存储在一个“池子”内，当有任务出现时可以避免重新创建和销毁线程所带来性能开销，只需要从“池子”内取出相应的线程执行对应的任务即可。</p>\n<p><strong>里巴巴在其《Java开发手册》中也强制规定：线程资源必须通过线程池提供，不允许在应用中自行显式创建线程</strong></p>\n<h4 id=\"线程池的好处\"><a href=\"#线程池的好处\" class=\"headerlink\" title=\"线程池的好处\"></a>线程池的好处</h4><ol>\n<li><p>降低资源消耗【通过重复利用已创建的线程去降低线程的创建和销毁】</p>\n</li>\n<li><p>提高响应速度【当任务达到时，任务可以不需要等到线程创建就能立即执行，重复利用线程】</p>\n</li>\n</ol>\n<h4 id=\"线程池的作用\"><a href=\"#线程池的作用\" class=\"headerlink\" title=\"线程池的作用\"></a>线程池的作用</h4><ul>\n<li>线程池是为突然大量爆发的线程设计的，通过有限的几个固定线程为大量的操作服务，减少了创建和销毁线程所需的时间，从而提高效率。</li>\n<li>如果一个线程的时间非常长，就没必要使用线程池了，况且我们还不能控制线程池中线程的开始、挂起、和中止。</li>\n</ul>\n<h4 id=\"线程池的使用\"><a href=\"#线程池的使用\" class=\"headerlink\" title=\"线程池的使用\"></a>线程池的使用</h4><p>线程池的创建方法总共有 7 种，但总体来说可分为 2 类：</p>\n<ul>\n<li>一类是通过 <code>ThreadPoolExecutor</code> 创建的线程池；</li>\n<li>另一个类是通过 <code>Executors</code> 创建的线程池。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_01-02-50.png\" alt=\"\"></p>\n<p>线程池的创建方式总共包含以下 7 种（其中 6 种是通过 <code>Executors</code> 创建的，1 种是通过 <code>ThreadPoolExecutor</code> 创建的）：</p>\n<ol>\n<li><code>Executors.newFixedThreadPool</code>：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待；</li>\n<li><code>Executors.newCachedThreadPool</code>：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；</li>\n<li><code>Executors.newSingleThreadExecutor</code>：创建单个线程数的线程池，它可以保证先进先出的执行顺序；</li>\n<li><code>Executors.newScheduledThreadPool</code>：创建一个可以执行延迟任务的线程池；</li>\n<li><code>Executors.newSingleThreadScheduledExecutor</code>：创建一个单线程的可以执行延迟任务的线程池；</li>\n<li><code>Executors.newWorkStealingPool</code>：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</li>\n<li><strong><code>ThreadPoolExecutor</code>：最原始的创建线程池的方式，它包含了 7 个参数可供设置，重点介绍</strong>。</li>\n</ol>\n<h4 id=\"线程池内部原理\"><a href=\"#线程池内部原理\" class=\"headerlink\" title=\"线程池内部原理\"></a>线程池内部原理</h4><p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_01-40-35.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"线程池工作流程\"><a href=\"#线程池工作流程\" class=\"headerlink\" title=\"线程池工作流程\"></a>线程池工作流程</h4><p><strong>1、当execute方法提交一个任务时，如果线程池中线程数小于corePoolSize,那么不管线程池中是否有空闲的线程，都会创建一个新的线程来执行任务。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-03-32.png\" alt=\"\"></p>\n<p><strong>2、当execute方法提交一个任务时，线程池中的线程数已经达到了corePoolSize,且此时没有空闲的线程，那么则会将任务存储到workQueue中。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-19-18.png\" alt=\"\"></p>\n<p><strong>3、如果execute提交任务时线程池中的线程数已经到达了corePoolSize,并且workQueue已满，那么则会创建新的线程来执行任务，但总线程数应该小于maximumPoolSize。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-21-20.png\" alt=\"\"></p>\n<p><strong>4、如果线程池中的线程执行完了当前的任务，则会尝试从workQueue中取出第一个任务来执行。如果workQueue为空则会阻塞线程。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-23-56.png\" alt=\"\"></p>\n<p><strong>5、如果execute提交任务时，线程池中的线程数达到了maximumPoolSize，且workQueue已满，此时会执行拒绝策略来拒绝接受任务。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-30-14.png\" alt=\"\"></p>\n<p><strong>6、如果线程池中的线程数超过了corePoolSize，那么空闲时间超过keepAliveTime的线程会被销毁，但程池中线程个数会保持为corePoolSize。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-41-49.png\" alt=\"\"></p>\n<p><strong>7、如果线程池存在空闲的线程，并且设置了allowCoreThreadTimeOut为true。那么空闲时间超过keepAliveTime的线程都会被销毁。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-41-33.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"线程池七个参数\"><a href=\"#线程池七个参数\" class=\"headerlink\" title=\"线程池七个参数\"></a>线程池七个参数</h4><p><strong>分别为：</strong></p>\n<ol>\n<li><p><strong>corePoolSize【核心线程数】</strong></p>\n<p>线程池维护的最小线程数量，核心线程创建后不会被回收。</p>\n</li>\n<li><p><strong>maximumPoolSize【最大线程数】</strong></p>\n<p>线程池允许创建的最大线程数量。</p>\n</li>\n<li><p><strong>keepAliveTime【空闲线程存活时间】</strong></p>\n<p>当一个可被回收的线程的空闲时间大于keepAliveTime，就会被回收。</p>\n<p>可被回收的线程：</p>\n<ol>\n<li>设置 allowCoreThreadTimeout=true 的核心线程。</li>\n<li>大于核心线程数的线程（非核心线程）。</li>\n</ol>\n</li>\n<li><p><strong>unit【时间单位】</strong></p>\n<p>keepAliveTime的时间单位，常用【 TimeUnit.MILLISECONDS  毫秒 】</p>\n</li>\n<li><p><strong>workQueue【工作队列】</strong></p>\n<p>存放待执行任务的队列。核心线程数 &lt; 提交的任务数 &lt; 最大线程数</p>\n<p>它仅仅用来存放被execute()方法提交的 Runnable 任务。</p>\n</li>\n<li><p><strong>threadFactory【线程工厂】</strong></p>\n<p>创建线程的工厂，可以设定线程名、线程编号。</p>\n</li>\n<li><p><strong>handler【拒绝策略】</strong></p>\n<p>当线程池线程数已满，并且工作队列达到限制。需要实现 RejectedExecutionHandler 接口。</p>\n</li>\n</ol>\n<h4 id=\"线程池的创建\"><a href=\"#线程池的创建\" class=\"headerlink\" title=\"线程池的创建\"></a>线程池的创建</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">myThreadPoolExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">    ThreadPoolExecutor threadPool = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">        threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(index + <span class=\"string\">\" 被执行,线程名:\"</span> + Thread.currentThread().getName());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["面试篇"],"tags":["进阶","java"]},{"title":"面试题（Java基础）","url":"/PaulGeorge123.github.io/2021/05/29/%E9%9D%A2%E8%AF%95%E9%A2%98ing/","content":"<h3 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h3><p><strong>1. JDK 和 JRE 有什么区别？</strong></p>\n<ul>\n<li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li>\n<li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li>\n</ul>\n<p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p>\n<hr>\n<p><strong>2. == 和 equals 的区别是什么？</strong></p>\n<a id=\"more\"></a>\n\n<p><strong>== 解读</strong></p>\n<p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p>\n<ul>\n<li>基本类型：比较的是值是否相同；</li>\n<li>引用类型：比较的是引用是否相同；</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String x = <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">String y = <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">String z = <span class=\"keyword\">new</span> String(<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\">System.out.println(x==y); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x==z); <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(x.equals(y)); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x.equals(z)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p>\n</blockquote>\n<p><strong>equals 解读</strong></p>\n<p><strong>总结</strong> ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p>\n<hr>\n<p><strong>3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</strong></p>\n<p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p>\n<hr>\n<p><strong>4. final 在 java 中有什么作用？</strong></p>\n<ul>\n<li>final 修饰的类叫最终类，该类不能被继承。</li>\n<li>final 修饰的方法不能被重写。</li>\n<li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li>\n</ul>\n<hr>\n<p><strong>5. java 中的 Math.round(-1.5) 等于多少？</strong></p>\n<p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p>\n<hr>\n<p><strong>6. String 属于基础的数据类型吗？</strong></p>\n<p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p>\n<hr>\n<p><strong>7. java 中操作字符串都有哪些类？它们之间有什么区别？</strong></p>\n<p>操作字符串的类有：String、StringBuffer、StringBuilder。</p>\n<hr>\n<p><strong>8. String str=”i”与 String str=new String(“i”)一样吗？</strong></p>\n<p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p>\n<hr>\n<p><strong>9. 如何将字符串反转？</strong></p>\n<p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringBuffer reverse</span></span><br><span class=\"line\">StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">stringBuffer.append(<span class=\"string\">\"abcdefg\"</span>);</span><br><span class=\"line\">System.out.println(stringBuffer.reverse()); <span class=\"comment\">// gfedcba</span></span><br><span class=\"line\"><span class=\"comment\">// StringBuilder reverse</span></span><br><span class=\"line\">StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">stringBuilder.append(<span class=\"string\">\"abcdefg\"</span>);</span><br><span class=\"line\">System.out.println(stringBuilder.reverse()); <span class=\"comment\">// gfedcba</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>10. String 类的常用方法都有那些？</strong></p>\n<ul>\n<li>indexOf()：返回指定字符的索引。</li>\n<li>charAt()：返回指定索引处的字符。</li>\n<li>replace()：字符串替换。</li>\n<li>trim()：去除字符串两端空白。</li>\n<li>split()：分割字符串，返回一个分割后的字符串数组。</li>\n<li>getBytes()：返回字符串的 byte 类型数组。</li>\n<li>length()：返回字符串长度。</li>\n<li>toLowerCase()：将字符串转成小写字母。</li>\n<li>toUpperCase()：将字符串转成大写字符。</li>\n<li>substring()：截取字符串。</li>\n<li>equals()：字符串比较。</li>\n</ul>\n<hr>\n<p><strong>11. 普通类和抽象类有哪些区别？</strong></p>\n<ul>\n<li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li>\n<li>抽象类不能直接实例化，普通类可以直接实例化。</li>\n</ul>\n<hr>\n<p><strong>12. 抽象类能使用 final 修饰吗？</strong></p>\n<p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p>\n<hr>\n<p><strong>13. 接口和抽象类有什么区别？</strong></p>\n<ul>\n<li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li>\n<li>构造函数：抽象类可以有构造函数；接口不能有。</li>\n<li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li>\n<li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li>\n<li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li>\n</ul>\n<hr>\n<p><strong>14. java 中 IO 流分为几种？</strong></p>\n<p>按功能来分：输入流（input）、输出流（output）。</p>\n<p>按类型来分：字节流和字符流。</p>\n<p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p>\n<hr>\n<p><strong>15. BIO、NIO、AIO 有什么区别？</strong></p>\n<ul>\n<li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li>\n<li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li>\n<li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li>\n</ul>\n","categories":["面试篇"],"tags":["进阶","面试"]},{"title":"每日一面--锁（Lock）","url":"/PaulGeorge123.github.io/2021/06/15/%E9%9D%A2%E8%AF%95--%E9%94%81/","content":"<blockquote>\n<p>每天一篇 Java 小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下 Java 中的锁：</strong></p>\n<hr>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>面试中我们都会遇到一个场景：</p>\n<p><font color=#008000>在某某某并发场景下，我们为了保证线程的安全性，应该如何处理呢？</font></p>\n<p>很多人脑海里最先想到的一定是“加锁”。</p>\n<p>提到锁，大家肯定想到的是 sychronized 关键字，用它可以解决一切并发问题。</p>\n<p><font color=#008000>除了使用 sychronized 关键字，还有其他的解决方案吗？</font></p>\n<p>JDK 1.5 之前，使用 synchronized 关键字，拿到 Java 对象的锁，保护锁定的代码块。JVM 保证同一时刻只有一个线程可以拿到这个 Java 对象的锁，执行对应的代码块。</p>\n<p>JDK 1.5 开始，引入了并发工具包 java.util.concurrent.locks.Lock，让锁的功能更加丰富。</p>\n<p>下面我们来详细的介绍一下 “锁”</p>\n<hr>\n<a id=\"more\"></a>\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_01-13-50.png\"  />\n\n<hr>\n<h3 id=\"Java-的主流锁都有哪些\"><a href=\"#Java-的主流锁都有哪些\" class=\"headerlink\" title=\"Java 的主流锁都有哪些\"></a>Java 的主流锁都有哪些</h3><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/lock.png\" style=\"zoom: 67%;\" />\n\n\n\n<p>悲观锁、乐观锁、自旋锁、偏向锁、轻量级锁、重量级锁、公平锁、非公平锁、可重入锁、非可重入锁。</p>\n<h4 id=\"1、乐观锁-VS-悲观锁\"><a href=\"#1、乐观锁-VS-悲观锁\" class=\"headerlink\" title=\"1、乐观锁 VS 悲观锁\"></a>1、乐观锁 VS 悲观锁</h4><p>顾名思义，两种锁的名字分别体现了看待线程同步的不同角度。</p>\n<p>对于同一个数据的并发操作：</p>\n<ul>\n<li>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。</li>\n<li>乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/optimistic_pessimistic.png\" style=\"zoom:50%;\" />\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li>\n<li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><p>看下乐观锁和悲观锁的调用方式示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// 1、synchronized</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 操作同步资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、ReentrantLock</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要保证多个线程使用的是同一个锁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyPublicResources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//防止因为没有获取到锁的情况，finally中lock.unlock()去释放锁，导致出错！</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 操作同步资源</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要保证多个线程使用的是同一个AtomicInteger</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">optimistic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        atomicInteger.incrementAndGet();  <span class=\"comment\">//执行自增1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。</p>\n<p><font color=#008000>为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？</font></p>\n<p>答：乐观锁的主要实现方式 “CAS” 的技术原理实现。</p>\n<h5 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h5><p>CAS 全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。</p>\n<p>java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p>\n<p>CAS算法涉及到三个操作数：</p>\n<ul>\n<li>需要读写的内存值 V。</li>\n<li>进行比较的值 A。</li>\n<li>要写入的新值 B。</li>\n</ul>\n<p>当且仅当 V 的值等于 A 时，CAS 通过原子方式用新值 B 来更新 V 的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。所以对于乐观锁，“更新”是一个不断重试的操作。</p>\n<p>那么我们进入原子类 AtomicInteger 的源码，看一下 AtomicInteger 的定义：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-15_23-27-12.png\" alt=\"\"></p>\n<p>根据定义我们可以看出各属性的作用：</p>\n<ul>\n<li>unsafe： 获取并操作内存的数据。</li>\n<li>valueOffset： 存储 value 在 AtomicInteger 中的偏移量。</li>\n<li>value： 存储 AtomicInteger 的 int 值，该属性需要借助 volatile 关键字保证其在线程间是可见的。</li>\n</ul>\n<h6 id=\"CAS虽然很高效，但是它也存在三大问题\"><a href=\"#CAS虽然很高效，但是它也存在三大问题\" class=\"headerlink\" title=\"CAS虽然很高效，但是它也存在三大问题\"></a>CAS虽然很高效，但是它也存在三大问题</h6><ol>\n<li>ABA问题</li>\n<li>循环时间长开销大</li>\n<li>只能保证一个共享变量的原子操作</li>\n</ol>\n<h6 id=\"解决ABA问题\"><a href=\"#解决ABA问题\" class=\"headerlink\" title=\"解决ABA问题\"></a>解决ABA问题</h6><p>加标志位，例如搞个⾃增的字段，操作⼀次就⾃增加⼀，或者搞个时间戳，⽐较时间戳的值。</p>\n<p> 举个栗⼦：现在我们去要求操作数据库，根据CAS的原则我们本来只需要查询原本的值就好了，现在我 们⼀同查出他的标志位版本字段vision。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">update table set value &#x3D; newValue where value &#x3D; #&#123;oldValue&#125;</span><br><span class=\"line\"># oldValue就是我们执⾏前查询出来的值</span><br></pre></td></tr></table></figure>\n\n<p>带版本号能防⽌ABA的修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">update table set value &#x3D; newValue ，vision &#x3D; vision + 1 where value &#x3D; #</span><br><span class=\"line\">&#123;oldValue&#125; and vision &#x3D; #&#123;vision&#125;</span><br><span class=\"line\"># 判断原来的值和版本号是否匹配，中间有别的线程修改，值可能相等，但是版本号100%不⼀样</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2、自旋锁-VS-适应性自旋锁\"><a href=\"#2、自旋锁-VS-适应性自旋锁\" class=\"headerlink\" title=\"2、自旋锁 VS 适应性自旋锁\"></a>2、自旋锁 VS 适应性自旋锁</h4><p><font color=#008000>为什么要有自旋锁和适应性自旋锁？</font></p>\n<p>首先，阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>\n<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。</p>\n<h5 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h5><p>我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/spinlocks.png\" style=\"zoom:50%;\" />\n\n\n\n<p>虽然自旋锁有效的避免了因线程之间的切换而产生的开销，但是也并非没有缺点。</p>\n<p>缺点就是它不能代替阻塞。而且它要占用处理器时间。</p>\n<ul>\n<li>如果锁被占用的时间很短，自旋等待的效果就会非常好。</li>\n<li>如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。</li>\n</ul>\n<p>所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次）没有成功获得锁，就应当挂起线程。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_00-09-40.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_00-11-25.png\" alt=\"\"></p>\n<hr>\n<p>自旋锁的实现原理同样也是CAS。</p>\n<p>AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>\n<h5 id=\"适应性自旋锁\"><a href=\"#适应性自旋锁\" class=\"headerlink\" title=\"适应性自旋锁\"></a>适应性自旋锁</h5><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。</p>\n<ul>\n<li><p>如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。</p>\n</li>\n<li><p>如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。、</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"3、无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁\"><a href=\"#3、无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁\" class=\"headerlink\" title=\"3、无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁\"></a>3、无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h4><p>这四种锁是指锁的状态，专门针对synchronized的。</p>\n<p><strong>无锁</strong></p>\n<p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>\n<p><strong>偏向锁</strong></p>\n<p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>\n<p><strong>轻量级锁</strong></p>\n<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>\n<p><strong>重量级锁</strong></p>\n<p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/8afdf6f2.png\" style=\"zoom:50%;\" />\n\n<hr>\n<h4 id=\"4、公平锁-VS-非公平锁\"><a href=\"#4、公平锁-VS-非公平锁\" class=\"headerlink\" title=\"4、公平锁 VS 非公平锁\"></a>4、公平锁 VS 非公平锁</h4><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。</p>\n<ul>\n<li><p>优点：等待锁的线程不会饿死。</p>\n</li>\n<li><p>缺点：整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p>\n</li>\n</ul>\n<p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。</p>\n<ul>\n<li>优点：可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。</li>\n<li>缺点：处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/fair_lock.png\" style=\"zoom:50%;\" />\n\n<hr>\n<p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p>\n<p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/not_fair_lock.png\" style=\"zoom: 67%;\" />\n\n<hr>\n<p>ReentrantLock的源码来看一下公平锁和非公平锁</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_00-32-49.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"5、可重入锁-VS-非可重入锁\"><a href=\"#5、可重入锁-VS-非可重入锁\" class=\"headerlink\" title=\"5、可重入锁 VS 非可重入锁\"></a>5、可重入锁 VS 非可重入锁</h4><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。</p>\n<p>Java中ReentrantLock和synchronized都是可重入锁。</p>\n<p>可重入锁的一个优点是可一定程度避免死锁。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ------------------------- 可重入锁 -------------------------</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法1执行...\"</span>);</span><br><span class=\"line\">        doOthers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doOthers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法2执行...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>类中的两个方法都是被内置锁 synchronized 修饰的，doSomething() 方法中调用 doOthers() 方法。因为内置锁是可重入的，所以同一个线程在调用 doOthers() 时可以直接获得当前对象的锁，进入 doOthers() 进行操作。 </p>\n<p>如果是一个不可重入锁，那么当前线程在调用 doOthers() 之前需要将执行 doSomething() 时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p>\n<p><font color=#008000>为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？</font></p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/reentrant_lock.png\" style=\"zoom:50%;\" />\n\n<p>有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/no_reentrant_lock.png\" style=\"zoom:50%;\" />\n\n<p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p>\n<hr>\n<h4 id=\"6、独享锁-VS-共享锁\"><a href=\"#6、独享锁-VS-共享锁\" class=\"headerlink\" title=\"6、独享锁 VS 共享锁\"></a>6、独享锁 VS 共享锁</h4><p>独享锁（排他锁）和共享锁同样是一种概念。</p>\n<ul>\n<li>独享锁是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。</li>\n<li>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_00-58-22.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_01-00-45.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-06-16_01-02-36.png\" alt=\"\"></p>\n<hr>\n<p>ReentrantReadWriteLock 有两把锁：</p>\n<ul>\n<li><p>ReadLock</p>\n</li>\n<li><p>WriteLock</p>\n</li>\n</ul>\n<p>由词知意，一个读锁一个写锁，合称“读写锁”</p>\n<p>最终发现在 ReentrantLock 虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。</p>\n","categories":["面试篇"],"tags":["进阶","锁"]},{"title":"每日一面--布隆过滤器","url":"/PaulGeorge123.github.io/2021/07/16/%E9%9D%A2%E8%AF%95--%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/","content":"<blockquote>\n<p>每天一篇面试小知识</p>\n</blockquote>\n<p><strong>本篇着重介绍一下布隆过滤器</strong></p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-11-56.png\" alt=\"\"></p>\n<p><strong>写在前面</strong></p>\n<p><font color=#008000>为啥要写一篇关于布隆过滤器的博客？</font></p>\n<p>还不是因为上集说到的 redis 中遇到缓存穿透的其中一个解决方案。</p>\n<p>下面我们来详细的介绍一下 “ Bloom Filter ”</p>\n<a id=\"more\"></a>\n\n<p>百度了一下：</p>\n<p>布隆过滤器本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure）</p>\n<p>特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在” 。</p>\n<p> 相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。 </p>\n<p><font color=#008000>讲述布隆过滤器的原理之前，我们先思考一下，通常你判断某个元素是否存在用的是什么？ </font></p>\n<p>应该蛮多人回答 HashMap 吧，确实可以将值映射到 HashMap 的 Key，然后可以在 O (1) 的时间复杂度内返回结果，效率奇高。</p>\n<p>了解布隆过滤器原理之前，先回顾下 Hash 函数原理。</p>\n<h4 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h4><p>哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-00-27.png\" alt=\"\"></p>\n<p>所有散列函数都有如下基本特性：</p>\n<ul>\n<li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为<strong>单向散列函数</strong>。</li>\n<li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“<strong>散列碰撞</strong>（collision）”。</li>\n</ul>\n<p>但是用 hash 表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。</p>\n<h4 id=\"布隆过滤器数据结构\"><a href=\"#布隆过滤器数据结构\" class=\"headerlink\" title=\"布隆过滤器数据结构\"></a>布隆过滤器数据结构</h4><p>布隆过滤器是一个 bit 向量或者说 bit 数组，长这样：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-12-52.png\" alt=\"\"></p>\n<p>如果我们要映射一个值到布隆过滤器中，我们需要使用<strong>多个不同的哈希函数</strong>生成<strong>多个哈希值，</strong>并对每个生成的哈希值指向的 bit 位置 1，例如针对值 “baidu” 和三个不同的哈希函数分别生成了哈希值 1、4、7（橙色部分）则上图转变为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-13-24.png\" alt=\"\"></p>\n<p>我们现在再存一个值 “tencent”，如果哈希函数返回 3、4、8 （紫色部分）图继续变为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-41-55.png\" alt=\"\"></p>\n<p>值得注意的是，4 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此它被覆盖了（绿色部分）</p>\n<p>现在我们如果想查询 “google” 这个值是否存在，哈希函数返回了 1、5、8 三个值，结果我们发现 5 这个 bit 位上的值为 0，<strong>说明没有任何一个值映射到这个 bit 位上</strong>;</p>\n<p>因此我们可以很确定地说 “google” 这个值不存在。而当我们需要查询 “baidu” 这个值是否存在的话，那么哈希函数必然会返回 1、4、7，然后我们检查发现这三个 bit 位上的值均为 1;</p>\n<p>那么我们可以说 “baidu” <strong>存在了么？答案是不可以，只能是 “baidu” 这个值可能存在。</strong></p>\n<p>这是为什么呢？</p>\n<p>答案跟简单，因为随着增加的值越来越多，被置为 1 的 bit 位也会越来越多，这样某个值 “taobao” 即使没有被存储过，但是万一哈希函数返回的三个 bit 位，例如：1、3、8 都被其他值置位了 1 ，那么程序还是会判断 “taobao” 这个值存在。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-44-00.png\" alt=\"\"></p>\n<h4 id=\"布隆过滤器优点\"><a href=\"#布隆过滤器优点\" class=\"headerlink\" title=\"布隆过滤器优点\"></a>布隆过滤器优点</h4><p>相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。</p>\n<p>布隆过滤器存储空间和插入/查询时间都是常数。</p>\n<p>另外, Hash 函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</p>\n<p>布隆过滤器可以表示全集，其它任何数据结构都不能；</p>\n<p>k 和 m 相同，使用同一组 Hash 函数的两个布隆过滤器的交并差运算可以使用位操作进行。</p>\n<h4 id=\"布隆过滤器缺点\"><a href=\"#布隆过滤器缺点\" class=\"headerlink\" title=\"布隆过滤器缺点\"></a>布隆过滤器缺点</h4><p>布隆过滤器的缺点和优点一样明显。误算率（False Positive）是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。</p>\n<p>另外，一般情况下不能从布隆过滤器中删除元素. 我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。</p>\n<p>然而要保证安全的删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面. 这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。</p>\n<h4 id=\"布隆过滤器的使用场景：\"><a href=\"#布隆过滤器的使用场景：\" class=\"headerlink\" title=\"布隆过滤器的使用场景：\"></a>布隆过滤器的使用场景：</h4><p>在程序的世界中，布隆过滤器是程序员的一把利器，利用它可以快速地解决项目中一些比较棘手的问题。</p>\n<p>如网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题。</p>\n<p>布隆过滤器的典型应用有：</p>\n<ul>\n<li>数据库防止穿库。 Google Bigtable，HBase 和 Cassandra 以及 Postgresql 使用BloomFilter来减少不存在的行或列的磁盘查找。避免代价高昂的磁盘查找会大大提高数据库查询操作的性能。</li>\n<li>业务场景中判断用户是否阅读过某视频或文章，比如抖音或头条，当然会导致一定的误判，但不会让用户看到重复的内容。</li>\n<li>缓存宕机、缓存击穿场景，一般判断用户是否在缓存中，如果在则直接返回结果，不在则查询db，如果来一波冷数据，会导致缓存大量击穿，造成雪崩效应，这时候可以用布隆过滤器当缓存的索引，只有在布隆过滤器中，才去查询缓存，如果没查询到，则穿透到db。如果不在布隆器中，则直接返回。</li>\n<li>WEB拦截器，如果相同请求则拦截，防止重复被攻击。用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。可以提高缓存命中率。Squid 网页代理缓存服务器在 cache digests 中就使用了布隆过滤器。Google Chrome浏览器使用了布隆过滤器加速安全浏览服务</li>\n<li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据。</li>\n<li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间。</li>\n</ul>\n<h4 id=\"布隆过滤器的使用（Java版）\"><a href=\"#布隆过滤器的使用（Java版）\" class=\"headerlink\" title=\"布隆过滤器的使用（Java版）\"></a>布隆过滤器的使用（Java版）</h4><ol>\n<li>需要引入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>28.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建一个布隆过滤器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.BloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Funnels;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.log4j.Log4j2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Log</span>4j2</span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"TestBloomFilterTest测试类\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBloomFilterTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeAll</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"===============测试开始===============\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterAll</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">afterAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"===============测试结束===============\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName</span>(<span class=\"string\">\"布隆过滤器\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BloomFilterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BloomFilter&lt;String&gt; filter = BloomFilter.create(</span><br><span class=\"line\">                Funnels.stringFunnel(Charset.defaultCharset()),</span><br><span class=\"line\">                <span class=\"number\">1000</span>,</span><br><span class=\"line\">                <span class=\"number\">0.001</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        filter.put(<span class=\"string\">\"baidu.com\"</span>);</span><br><span class=\"line\">        filter.put(<span class=\"string\">\"tencent.com\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">\"布隆过滤器中是否含有 baidu.com? &#123;&#125;\"</span>,filter.mightContain(<span class=\"string\">\"baidu.com\"</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">\"布隆过滤器中是否含有 google.com? &#123;&#125;\"</span>,filter.mightContain(<span class=\"string\">\"google.com\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>结果</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-35-30.png\" alt=\"\"></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>本质上布隆过滤器是一种数据结构，特点是高效地插入和查询，可以用来确定<font color=#FF8C00>某个值一定不存在或者可能存在</font></p>\n<p>回到 redis 中遇到缓存穿透的其中一个解决方案，布隆过滤器能够过滤掉一定不存在的值，也就是说，我们可以把数据库中所有的数据存储到布隆过滤器中，一旦有非法的值传进来，就能够轻而易举的判断出该值对于数据库来说是否有效，从而避免无谓的查询。</p>\n","categories":["面试篇"],"tags":["redis"]}]