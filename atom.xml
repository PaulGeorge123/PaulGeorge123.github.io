<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇航员不会飞</title>
  
  <subtitle>里面的人想出去，外面的人想进来</subtitle>
  <link href="https://codeyg.top/atom.xml" rel="self"/>
  
  <link href="https://codeyg.top/"/>
  <updated>2021-08-29T17:58:26.380Z</updated>
  <id>https://codeyg.top/</id>
  
  <author>
    <name>白日梦想家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实践一下--Dubbo</title>
    <link href="https://codeyg.top/2021/08/30/%E9%9D%A2%E8%AF%95--Dubbo/"/>
    <id>https://codeyg.top/2021/08/30/%E9%9D%A2%E8%AF%95--Dubbo/</id>
    <published>2021-08-30T01:00:00.000Z</published>
    <updated>2021-08-29T17:58:26.380Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Dubbo</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-30_01-35-39.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>什么是分布式系统？</font></p><p>我个人觉得就是：分开部署的系统。</p><a id="more"></a><h3 id="为什么要使用分布式系统"><a href="#为什么要使用分布式系统" class="headerlink" title="为什么要使用分布式系统"></a>为什么要使用分布式系统</h3><p>老式系统(单一应用架构)就是把一个系统，统一放到一个服务器当中然后每一个服务器上放一个系统，如果说要更新代码的话，每一个服务器上的系统都要重新去部署十分的麻烦。</p><p>而分布式系统就是将一个完整的系统拆分成多个不同的服务，然后在将每一个服务单独的放到一个服务器当中。</p><h3 id="分布式系统中的相关概念"><a href="#分布式系统中的相关概念" class="headerlink" title="分布式系统中的相关概念"></a>分布式系统中的相关概念</h3><h4 id="衡量网站的性能指标"><a href="#衡量网站的性能指标" class="headerlink" title="衡量网站的性能指标"></a>衡量网站的性能指标</h4><ul><li><p>响应时间：指执行一个请求从开始到最后收到响应数据所花费的总体时间。</p></li><li><p>并发数：指系统同时能处理的请求数量。</p><ul><li>并发连接数：指的是客户端向服务器发起请求，并建立了TCP连接。每秒钟服务器连接的总TCP数量</li><li>请求数：也称为 QPS (Query Per Second) 指每秒多少请求.</li><li>并发用户数：单位时间内有多少用户</li></ul></li><li><p>吞吐量：指单位时间内系统能处理的请求数量。</p><ul><li>QPS：Query Per Second 每秒查询数。 </li><li>TPS：Transactions Per Second 每秒事务数。 </li><li>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</li><li>一个页面的一次访问，只会形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，就会有多个QPS</li></ul></li></ul><center><font color=#FF0000>QPS >= 并发连接数 >= TPS</font></center>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Dubbo&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-30_01-35-39.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;什么是分布式系统？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;我个人觉得就是：分开部署的系统。&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="https://codeyg.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="Dubbo" scheme="https://codeyg.top/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>实践一下--跨域问题</title>
    <link href="https://codeyg.top/2021/08/25/%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B--%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://codeyg.top/2021/08/25/%E5%AE%9E%E8%B7%B5%E4%B8%80%E4%B8%8B--%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-25T01:00:00.000Z</published>
    <updated>2021-08-25T17:34:32.746Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 跨域问题</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-25_23-57-45.png" alt=""></p><p><strong>写在前面</strong></p><p>上文提到，目前项目都朝着前后端分离的方向发展，那前后端之间的数据通信便成为了不可避免的问题，这有 Axios 来帮助我们实现，但是今天要说的前后端之间的跨域问题。</p><a id="more"></a><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题。</p><p>其实产生跨域问题的罪魁祸首是<font color=#FF8C00>浏览器同源策略</font></p><h4 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h4><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个 <font color=#FF8C00>origin</font> 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h4 id="什么是同源？"><a href="#什么是同源？" class="headerlink" title="什么是同源？"></a>什么是同源？</h4><p>如果两个 URL 的 <font color=#FF8C00>protocol</font>、<font color=#FF8C00>port (en-US)</font> (如果有指定的话)和 <font color=#FF8C00>host</font> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p><p><strong>举个荔枝</strong></p><p>与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例：</p><table><thead><tr><th align="left">URL</th><th align="left">结果</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left"><code>http://store.company.com/dir2/other.html</code></td><td align="left"><font color=#008000>同源</font></td><td align="left">只有路径不同</td></tr><tr><td align="left"><code>http://store.company.com/dir/inner/another.html</code></td><td align="left"><font color=#008000>同源</font></td><td align="left">只有路径不同</td></tr><tr><td align="left"><code>https://store.company.com/secure.html</code></td><td align="left"><font color=#FF0000>失败</font></td><td align="left">协议不同</td></tr><tr><td align="left"><code>http://store.company.com:81/dir/etc.html</code></td><td align="left"><font color=#FF0000>失败</font></td><td align="left">端口不同 ( <code>http://</code> 默认端口是80)</td></tr><tr><td align="left"><code>http://news.company.com/dir/other.html</code></td><td align="left"><font color=#FF0000>失败</font></td><td align="left">主机不同（ IP 地址不同）</td></tr></tbody></table><p><strong>举个荔枝</strong></p><p>访问：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> </p><p>由下图可以看出，虽然 get 请求能发出去，有返回的结果，但是结果被浏览器拦截了</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-05-23.png" alt=""></p><hr><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><h4 id="为什么会发生跨域问题"><a href="#为什么会发生跨域问题" class="headerlink" title="为什么会发生跨域问题"></a>为什么会发生跨域问题</h4><p>当<strong>协议、子域名、主域名、端口号</strong>中任意一个不相同时，都算作不同域，不同域之间的网络请求就会触发跨域问题。跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是<font color=#FF0000>结果被浏览器拦截了</font></p><h4 id="解决跨域问题的三种思路"><a href="#解决跨域问题的三种思路" class="headerlink" title="解决跨域问题的三种思路"></a>解决跨域问题的三种思路</h4><p>1、客户端浏览器解除跨域限制（<font color=#FF0000>×</font>）【理论上可以但是不现实】</p><p>2、发送JSONP请求替代XHR请求（<font color=#FF8C00>-</font>）【并不能适用所有的请求方式，不推荐】</p><p>3、修改服务器端（<font color=#008000>√</font>）【包括HTTP服务器和应用服务器，推荐】</p><h4 id="客户端浏览器解除跨域限制"><a href="#客户端浏览器解除跨域限制" class="headerlink" title="客户端浏览器解除跨域限制"></a>客户端浏览器解除跨域限制</h4><p>浏览器会根据同源策略来判断一个请求是不是跨域请求。</p><ol><li><font color=#FF0000>非跨域请求</font>，在请求头中会只包含请求的主机名。【host】</li><li><font color=#008000>跨域请求</font>，在请求头中会既包含要请求的主机名还包括当前的源主机名，如果这两者不一致，那就是跨域请求了。【host、origin】</li></ol><h4 id="浏览器对请求的分类"><a href="#浏览器对请求的分类" class="headerlink" title="浏览器对请求的分类"></a><strong>浏览器对请求的分类</strong></h4><p>在HTTP1.1 协议中的，请求方法分为 GET、POST、PUT、DELETE、HEAD、TRACE、OPTIONS、CONNECT  八种，浏览器根据这些请求方法和请求类型将请求划分为简单请求和非简单请求。</p><ol><li><p><font color=#FF8C00>简单请求</font>：浏览器先发送（执行）请求然后再判断是否跨域。</p><p>请求方法为 GET、POST、HEAD，请求头header中无自定义的请求头信息，请求类型Content-Type 为 text/plain、multipart/form-data、application/x-www-form-urlencoded 的请求都是简单请求。</p></li><li><p><font color=#FF8C00>非简单请求</font>：浏览器先发送预检命令（OPTIONS方法），检查通过后才发送真正的数据请求。【”预检”请求】</p><p>预检命令会发送自定义头为 Access-Control-Request-Headers: content-type （访问控制请求头：内容类型）的请求到服务器，根据响应头的中的 “Access-Control-Allow-Headers”: “Content-Type” 判断服务器是否允许跨域访问。预检命令是可以缓存，服务器端设置 “Access-Control-Max-Age”: “3600”，这样后面发送同样的跨域请求就不需要先发送预检命令了。</p></li></ol><hr><h3 id="前后端分离跨域"><a href="#前后端分离跨域" class="headerlink" title="前后端分离跨域"></a>前后端分离跨域</h3><p><strong>Cross Origin Resource Share (CORS)</strong>【跨域源资源共享】</p><p><strong>请求头主要包括</strong></p><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td><strong>Origin</strong></td><td>Origin头在跨域请求或预先请求中，标明发起跨域请求的源域名。</td></tr><tr><td><strong>Access-Control-Request-Method</strong></td><td>Access-Control-Request-Method头用于表明跨域请求使用的实际HTTP方法</td></tr><tr><td><strong>Access-Control-Request-Headers</strong></td><td>Access-Control-Request-Headers用于在预先请求时，告知服务器要发起的跨域请求中会携带的请求头信息</td></tr><tr><td><strong>with-credentials</strong></td><td><strong>跨域请求携带cookie</strong></td></tr></tbody></table><p><strong>响应头主要包括</strong></p><table><thead><tr><th>响应头</th><th>解释</th></tr></thead><tbody><tr><td><strong>Access-Control-Allow-Origin</strong></td><td>Access-Control-Allow-Origin头中携带了服务器端验证后的允许的跨域请求域名，可以是一个具体的域名或是一个*（表示任意域名）。</td></tr><tr><td><strong>Access-Control-Expose-Headers</strong></td><td>Access-Control-Expose-Headers头用于允许返回给跨域请求的响应头列表，在列表中的响应头的内容，才可以被浏览器访问。</td></tr><tr><td><strong>Access-Control-Max-Age</strong></td><td>Access-Control-Max-Age用于告知浏览器可以将预先检查请求返回结果缓存的时间，在缓存有效期内，浏览器会使用缓存的预先检查结果判断是否发送跨域请求。</td></tr><tr><td><strong>Access-Control-Allow-Methods</strong></td><td>Access-Control-Allow-Methods用于告知浏览器可以在实际发送跨域请求时，可以支持的请求方法，可以是一个具体的方法列表或是一个*（表示任意方法）。</td></tr></tbody></table><hr><h3 id="SpringBoot-解决-CORS"><a href="#SpringBoot-解决-CORS" class="headerlink" title="SpringBoot 解决 CORS"></a>SpringBoot 解决 CORS</h3><h4 id="1、注解-CrossOrigin-（局部跨域）"><a href="#1、注解-CrossOrigin-（局部跨域）" class="headerlink" title="1、注解 @CrossOrigin （局部跨域）"></a>1、注解 @CrossOrigin （局部跨域）</h4><ol><li>在类上使用 @CrossOrigin 注解，表示该类的所有方法允许跨域</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pass"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span>(originPatterns = <span class="string">"*"</span>, methods = &#123;GET, POST, PUT, DELETE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在类上使用 @CrossOrigin 注解，以细粒度的去控制某一请求 API 是否支持跨域</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pass"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//更小的解决跨域 设置只能某些地址访问</span></span><br><span class="line">    <span class="meta">@CrossOrigin</span>(originPatterns = <span class="string">"http://localhost:8080"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、配置-CorsFilter-全局跨域"><a href="#2、配置-CorsFilter-全局跨域" class="headerlink" title="2、配置 CorsFilter (全局跨域)"></a>2、配置 CorsFilter (全局跨域)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebGlobalConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建CorsConfiguration对象后添加配置</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//设置放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//放行哪些请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);     <span class="comment">//get</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);     <span class="comment">//put</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);    <span class="comment">//post</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);  <span class="comment">//delete</span></span><br><span class="line">        <span class="comment">//corsConfig.addAllowedMethod("*");     //放行全部请求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否发送Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource corsConfigurationSource =</span><br><span class="line">                <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="comment">//返回CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、重写-WebMvcConfigurer（全局跨域）"><a href="#3、重写-WebMvcConfigurer（全局跨域）" class="headerlink" title="3、重写 WebMvcConfigurer（全局跨域）"></a>3、重写 WebMvcConfigurer（全局跨域）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写 WebMvcConfigurer下的 addCorsMappings方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加映射路径</span></span><br><span class="line">        registry.addMapping(<span class="string">"/api/pass"</span>)</span><br><span class="line">            <span class="comment">//addMapping后还可以继续配置 </span></span><br><span class="line">        .allowedOrigins(<span class="string">"http://localhost:8080"</span>)</span><br><span class="line">                <span class="comment">//是否发送Cookie</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//设置放行哪些原始域   SpringBoot2.4.4下低版本使用.allowedOrigins("*")    </span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">"*"</span>)</span><br><span class="line">                <span class="comment">//放行哪些请求方式</span></span><br><span class="line">                .allowedMethods(<span class="keyword">new</span> String[]&#123;<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>&#125;)</span><br><span class="line">                <span class="comment">//.allowedMethods("*") //或者放行全部</span></span><br><span class="line">                <span class="comment">//放行哪些原始请求头部信息</span></span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">                <span class="comment">//暴露哪些原始请求头部信息</span></span><br><span class="line">                .exposedHeaders(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、拦截器-Filter-实现"><a href="#4、拦截器-Filter-实现" class="headerlink" title="4、拦截器 Filter 实现"></a>4、拦截器 Filter 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, DELETE, PUT"</span>);</span><br><span class="line">        res.addHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN"</span>);</span><br><span class="line">        <span class="keyword">if</span> (((HttpServletRequest) request).getMethod().equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">"ok"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="拓展一下"><a href="#拓展一下" class="headerlink" title="拓展一下"></a>拓展一下</h3><h4 id="Nginx-反向代理实现跨域"><a href="#Nginx-反向代理实现跨域" class="headerlink" title="Nginx 反向代理实现跨域"></a>Nginx 反向代理实现跨域</h4><p>打开 <code>Nginx所在目录/conf/nginx.conf</code>，将转发请求的配置粘贴到 <code>http { ... }</code> 中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听本地端口 80</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 本地域名</span></span><br><span class="line">        <span class="attribute">server_name</span> my-server.com;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'POST'</span>) &#123;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'GET'</span>) &#123;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">                <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将请求转发到指定的域名</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> https://www.baidu.com/;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释一下</strong></p><p><code>my-server.com</code> 是本地劫持的域名，<code>www.baidu.com</code> 是目标域名，我们请求 <code>my-server.com</code>  的时候，Nginx 就会将请求转发到 <code>www.baidu.com</code> 上。</p><p>访问成功~哈哈</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-19-13.png" alt=""></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-26_01-20-43.png" alt=""></p><p><font color=#008000>年轻的我也能成为改变世界的动力！</font></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 跨域问题&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-25_23-57-45.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上文提到，目前项目都朝着前后端分离的方向发展，那前后端之间的数据通信便成为了不可避免的问题，这有 Axios 来帮助我们实现，但是今天要说的前后端之间的跨域问题。&lt;/p&gt;</summary>
    
    
    
    <category term="实践篇" scheme="https://codeyg.top/categories/%E5%AE%9E%E8%B7%B5%E7%AF%87/"/>
    
    
    <category term="Web" scheme="https://codeyg.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>实用链接</title>
    <link href="https://codeyg.top/2021/08/20/%E5%AE%9E%E7%94%A8%E9%93%BE%E6%8E%A5/"/>
    <id>https://codeyg.top/2021/08/20/%E5%AE%9E%E7%94%A8%E9%93%BE%E6%8E%A5/</id>
    <published>2021-08-20T01:00:00.000Z</published>
    <updated>2021-08-31T00:43:36.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集的各种优质的链接</p></blockquote><hr><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/link.png" style="zoom:67%;" /><p><strong>写在前面</strong></p><p><font color=#008000>本篇博客是用于汇集各种编程相关的优质链接</font></p><a id="more"></a><h3 id="一、使用教程篇"><a href="#一、使用教程篇" class="headerlink" title="一、使用教程篇"></a>一、使用教程篇</h3><p><a href="https://mp.weixin.qq.com/s/KMkVb1Az8LxsfsJpy9EH8g" target="_blank" rel="noopener">1、全网最全的 postman 工具使用教程</a></p><p><a href="https://zszxz.com/category/springboot/article/2" target="_blank" rel="noopener">2、SpringBoot教程</a></p><hr><h3 id="二、算法提高篇"><a href="#二、算法提高篇" class="headerlink" title="二、算法提高篇"></a>二、算法提高篇</h3><p><a href="https://zhuanlan.zhihu.com/p/383733598" target="_blank" rel="noopener">1、LeetCode 最长公共前缀</a></p><p><a href="https://zhuanlan.zhihu.com/p/383416115" target="_blank" rel="noopener">2、LeetCode 罗马数字转整数</a></p><hr><h3 id="三、知识积累篇"><a href="#三、知识积累篇" class="headerlink" title="三、知识积累篇"></a>三、知识积累篇</h3><p><a href="https://mp.weixin.qq.com/s/HQA8Tcg4a1oElvUBSNlN_A" target="_blank" rel="noopener">1、Redis五种数据结构详解</a></p><p><a href="https://pdai.tech/md/outline/x-outline.html#%E5%85%A8%E6%A0%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%80%BB%E8%A7%88" target="_blank" rel="noopener">2、Java 全栈知识体系</a></p><p><a href="https://blog.csdn.net/weixin_42313701/article/details/107729593" target="_blank" rel="noopener">3、Java一些过时方法与替换</a></p><hr><h3 id="四、问题解决篇"><a href="#四、问题解决篇" class="headerlink" title="四、问题解决篇"></a>四、问题解决篇</h3><p><a href="https://www.cnblogs.com/mark5/p/14268122.html" target="_blank" rel="noopener">1、MybatisPlus 主键策略</a></p><p><a href="https://blog.csdn.net/zhangpower1993/article/details/89016503" target="_blank" rel="noopener">2、SpringBoot–WebMvcConfigurer</a></p><p><a href="https://blog.csdn.net/W_Meng_H/article/details/109253400" target="_blank" rel="noopener">3、Java-时间转换工具类</a></p><hr><h3 id="五、体系架构篇"><a href="#五、体系架构篇" class="headerlink" title="五、体系架构篇"></a>五、体系架构篇</h3><p><a href="https://mp.weixin.qq.com/s/bxRUzYyT_vW7-iJUgee58g" target="_blank" rel="noopener">1、淘宝技术架构演进</a></p><hr><h3 id="六、工作总结"><a href="#六、工作总结" class="headerlink" title="六、工作总结"></a>六、工作总结</h3><p><a href="https://codeyg.top/2021/08/30/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/">1、工作常用小技巧</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;收集的各种优质的链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/link.png&quot; style=&quot;zoom:67%;&quot; /&gt;





&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;本篇博客是用于汇集各种编程相关的优质链接&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="实践篇" scheme="https://codeyg.top/categories/%E5%AE%9E%E8%B7%B5%E7%AF%87/"/>
    
    
    <category term="链接" scheme="https://codeyg.top/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>实践一下--JWT</title>
    <link href="https://codeyg.top/2021/08/17/%E9%9D%A2%E8%AF%95--JWT/"/>
    <id>https://codeyg.top/2021/08/17/%E9%9D%A2%E8%AF%95--JWT/</id>
    <published>2021-08-17T13:00:00.000Z</published>
    <updated>2021-08-23T20:41:34.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 JWT</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_01-52-58.png" alt=""></p><p><strong>写在前面</strong></p><p>目前大部分的项目都逐渐从单体架构向着前后端分离的方向发展</p><p>这个时候就涉及到前后端数据之间的交互，传输问题了，<font color=#008000> JWT</font> 闪亮登场！</p><a id="more"></a><h3 id="JWT-是什么？"><a href="#JWT-是什么？" class="headerlink" title="JWT 是什么？"></a>JWT 是什么？</h3><p><strong>基本概念</strong></p><p><code>JWT</code>全称是<code>JSON Web Token</code>，如果从字面上理解感觉是基于<code>JSON</code>格式用于网络传输的令牌。常见的场景如<code>HTTP</code>授权请求头参数和<code>URI</code>查询参数。</p><hr><h3 id="传统-Token-方式和-JWT"><a href="#传统-Token-方式和-JWT" class="headerlink" title="传统 Token 方式和 JWT"></a>传统 Token 方式和 JWT</h3><p><strong>传统 token 方式：</strong></p><p>用户登录成功后，服务端生成一个随机 token 给用户，并且在服务端(数据库或缓存)中保存一份 token，以后用户再来访问时需携带 token，服务端接收到 token 之后，去数据库或缓存中进行校验 token 的是否超时、是否合法。</p><p><strong>jwt 方式：</strong></p><p>用户登录成功后，服务端通过 jwt 生成一个随机 token 给用户（服务端无需保留token），以后用户再来访问时需携带 token，服务端接收到 token之后，通过 jwt 对 token 进行校验是否超时、是否合法。</p><hr><h3 id="JWT-的结构"><a href="#JWT-的结构" class="headerlink" title="JWT 的结构"></a>JWT 的结构</h3><p><strong>简单的举个荔枝</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-16-32.png" alt=""></p><p>在其紧凑形式中，<strong>JSON Web Tokens</strong> 由用点 ( <code>.</code>)分隔的三个部分组成，它们是：</p><ul><li>标题（header）【令牌头部，记录了整个令牌的类型和签名算法】</li><li>有效载荷（payload）【令牌负荷，记录了保存的主体信息，比如你要保存的用户信息就可以放到这里】</li><li>签名（signature）【令牌签名，按照头部固定的签名算法对整个令牌进行签名，该签名的作用是：保证令牌不被伪造和篡改】</li></ul><p>因此，JWT 通常如下所示。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">xxxxx.yyyyy.zzzzz</span>  =<span class="string">======&gt;  标题.有效载荷.签名</span></span><br></pre></td></tr></table></figure><p><strong>1、标题</strong></p><p>标头<em>通常</em>由两部分组成：令牌的类型，即 JWT，以及正在使用的签名算法，例如 HMAC SHA256 或 RSA。</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，这个 JSON 被<strong>Base64Url</strong>编码以形成 JWT 的第一部分。</p><p><strong>2、有效载荷</strong></p><p>令牌的第二部分是负载，其中包含声明。声明是关于实体（通常是用户）和附加数据的声明。共有三种类型的声明：<em>注册声明</em>、<em>公共</em>声明和<em>私人</em>声明。</p><p>一个示例有效载荷可能是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对有效负载进行<strong>Base64Url</strong>编码以形成 JSON Web 令牌的第二部分。</p><p><strong>3、签名</strong></p><p>要创建签名部分，您必须获取编码的标头、编码的有效载荷、秘密、标头中指定的算法，并对其进行签名。</p><p>例如，如果要使用 HMAC SHA256 算法，则签名将通过以下方式创建：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + "." +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>签名用于验证消息在此过程中没有更改，并且在使用私钥签名的令牌的情况下，它还可以验证 JWT 的发送者是它所说的那个人。</p><p><strong>4、放在一起</strong></p><p>输出是三个由点分隔的 Base64-URL 字符串，可以在 HTML 和 HTTP 环境中轻松传递，同时与基于 XML 的标准（如 SAML）相比更加紧凑。</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-35-37.png" alt=""></p><hr><h3 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"姓名"</span>: <span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">"角色"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">    <span class="attr">"到期时间"</span>: <span class="string">"2018年7月1日0点0分"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。</p><p><strong>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</strong></p><p><strong>区别</strong> </p><ol><li>session 存储在服务端占用服务器资源，而 JWT 存储在客户端</li><li>session 存储在 Cookie 中，存在伪造跨站请求伪造攻击的风险 </li><li>session 只存在一台服务器上，那么下次请求就必须请求这台服务器，不利于分布式应用 </li><li>存储在客户端的 JWT 比存储在服务端的 session 更具有扩展性</li></ol><hr><h3 id="JWT的认证流程图"><a href="#JWT的认证流程图" class="headerlink" title="JWT的认证流程图"></a>JWT的认证流程图</h3><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_02-16-33.png" alt=""></p><p><strong>流程说明：</strong></p><ol><li>浏览器发起请求登陆，携带用户名和密码；</li><li>服务端验证身份，根据算法，将用户标识符打包生成 token;</li><li>服务器返回JWT信息给浏览器，JWT不包含敏感信息；</li><li>浏览器发起请求获取用户资料，把刚刚拿到的 token一起发送给服务器；</li><li>服务器发现数据中有 token，验明正身；</li><li>服务器返回该用户的用户资料；</li></ol><hr><h3 id="JSON-网络令牌如何工作"><a href="#JSON-网络令牌如何工作" class="headerlink" title="JSON 网络令牌如何工作"></a>JSON 网络令牌如何工作</h3><p>每当用户想要访问受保护的路由或资源时，用户代理应该发送 JWT，通常在使用<strong>Bearer</strong>模式的<strong>Authorization</strong>标头中。标题的内容应如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Authorization</span>: <span class="string">Bearer &lt;token&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Authorization</code>标头中的有效 JWT ，如果令牌在<code>Authorization</code>标头中发送，跨源资源共享 (CORS) 不会成为问题，因为它不使用 cookie。</p></blockquote><h3 id="JWT-的应用场景"><a href="#JWT-的应用场景" class="headerlink" title="JWT 的应用场景"></a>JWT 的应用场景</h3><ul><li><p><strong>Authorization (授权)</strong> </p><p> 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的 JWT 的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p></li><li><p><strong>Information Exchange (信息交换)</strong> </p><p>对于安全的在各方之间传输信息而言，JSON Web Tokens 无疑是一种很好的方式。因为 JWT 可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p></li></ul><hr><h3 id="JWT-测试"><a href="#JWT-测试" class="headerlink" title="JWT 测试"></a>JWT 测试</h3><h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、生成token"><a href="#2、生成token" class="headerlink" title="2、生成token"></a>2、生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   常见的异常信息</span></span><br><span class="line"><span class="comment"> * - SignatureVerificationException   签名不一致异常</span></span><br><span class="line"><span class="comment"> * - TokenExpiredException            令牌过期异常</span></span><br><span class="line"><span class="comment"> * - AlgorirhmMismatchExceotion       算法不匹配异常</span></span><br><span class="line"><span class="comment"> * - InvalidClaimException            失效的payload异常</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JWTTest 接口测试"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"生成 token"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creatToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"typ"</span>, <span class="string">"JWT"</span>);</span><br><span class="line">        map.put(<span class="string">"alg"</span>, <span class="string">"HS256"</span>);</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 20秒后令牌token失效</span></span><br><span class="line">        instance.add(Calendar.SECOND, <span class="number">5</span> * <span class="number">60</span>);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withHeader(map) <span class="comment">// header可以不写，因为默认值就是它</span></span><br><span class="line">                .withClaim(<span class="string">"userId"</span>, <span class="number">21</span>)  <span class="comment">//payload</span></span><br><span class="line">                .withClaim(<span class="string">"username"</span>, <span class="string">"tom"</span>)</span><br><span class="line">                .withExpiresAt(instance.getTime()) <span class="comment">// 指定令牌的过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(<span class="string">"jsonwebtoken"</span>));<span class="comment">//签名</span></span><br><span class="line"></span><br><span class="line">        log.info(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成结果</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjEyMzQ1NiIsIm5hbWUiOiJqYW1lcyIsImV4cCI6MTYzMDM1NDU4Mn0.ubecr4PGlovbRggmfZBgoOnThtsSyykLyrcMiAmOaqY</span><br></pre></td></tr></table></figure><h4 id="3、根据令牌和签名解析数据"><a href="#3、根据令牌和签名解析数据" class="headerlink" title="3、根据令牌和签名解析数据"></a>3、根据令牌和签名解析数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"JWTTest 接口测试"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"根据令牌和签名解析数据"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decryptionToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过签名生成验证对象</span></span><br><span class="line">        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(<span class="string">"jsonwebtoken"</span>)).build();</span><br><span class="line">        String token = <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Mjk3NDEwNjQsInVzZXJJZCI6MjEsInVzZXJuYW1lIjoidG9tIn0._spam3Ix5AvASN857eUOSFzDnVmZwk754lCbv8p4VfE"</span>;</span><br><span class="line">        DecodedJWT verify = jwtVerifier.verify(token);</span><br><span class="line">        log.info(verify.getClaim(<span class="string">"userId"</span>));</span><br><span class="line">        log.info(verify.getClaim(<span class="string">"username"</span>));</span><br><span class="line">        log.info(<span class="string">"令牌过期时间："</span> + verify.getExpiresAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成结果</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[           main] c.a.m.t.t.JWTTest                        : "james"</span><br><span class="line">[           main] c.a.m.t.t.JWTTest                        : "123456"</span><br><span class="line">[           main] c.a.m.t.t.JWTTest                        : 令牌过期时间：Tue Aug 31 04:16:22 CST 2021</span><br></pre></td></tr></table></figure><h4 id="4、常见的异常信息"><a href="#4、常见的异常信息" class="headerlink" title="4、常见的异常信息"></a>4、常见的异常信息</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- SignatureVerificationException   签名不一致异常</span><br><span class="line">- TokenExpiredException            令牌过期异常</span><br><span class="line">- AlgorirhmMismatchExceotion       算法不匹配异常</span><br><span class="line">- InvalidClaimException            失效的payload异常</span><br></pre></td></tr></table></figure><hr><h3 id="JWT-SpringBoot"><a href="#JWT-SpringBoot" class="headerlink" title="JWT + SpringBoot"></a>JWT + SpringBoot</h3><h4 id="1、导入依赖-1"><a href="#1、导入依赖-1" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-boot --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span><span class="comment">&lt;!-- 去掉springboot默认配置 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 引入log4j2依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--MyBatis-Plus代码生成器需要的依赖，开始--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;version&gt;3.2.0&lt;/version&gt;--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 代码生成器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Velocity --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--MyBatis-Plus代码生成器需要的依赖，结束--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、Mybatis-Plus-自动生成"><a href="#2、Mybatis-Plus-自动生成" class="headerlink" title="2、Mybatis-Plus 自动生成"></a>2、Mybatis-Plus 自动生成</h4><p><strong>entity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@ApiModel</span>(value=<span class="string">"User对象"</span>, description=<span class="string">"InnoDB free: 10240 kB"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"主键ID"</span>)</span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"id"</span>, type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"密码"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"邮箱"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"创建时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"create_time"</span>, fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"更新时间"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"update_time"</span>, fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"乐观锁"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"逻辑删除"</span>)</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"remove_logic"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer removeLogic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(<span class="string">"用户管理"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/abc/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户登录"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.login(name, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"查询所有用户"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query_all_list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">queryAllList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryAllList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token 合法性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户登录"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/verify"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">verify</span><span class="params">(@RequestParam(<span class="string">"token"</span>)</span> String token) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token 合法性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">verify</span><span class="params">(String token)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">queryAllList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>serviceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"用户名：[&#123;&#125;]"</span>, name);</span><br><span class="line">        log.info(<span class="string">"密码：[&#123;&#125;]"</span>, password);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">            wrapper.eq(<span class="string">"name"</span>, name).eq(<span class="string">"password"</span>, password);</span><br><span class="line">            User userInfo = userMapper.selectOne(wrapper);</span><br><span class="line">            <span class="comment">// log.info("用户：[&#123;&#125;]", userInfo.toString());</span></span><br><span class="line">            <span class="comment">// 设置 payload 有效信息</span></span><br><span class="line">            Map&lt;String, String&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            payload.put(<span class="string">"name"</span>, userInfo.getName());</span><br><span class="line">            payload.put(<span class="string">"password"</span>, userInfo.getPassword());</span><br><span class="line">            <span class="comment">// 生成jwt令牌</span></span><br><span class="line">            String token = JwtUtils.creatToken(payload);</span><br><span class="line">            map.put(<span class="string">"name"</span>, userInfo.getName());</span><br><span class="line">            map.put(<span class="string">"password"</span>, userInfo.getPassword());</span><br><span class="line">            map.put(<span class="string">"token"</span>, token);  <span class="comment">// 响应token</span></span><br><span class="line">            <span class="keyword">return</span> ResUtils.success(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            map.put(<span class="string">"state"</span>, <span class="keyword">false</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> ResUtils.failure(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token 合法性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">verify</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"当前token为：[&#123;&#125;]"</span>, token);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 验证令牌</span></span><br><span class="line">            JwtUtils.verifyGetTokenInfo(token);</span><br><span class="line">            map.put(<span class="string">"state"</span>, <span class="keyword">true</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"请求成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> ResUtils.success(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"无效签名！"</span>);</span><br><span class="line">            <span class="keyword">return</span> ResUtils.failure(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"token过期"</span>);</span><br><span class="line">            <span class="keyword">return</span> ResUtils.failure(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"算法不一致"</span>);</span><br><span class="line">            <span class="keyword">return</span> ResUtils.failure(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"token无效！"</span>);</span><br><span class="line">            <span class="keyword">return</span> ResUtils.failure(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">queryAllList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResUtils.success(userMapper.selectList(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ase.mybatis.abc.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、封装-JWT-工具类"><a href="#3、封装-JWT-工具类" class="headerlink" title="3、封装 JWT 工具类"></a>3、封装 JWT 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置加密的私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SING = <span class="string">"jsonwebtoken"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、生成 token  header.payload.singature 【加密后发送给客户端】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">creatToken</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 默认7天过期</span></span><br><span class="line">        instance.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建jwt builder</span></span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// payload</span></span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line">        String token = builder.withExpiresAt(instance.getTime())  <span class="comment">//指定令牌过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SING));  <span class="comment">// sign</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、验证 token 合法性, 并获取 token 信息方法 【客户端请求时 header 中携带, 如果客户端携带的 token 是合法的, 则获取有效载荷中的数据】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">verifyGetTokenInfo</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、创建拦截器"><a href="#4、创建拦截器" class="headerlink" title="4、创建拦截器"></a>4、创建拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptors</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取请求头中令牌</span></span><br><span class="line">        String token = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="comment">// 要删除的字符串结束位置</span></span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="comment">// 正规表达式</span></span><br><span class="line">        String regPattern = <span class="string">"Bearer "</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(regPattern, Pattern.CASE_INSENSITIVE);</span><br><span class="line">        <span class="comment">// 去掉原始字符串开头位置的指定字符</span></span><br><span class="line">        Matcher matcher = pattern.matcher(token);</span><br><span class="line">        <span class="keyword">if</span> (matcher.lookingAt()) &#123;</span><br><span class="line">            end = matcher.end();</span><br><span class="line">            token = token.substring(end);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 验证令牌</span></span><br><span class="line">            JwtUtils.verifyGetTokenInfo(token);</span><br><span class="line">            map.put(<span class="string">"state"</span>, <span class="keyword">true</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"请求成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">// 放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"无效签名！"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"token过期"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"算法不一致"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"token无效！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"state"</span>,<span class="keyword">false</span>);  <span class="comment">// 设置状态</span></span><br><span class="line">        <span class="comment">// 将map以json的形式响应到前台  map --&gt; json  (jackson)</span></span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、定制拦截器规则"><a href="#5、定制拦截器规则" class="headerlink" title="5、定制拦截器规则"></a>5、定制拦截器规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册添加拦截器 JwtInterceptors</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> JwtInterceptors())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)  <span class="comment">// 其他接口token验证 【用于设置拦截器的过滤路径规则；addPathPatterns("/**")对所有请求都拦截】</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/abc/user/login"</span>);  <span class="comment">// 登录是所有用户都放行的 【用于设置不需要拦截的过滤规则】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、请求头验证token"><a href="#6、请求头验证token" class="headerlink" title="6、请求头验证token"></a>6、请求头验证token</h4><p><strong>登录获取 token</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-38-25.png" alt=""></p><p><strong>编写脚本将 token 存在环境变量中，即时更新</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-36-52.png" alt=""></p><p><strong>请求携带 token 通过验证得到返回结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-24_04-37-20.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 JWT&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-18_01-52-58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前大部分的项目都逐渐从单体架构向着前后端分离的方向发展&lt;/p&gt;
&lt;p&gt;这个时候就涉及到前后端数据之间的交互，传输问题了，&lt;font color=#008000&gt; JWT&lt;/font&gt; 闪亮登场！&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="https://codeyg.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="spring" scheme="https://codeyg.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>实践一下--MyBatisPlus</title>
    <link href="https://codeyg.top/2021/08/14/%E5%AE%9E%E8%B7%B5--MyBatisPlus/"/>
    <id>https://codeyg.top/2021/08/14/%E5%AE%9E%E8%B7%B5--MyBatisPlus/</id>
    <published>2021-08-14T13:00:00.000Z</published>
    <updated>2021-08-15T15:18:18.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实践是检验真理的唯一标准</p></blockquote><p><strong>本篇着重介绍一下 MyBatisPlus</strong></p><hr><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/logo.svg" style="zoom:30%;" /><p><strong>写在前面</strong></p><p>忙里偷闲，趁着有时间来写一篇关于 MybatisPlus 的学习笔记！</p><p>其实官网上的 API 很全面，不会的就去官网上查一查~</p><p><a href="https://baomidou.com/" target="_blank" rel="noopener">MyBatisPlus</a></p><a id="more"></a><h2 id="MyBatisPlus-简介"><a href="#MyBatisPlus-简介" class="headerlink" title="MyBatisPlus  简介"></a>MyBatisPlus  简介</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-plus-framework.jpg" alt=""></p><hr><h2 id="MyBatisPlus-快速入门"><a href="#MyBatisPlus-快速入门" class="headerlink" title="MyBatisPlus  快速入门"></a>MyBatisPlus  快速入门</h2><h3 id="简单的-Demo-实现"><a href="#简单的-Demo-实现" class="headerlink" title="简单的 Demo 实现"></a>简单的 Demo 实现</h3><h4 id="数据库中创建-User-表"><a href="#数据库中创建-User-表" class="headerlink" title="数据库中创建 User 表"></a>数据库中创建 User 表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,</span><br><span class="line">name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DELETE FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),</span><br><span class="line">(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),</span><br><span class="line">(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),</span><br><span class="line">(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),</span><br><span class="line">(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</span><br></pre></td></tr></table></figure><h4 id="添加-mybatis-plus-依赖"><a href="#添加-mybatis-plus-依赖" class="headerlink" title="添加 mybatis-plus 依赖"></a>添加 mybatis-plus 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意引入了<code>mybatisplus</code>就不要再引入<code>mybatis</code>的启动器了</p></blockquote><h4 id="编写-application-yml-文件"><a href="#编写-application-yml-文件" class="headerlink" title="编写 application.yml 文件"></a>编写 application.yml 文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis-plus?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-Mapper-接口"><a href="#创建-Mapper-接口" class="headerlink" title="创建 Mapper 接口"></a>创建 Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加扫描注解"><a href="#添加扫描注解" class="headerlink" title="添加扫描注解"></a>添加扫描注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.ase.mybatis.mapper"</span>) <span class="comment">//更加的灵活</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"MybatisPlus 接口测试"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"测试查询全部"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queryAllList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(user -&gt; log.info(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"测试插入一条数据"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUserOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        user.setAge(<span class="number">23</span>);</span><br><span class="line">        user.setEmail(<span class="string">"tom@163.com"</span>);</span><br><span class="line">        <span class="comment">//插入的条数</span></span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">        log.info(insert);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service接口"><a href="#service接口" class="headerlink" title="service接口"></a>service接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service实现类 继承mybatisplus提供通用的service基类</span></span><br><span class="line"><span class="comment"> * ServiceImpl&lt;UserMapper, User&gt;</span></span><br><span class="line"><span class="comment"> *     2个泛型 ：</span></span><br><span class="line"><span class="comment"> *        第一个是Mapper接口</span></span><br><span class="line"><span class="comment"> *        第二个是对应实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt;<span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h4><p>【映射数据库的表名，数据库表名为user】</p><ul><li><p>描述：用来将实体对象与数据库表名完成映射</p></li><li><p>修饰范围：作用在类上</p></li><li><p>常见属性： value：string类型，指定映射的表名</p></li></ul><h4 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h4><p>【数据库插入的id值默认为：全局的唯一id】</p><ul><li>描述：主键主键</li><li>修饰范围:用在属性上</li><li>常见属性：<ul><li>value：String类型，指定实体类中与表对应的主键列名</li><li>type：枚举类型，指定主键生成策略</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库ID自增</span></span><br><span class="line">AUTO(<span class="number">0</span>),</span><br><span class="line">NONE(<span class="number">1</span>),</span><br><span class="line"><span class="comment">//用户输入ID</span></span><br><span class="line">INPUT(<span class="number">2</span>),</span><br><span class="line">ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面3个被淘汰了</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER(<span class="number">3</span>),</span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER_STR(<span class="number">3</span>),</span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">UUID(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>AUTO 默认就是数据库⾃增，开发者⽆需赋值，会主动回填。但是数据库的主键要有自增长 </p><p>ASSIGN_ID mybatisplus ⾃动赋值，雪花算法</p></blockquote><p><strong>全局ID生成策略</strong></p><p>在全局配置文件中，就不需要在每个pojo的主键上配置了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><ul><li>描述字段注解（非主键）</li><li>修饰范围:用在属性上</li></ul><h4 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h4><p>【标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功】</p><p>举个荔枝：</p><p>version = 1</p><p>线程 1：update … set version = 2 where version = 1</p><p>线程2 ：update … set version = 2 where version = 1</p><p><strong>这样就只有一个线程会执行</strong></p><p><strong>乐观锁实现方式：</strong></p><ol><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果 version 不对，就更新失败</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type =IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a>@EnumValue</h4><p>【通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StatusEnum &#123;</span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">"成功"</span>),</span><br><span class="line">    FAILURE(<span class="number">300</span>,<span class="string">"失败"</span>);</span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    StatusEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type =IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="keyword">private</span> StatusEnum status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.example.mybatisplus.enums</span></span><br></pre></td></tr></table></figure><h4 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h4><p>【映射逻辑删除】</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>逻辑未删除值</td></tr><tr><td>delval</td><td>String</td><td>否</td><td>“”</td><td>逻辑删除值</td></tr></tbody></table><p><strong>物理删除</strong>【在删除的时候直接将数据库的数据从数据库删除掉】</p><p><strong>逻辑删除</strong>【在逻辑层面控制删除，通常会在表里加入对应的逻辑删除标识字段，deleted，默认是有效的值为0，当用户删除时将数据修改为1.查询是只查询deleted=0的】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type =IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> AgeEnum age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="keyword">private</span> StatusEnum status;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml 添加配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.example.mybatisplus.enums</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>查询不会查询 deleted 为 1 的数据</p></blockquote><h4 id="OrderBy"><a href="#OrderBy" class="headerlink" title="@OrderBy"></a>@OrderBy</h4><p>【内置 SQL 默认指定排序，优先级低于 wrapper 条件查询】</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>isDesc</td><td>boolean</td><td>否</td><td>true</td><td>是否倒序查询</td></tr><tr><td>delval</td><td>String</td><td>否</td><td>Short.MAX_VALUE</td><td>数字越小越靠前</td></tr></tbody></table><hr><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><h4 id="wrapper"><a href="#wrapper" class="headerlink" title="wrapper"></a>wrapper</h4><p>【条件构造器】</p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类</li><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</li><li>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</li><li>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</li><li>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</li><li>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul><table><thead><tr><th align="center">函数名</th><th align="center">说明</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">eq</td><td align="center">等于 =</td><td align="center">eq(“name”, “老王”)—&gt;name = ‘老王’</td></tr><tr><td align="center">ne</td><td align="center">不等于 &lt;&gt;</td><td align="center">例: ne(“name”, “老王”)—&gt;name &lt;&gt; ‘老王’</td></tr><tr><td align="center">gt</td><td align="center">大于 &gt;</td><td align="center">gt(“age”, 18)—&gt;age &gt; 18</td></tr><tr><td align="center">ge</td><td align="center">大于等于 &gt;=</td><td align="center">ge(“age”, 18)—&gt;age &gt;= 18</td></tr><tr><td align="center">lt</td><td align="center">小于 &lt;</td><td align="center">lt(“age”, 18)—&gt;age &lt; 18</td></tr><tr><td align="center">le</td><td align="center">小于等于 &lt;=</td><td align="center">le(“age”, 18)—&gt;age &lt;= 18</td></tr><tr><td align="center">between</td><td align="center">BETWEEN 值1 AND 值2</td><td align="center">between(“age”, 18, 30)—&gt;age between 18 and 30</td></tr><tr><td align="center">notBetween</td><td align="center">NOT BETWEEN 值1 AND 值2</td><td align="center">notBetween(“age”, 18, 30)—&gt;age not between 18 and 30</td></tr><tr><td align="center">like</td><td align="center">LIKE ‘%值%’</td><td align="center">like(“name”, “王”)—&gt;name like ‘%王%’</td></tr><tr><td align="center">notLike</td><td align="center">NOT LIKE ‘%值%’</td><td align="center">notLike(“name”, “王”)—&gt;name not like ‘%王%’</td></tr><tr><td align="center">likeLeft</td><td align="center">LIKE ‘%值’</td><td align="center">likeLeft(“name”, “王”)—&gt;name like ‘%王’</td></tr><tr><td align="center">likeRight</td><td align="center">LIKE ‘值%’</td><td align="center">likeRight(“name”, “王”)—&gt;name like ‘王%’</td></tr><tr><td align="center">isNul</td><td align="center">字段 IS NULL</td><td align="center">isNull(“name”)—&gt;name is null</td></tr><tr><td align="center">isNotNull</td><td align="center">字段 IS NOT NULL</td><td align="center">isNotNull(“name”)—&gt;name is not null</td></tr><tr><td align="center">in</td><td align="center">字段 IN (value.get(0), value.get(1), …)</td><td align="center">in(“age”,{1,2,3})—&gt;age in (1,2,3)</td></tr><tr><td align="center">in</td><td align="center">字段 IN (v0, v1, …)</td><td align="center">in(“age”, 1, 2, 3)—&gt;age in (1,2,3)</td></tr><tr><td align="center">notIn</td><td align="center">字段 NOT IN (value.get(0), value.get(1), …)</td><td align="center">notIn(“age”,{1,2,3})—&gt;age not in (1,2,3)</td></tr><tr><td align="center">notIn</td><td align="center">字段 NOT IN (v0, v1, …)</td><td align="center">age not in (1,2,3)</td></tr><tr><td align="center">inSql</td><td align="center">字段 IN ( sql语句 )</td><td align="center">inSql( “ age “, “1 ,2,3,4,5,6”)—&gt;age in (1,2,3,4,5,6) ， inSql(“id”, “select id from table where id &lt; 3”)—&gt;id in (select id from table where id</td></tr><tr><td align="center">groupBy</td><td align="center">分组：GROUP BY 字段, …</td><td align="center">groupBy(“id”, “name”)—&gt;group by id,name</td></tr><tr><td align="center">orderByAsc</td><td align="center">排序：ORDER BY 字段, … ASC</td><td align="center">orderByAsc(“id”, “name”)—&gt;order by id ASC,name ASC</td></tr><tr><td align="center">orderByDesc</td><td align="center">排序：ORDER BY 字段, … DESC</td><td align="center">orderByDesc(“id”, “name”)—&gt;order by id DESC,name DESC</td></tr><tr><td align="center">orderBy</td><td align="center">排序：ORDER BY 字段, …</td><td align="center">orderBy(true, true, “id”, “name”)—&gt;order by id ASC,name ASC</td></tr><tr><td align="center">having</td><td align="center">HAVING ( sql语句 )</td><td align="center">having(“sum(age) &gt; 10”)—&gt;having sum(age) &gt; 10</td></tr><tr><td align="center">or</td><td align="center">拼接 OR 注意事项:主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接)</td><td align="center">eq(“id”,1).or().eq(“name”,“老王”)—&gt;id = 1 or name = ‘老王’</td></tr><tr><td align="center">and</td><td align="center">AND 嵌套</td><td align="center">and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;and (name = ‘李白’ and status &lt;&gt; ‘活着’)</td></tr><tr><td align="center">nested</td><td align="center">正常嵌套 不带 AND 或者 OR</td><td align="center">nested(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;(name = ‘李白’ and status &lt;&gt; ‘活着’)</td></tr><tr><td align="center">last</td><td align="center">无视优化规则直接拼接到 sql 的最后 注意事项: 只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</td><td align="center">last(“limit 1”)</td></tr><tr><td align="center">exists</td><td align="center">拼接 EXISTS ( sql语句 )</td><td align="center">exists(“select id from table where age = 1”)—&gt;exists (select id from table where age = 1)</td></tr><tr><td align="center">notExists</td><td align="center">拼接 NOT EXISTS ( sql语句 )</td><td align="center">notExists(“select id from table where age = 1”)—&gt;not exists (select id from table where age = 1)</td></tr></tbody></table><h4 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h4><p><strong>select【设置查询字段】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select(String... sqlSelect)</span><br><span class="line">select(Predicate&lt;TableFieldInfo&gt; predicate)</span><br><span class="line">select(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)</span><br></pre></td></tr></table></figure><p>例：select(“id”, “name”, “age”)</p><p>例:：select(i -&gt; i.getProperty().startsWith(“test”))</p><h4 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h4><p><strong>set</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(String column, Object val)</span><br><span class="line">set(<span class="keyword">boolean</span> condition, String column, Object val)</span><br></pre></td></tr></table></figure><p>例: set(“name”, “老李头”)</p><p>例: set(“name”, “”)—&gt;数据库字段值变为空字符串</p><p>例: set(“name”, null)—&gt;数据库字段值变为null</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, @Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><h4 id="查询所有不加条件"><a href="#查询所有不加条件" class="headerlink" title="查询所有不加条件"></a>查询所有不加条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不加任何条件全部查询</span></span><br><span class="line">List&lt;User&gt; users = mapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="查询单条记录"><a href="#查询单条记录" class="headerlink" title="查询单条记录"></a>查询单条记录</h4><p>注意：seletOne返回的是一条实体记录，当出现多条时会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">wrapper.eq(<span class="string">"id"</span>,<span class="number">7</span>);</span><br><span class="line">System.out.println(mapper.selectOne(wrapper));</span><br></pre></td></tr></table></figure><h4 id="通过id查询"><a href="#通过id查询" class="headerlink" title="通过id查询"></a>通过id查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询单个id</span></span><br><span class="line">User user = mapper.selectById(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//批量操作查询多个id</span></span><br><span class="line">List&lt;User&gt; users = mapper.selectBatchIds(Arrays.asList(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure><h4 id="通过map查询"><a href="#通过map查询" class="headerlink" title="通过map查询"></a>通过map查询</h4><p>map只能做等值判断，逻辑判断需要使用wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"id"</span>,<span class="number">7</span>);</span><br><span class="line">mapper.selectByMap(map).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：map中的key对应的是数据库中的列名。例如数据库user_id，实体类是userId，这时map的key需要填写user_id</strong></p></blockquote><h4 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询name为cb的用户</span></span><br><span class="line">QueryWrapper wrapper=<span class="keyword">new</span> QueryWrapper();</span><br><span class="line">wrapper.eq(<span class="string">"name"</span>,<span class="string">"cb"</span>);</span><br><span class="line">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件查询</span></span><br><span class="line"><span class="comment">//查询name为cb,age为18的用户</span></span><br><span class="line">QueryWrapper wrapper=<span class="keyword">new</span> QueryWrapper();</span><br><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>,<span class="string">"cb"</span>);</span><br><span class="line">map.put(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">wrapper.allEq(map);</span><br><span class="line">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wrapper.gt(<span class="string">"age"</span>,<span class="number">18</span>);  <span class="comment">//大于</span></span><br><span class="line">wrapper.ne(<span class="string">"name"</span>,<span class="string">"cb"</span>); <span class="comment">//等于</span></span><br><span class="line">wrapper.ge(<span class="string">"age"</span>,<span class="number">18</span>); <span class="comment">//大于等于</span></span><br><span class="line">wrapper.lt(<span class="string">"age"</span>,<span class="number">18</span>);  <span class="comment">//小于</span></span><br><span class="line">wrapper.le(<span class="string">"age"</span>,<span class="number">18</span>);  <span class="comment">//小于等于</span></span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模糊查询</span></span><br><span class="line">QueryWrapper wrapper=<span class="keyword">new</span> QueryWrapper();</span><br><span class="line"><span class="comment">//相对于 like '%b%'</span></span><br><span class="line">wrapper.like(<span class="string">"name"</span>,<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 like '%b'</span></span><br><span class="line">wrapper.likeLeft(<span class="string">"name"</span>,<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 like 'b%'</span></span><br><span class="line">wrapper.likeRight(<span class="string">"name"</span>,<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wrapper.inSql(<span class="string">"id"</span>,<span class="string">"select id from user where id &lt; 10"</span>);</span><br><span class="line">wrapper.inSql(<span class="string">"age"</span>,<span class="string">"select age from user where age &gt; 3"</span>);</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wrapper.orderByDesc(<span class="string">"age"</span>);</span><br><span class="line">wrapper.orderByAsc(<span class="string">"age"</span>);</span><br><span class="line">wrapper.having(<span class="string">"id &gt; 8"</span>);</span><br></pre></td></tr></table></figure><h4 id="查询数量"><a href="#查询数量" class="headerlink" title="查询数量"></a>查询数量</h4><p>返回的是有几条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">wrapper.eq(<span class="string">"id"</span>,<span class="number">7</span>);</span><br><span class="line">System.out.println(mapper.selectCount(wrapper));</span><br></pre></td></tr></table></figure><h4 id="将查询结果封装到map"><a href="#将查询结果封装到map" class="headerlink" title="将查询结果封装到map"></a>将查询结果封装到map</h4><p>返回map而不是原来的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">wrapper.eq(<span class="string">"id"</span>,<span class="number">7</span>);</span><br><span class="line">mapper.selectMaps(wrapper).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><strong>配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper方法返回page对象"><a href="#mapper方法返回page对象" class="headerlink" title="mapper方法返回page对象"></a>mapper方法返回page对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="comment">//第一个参数是页数</span></span><br><span class="line"><span class="comment">//第二个参数每页的条数</span></span><br><span class="line">Page&lt;User&gt; page=<span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">Page&lt;User&gt; result = mapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//每页条数</span></span><br><span class="line">System.out.println(result.getSize());</span><br><span class="line"><span class="comment">//总数</span></span><br><span class="line">System.out.println(result.getTotal());</span><br><span class="line"><span class="comment">//查询结果</span></span><br><span class="line">result.getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getCurrent 当前页</span><br><span class="line">getRecords 每页数据list集合</span><br><span class="line">getSize 每页显示记录数</span><br><span class="line">getTotal 总记录数</span><br><span class="line">getPages 总页数</span><br><span class="line"></span><br><span class="line">hasNext  是否有下一页</span><br><span class="line">hasPrevious  是否有上一页</span><br></pre></td></tr></table></figure><h4 id="mapper方法返回map集合"><a href="#mapper方法返回map集合" class="headerlink" title="mapper方法返回map集合"></a>mapper方法返回map集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;Map&lt;String,Object&gt;&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">mapper.selectMapsPage(page,<span class="keyword">null</span>).getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="service方法返回page对象"><a href="#service方法返回page对象" class="headerlink" title="service方法返回page对象"></a>service方法返回page对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;User&gt; ipage=<span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">IPage&lt;User&gt; page = userService.page(ipage);</span><br><span class="line">List&lt;User&gt; records = page.getRecords();</span><br><span class="line"></span><br><span class="line">System.out.println(records);</span><br><span class="line"><span class="comment">//总共数据的条数</span></span><br><span class="line">System.out.println(page.getTotal());</span><br><span class="line"><span class="comment">//总共数据的页数</span></span><br><span class="line">System.out.println(page.getPages());</span><br></pre></td></tr></table></figure><h3 id="xml自定义分页"><a href="#xml自定义分页" class="headerlink" title="xml自定义分页"></a>xml自定义分页</h3><h4 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据年龄查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age 年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">getByAge</span><span class="params">(IPage iPage,Integer age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml 等同于编写一个普通 list 查询，mybatis-plus 自动分页</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.blb.mybatisplus2.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByAge"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user1 where age=#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserServiceImpl.java 调用分页方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xmlPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IPage&lt;User&gt; byAge = userMapper.getByAge(<span class="keyword">new</span> Page(<span class="number">1</span>, <span class="number">2</span>), <span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; records = byAge.getRecords();</span><br><span class="line">    System.out.println(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义sql（多表关联）"><a href="#自定义sql（多表关联）" class="headerlink" title="自定义sql（多表关联）"></a>自定义sql（多表关联）</h3><h4 id="多表数据库"><a href="#多表数据库" class="headerlink" title="多表数据库"></a>多表数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create  table  product(</span><br><span class="line">    category int ,</span><br><span class="line">    count int ,</span><br><span class="line">    description varchar(20),</span><br><span class="line">    userid bigint(100)</span><br><span class="line">)charset &#x3D;utf8</span><br></pre></td></tr></table></figure><h4 id="ProductVO"><a href="#ProductVO" class="headerlink" title="ProductVO"></a>ProductVO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer category;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select p.*,u.name username from product p,user u where u.id=p.userid and u.id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;ProductVO&gt; <span class="title">productList</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="执行-SQL-分析打印"><a href="#执行-SQL-分析打印" class="headerlink" title="执行 SQL 分析打印"></a>执行 SQL 分析打印</h3><h4 id="p6spy-依赖引入"><a href="#p6spy-依赖引入" class="headerlink" title="p6spy 依赖引入"></a>p6spy 依赖引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml-配置"><a href="#application-yml-配置" class="headerlink" title="application.yml 配置"></a>application.yml 配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span> <span class="comment">#com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.blb.mybatisplus2.enums</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ase.mybatis.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="spy-properties-配置："><a href="#spy-properties-配置：" class="headerlink" title="spy.properties 配置："></a>spy.properties 配置：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.2.1以上使用</span></span><br><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment">#3.2.1以下使用或者不配置</span></span><br><span class="line"><span class="comment">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"># 自定义日志打印</span></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span></span><br><span class="line"><span class="comment">#日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"># 使用日志系统记录 sql</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 实际驱动可多个</span></span><br><span class="line"><span class="comment">#driverlist=org.h2.Driver</span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 2 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><hr><h2 id="MyBatisPlus-代码生成器"><a href="#MyBatisPlus-代码生成器" class="headerlink" title="MyBatisPlus 代码生成器"></a>MyBatisPlus 代码生成器</h2><p><strong>【根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller】</strong></p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><strong>pom.xml 导入 MyBatis Plus Generator</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Velocity（默认）、Freemarker、Beetl</p></blockquote><h3 id="运行main方法"><a href="#运行main方法" class="headerlink" title="运行main方法"></a>运行main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建generator对象</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">"jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//当前项目的绝对路径</span></span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">"user.dir"</span>)+<span class="string">"/src/main/java"</span>);</span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setAuthor(<span class="string">"dyk"</span>);</span><br><span class="line">        <span class="comment">//去掉默认生成接口名字的I</span></span><br><span class="line">        globalConfig.setServiceName(<span class="string">"%sService"</span>);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="comment">//包信息</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setParent(<span class="string">"com.blb.mybatisplus"</span>);</span><br><span class="line"><span class="comment">//packageConfig.setModuleName("generator");</span></span><br><span class="line">        packageConfig.setController(<span class="string">"controller"</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">"service"</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">"service.impl"</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//生成部分数据库里面的表对应的实体类</span></span><br><span class="line">        strategyConfig.setInclude(<span class="string">"user"</span>,<span class="string">"product"</span>);</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator  autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//获得当前项目的路径</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        <span class="comment">//设置生成路径</span></span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        <span class="comment">//作者</span></span><br><span class="line">        gc.setAuthor(<span class="string">"dyk"</span>);</span><br><span class="line">        <span class="comment">//代码生成后是不是要打开文件所在的文件夹</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//生成实体属性 Swagger2 注解</span></span><br><span class="line">        <span class="comment">// gc.setSwagger2(true);</span></span><br><span class="line">        <span class="comment">//会在mapper.xml生成一个基础的&lt;ResultMap&gt; 映射所有的字段</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//同文件生成覆盖</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//实体类名直接用表名  %s=表名</span></span><br><span class="line">        gc.setEntityName(<span class="string">"%s"</span>);</span><br><span class="line">        <span class="comment">//mapper接口名</span></span><br><span class="line">        gc.setMapperName(<span class="string">"%sMapper"</span>);</span><br><span class="line">        <span class="comment">//mapper.xml文件名</span></span><br><span class="line">        gc.setXmlName(<span class="string">"%sMapper"</span>);</span><br><span class="line">        <span class="comment">//业务逻辑接口名</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);</span><br><span class="line">        <span class="comment">//业务逻辑实现类名</span></span><br><span class="line">        gc.setServiceImplName(<span class="string">"%sServiceImpl"</span>);</span><br><span class="line">        <span class="comment">//将全局配置设置到 AutoGenerator</span></span><br><span class="line">        autoGenerator.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        <span class="comment">//设置数据库类型</span></span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        <span class="comment">//连接的url</span></span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/db3?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"</span>);</span><br><span class="line">        <span class="comment">//数据库用户名</span></span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//数据库密码</span></span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//数据库驱动</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//将数据源配置设置到 AutoGenerator</span></span><br><span class="line">        autoGenerator.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包信息</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//包名</span></span><br><span class="line">        pc.setParent(<span class="string">"com.blb"</span>);</span><br><span class="line">        <span class="comment">//设置模块名</span></span><br><span class="line"><span class="comment">//        pc.setModuleName("generator");</span></span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">"service.impl"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//表名的生成策略:下划线转驼峰</span></span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//列名的生成策略：下划线转驼峰</span></span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//支持lombok注解</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//在controller类上是否生成@Restcontroller</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//生成部分数据库里面的表对应的实体类，生成的表名</span></span><br><span class="line">        strategyConfig.setInclude(<span class="string">"user"</span>,<span class="string">"product"</span>);</span><br><span class="line">        <span class="comment">//按前缀生成表</span></span><br><span class="line">        <span class="comment">//strategyConfig.setLikeTable("tbl_");</span></span><br><span class="line">        <span class="comment">//设置表替换前缀</span></span><br><span class="line">        <span class="comment">//strategyConfig.setTablePrefix("tbl_");</span></span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模板引擎是 velocity</span></span><br><span class="line">         String templatePath = <span class="string">"/templates/mapper.xml.vm"</span>;</span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        autoGenerator.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">//让已有的xml生成置空</span></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        autoGenerator.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行生成</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实践是检验真理的唯一标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 MyBatisPlus&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/logo.svg&quot; style=&quot;zoom:30%;&quot; /&gt;



&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;忙里偷闲，趁着有时间来写一篇关于 MybatisPlus 的学习笔记！&lt;/p&gt;
&lt;p&gt;其实官网上的 API 很全面，不会的就去官网上查一查~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baomidou.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatisPlus&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="https://codeyg.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="MyBatis" scheme="https://codeyg.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--数据库连接池</title>
    <link href="https://codeyg.top/2021/08/13/%E9%9D%A2%E8%AF%95--%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://codeyg.top/2021/08/13/%E9%9D%A2%E8%AF%95--%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-08-13T13:00:00.000Z</published>
    <updated>2021-08-15T15:56:10.717Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下数据库连接池</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-35-37.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>平时在使用 SpringBoot 框架结合 MyBatis 的时候有注意到数据库连接池吗？</font></p><p>还真的没有过呀，还不是因为平时做的练习项目都是只注重使用而忽略了其更深层次的原理。</p><p>哎！拖欠的知识终究是要花时间补回来的，顺便回顾一下吧！</p><a id="more"></a><h3 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h3><p>官方：数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中的连接进行申请，使用，释放。</p><p>个人理解：就像是 Java 中的线程池一样，创建数据库连接是一个很耗时的操作，也容易对数据库造成安全隐患。所以在程序初始化的时候集中创建数据库连接池，负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p><br/><h3 id="为什么要使用连接池？"><a href="#为什么要使用连接池？" class="headerlink" title="为什么要使用连接池？"></a>为什么要使用连接池？</h3><p> 数据库连接是一种关键的有限的昂贵的资源，在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。</p><p>触类旁通的参照 Java 中的线程池，在一个“池”里放了好多半成品的数据库联接对象，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。</p><p>好处：</p><p>连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，</p><br/><h3 id="与传统的连接机制区别"><a href="#与传统的连接机制区别" class="headerlink" title="与传统的连接机制区别"></a>与传统的连接机制区别</h3><h4 id="不使用连接池流程"><a href="#不使用连接池流程" class="headerlink" title="不使用连接池流程"></a>不使用连接池流程</h4><p><strong>举个荔枝：</strong>执行一个 SQL 命令，如果不使用连接池，需要经过哪些流程【MySQL 为例】</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-14_21-19-12.png" alt=""></p><p><strong>不使用数据库连接池的步骤：</strong></p><ol><li>TCP 建立连接的三次握手</li><li>MySQL 认证的三次握手</li><li>真正的 SQ L执行</li><li>MySQL 的关闭</li><li>TCP 的四次握手关闭</li></ol><p><strong>优点：实现简单</strong></p><p><strong>缺点：</strong></p><ol><li>网络 IO 较多</li><li>数据库的负载较高</li><li>响应时间较长及 QPS 较低</li><li>应用频繁的创建连接和关闭连接，导致临时对象较多，GC 频繁</li><li>在关闭连接后，会出现大量 TIME_WAIT 的TCP 状态（在2个MSL之后关闭）</li></ol><h4 id="使用连接池流程"><a href="#使用连接池流程" class="headerlink" title="使用连接池流程"></a>使用连接池流程</h4><p><strong>举个荔枝：</strong>执行一个 SQL 命令，如果使用连接池，只需要经过哪些流程【MySQL 为例】</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-14_21-28-29.png" alt=""></p><p><strong>使用数据库连接池的步骤：</strong></p><ol><li><p>第一次访问的时候，需要建立连接</p></li><li><p>之后的访问，均会<strong>复用</strong>之前创建的连接，直接执行 SQL 语句。</p></li></ol><p><strong>优点：</strong></p><ol><li><p>较少了网络开销</p></li><li><p>系统的性能会有一个实质的提升</p></li><li><p>没了麻烦的 TIME_WAIT 状态</p></li></ol><p><strong>连接池解决现状问题的原理</strong></p><table><thead><tr><th>Connection连接对象</th><th>操作特点</th></tr></thead><tbody><tr><td>创建时</td><td>连接对象不再由自己创建，而是系统启动的时候已经创建一定数量的连接， 并且放在连接池中</td></tr><tr><td>使用时</td><td>直接从连接池中去获取一个已经创建好的连接对象即可</td></tr><tr><td>关闭时</td><td>不是真的关闭连接对象，而是将连接对象再放回到连接池中，供下一个用户使用</td></tr></tbody></table><br/><h3 id="数据库连接池的工作原理"><a href="#数据库连接池的工作原理" class="headerlink" title="数据库连接池的工作原理"></a>数据库连接池的工作原理</h3><h4 id="三部分组成"><a href="#三部分组成" class="headerlink" title="三部分组成"></a>三部分组成</h4><ol><li>连接池的建立</li><li>连接池中连接的使用管理</li><li>连接池的关闭</li></ol><p><strong>举个荔枝：</strong>使用连接池【MySQL 为例】</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-32-29.png" style="zoom:90%;" /><ol><li>系统在启动时初始化连接池；</li><li>向连接池请求可用的数据库连接；</li><li>如果没有获取到可用的数据库连接，并且连接池中连接的数量小于最大连接数，则按照规定的步长给连接池中添加连接，然后再获取，如果连接池中的数量已经到了最大连接数还没有获取到可用的连接，则等待其他请求释放了连接后再获取；</li><li>使用获取到的数据库连接请求数据库；</li><li>将数据库连接放回连接池，供其他连接使用；</li></ol><h4 id="连接池主要参数"><a href="#连接池主要参数" class="headerlink" title="连接池主要参数"></a>连接池主要参数</h4><p><strong>使用连接池时，要配置一下参数</strong></p><ol><li>最小连接数【是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费】</li><li>最大连接数【是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作】</li><li>最大空闲时间【如果一个连接对象长时间没有人使用，设置多久回收这个对象，默认是不回收】</li><li>获取连接超时时间【如果连接池中没有连接对象，设置用户等待的最长时间是多久，单位是毫秒。<br>如果超过这个时间就抛出异常】</li><li>超时重试连接次数</li></ol><h4 id="连接池需要注意的点"><a href="#连接池需要注意的点" class="headerlink" title="连接池需要注意的点"></a>连接池需要注意的点</h4><ul><li>并发问题</li><li>事务处理</li><li>连接池的分配与释放</li><li>连接池的配置与维护</li></ul><h4 id="数据库对比"><a href="#数据库对比" class="headerlink" title="数据库对比"></a>数据库对比</h4><p><strong>第一、二代连接池</strong></p><table><thead><tr><th><strong>数据库连接池</strong></th><th><strong>最新版本</strong></th><th><strong>发布时间</strong></th></tr></thead><tbody><tr><td>C3P0</td><td>c3p0-0.9.5.2</td><td>on 9 Dec 2015</td></tr><tr><td>DBCP</td><td>2.2.0</td><td>27 December 2017</td></tr><tr><td><strong>Druid</strong></td><td>0.11.0</td><td>Dec 4 2017</td></tr><tr><td><strong>HikariCP</strong></td><td>2.7.6</td><td>2018-01-14</td></tr></tbody></table><br/><h3 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h3><h4 id="Druid-简介"><a href="#Druid-简介" class="headerlink" title="Druid 简介"></a>Druid 简介</h4><blockquote><p>Druid是阿里巴巴开发的号称为监控而生的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。如：一年一度的双十一活动，每年春运的抢火车票。</p></blockquote><h4 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h4><ul><li>是一个阿里开源的连接池组件</li><li>加⼊了日志监控，不需要额外的界面开发</li></ul><h4 id="Druid-常用的配置参数"><a href="#Druid-常用的配置参数" class="headerlink" title="Druid 常用的配置参数"></a>Druid 常用的配置参数</h4><table><thead><tr><th align="center">参数</th><th align="center"><strong>缺省值</strong></th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center"></td><td align="center">连接字符串</td></tr><tr><td align="center">username</td><td align="center"></td><td align="center">用户名</td></tr><tr><td align="center">password</td><td align="center"></td><td align="center">密码</td></tr><tr><td align="center">driverClassName</td><td align="center"></td><td align="center">驱动类名，会自动根据URL识别，这一项可以不配置</td></tr><tr><td align="center">initialSize</td><td align="center">0</td><td align="center">初始连接数</td></tr><tr><td align="center">maxActive</td><td align="center">8</td><td align="center">最大连接池数量</td></tr><tr><td align="center">minIdle</td><td align="center"></td><td align="center">最小连接池数量</td></tr><tr><td align="center">maxWait</td><td align="center"></td><td align="center">最长等待时间，单位毫秒</td></tr></tbody></table><h4 id="Druid-连接池运行原理"><a href="#Druid-连接池运行原理" class="headerlink" title="Druid 连接池运行原理"></a>Druid 连接池运行原理</h4><ol><li><p>连接池初始化的时候按照 initialSize 创建多个连接【默认 0 个】</p></li><li><p>有 DB 操作访问的时候，就从里面取一个 【类似线程池的 task 任务】</p></li><li><p>如果当前正在使用的连接 = maxActive ,就会进入等待，没有到 maxActive 拿一个空闲连接，没有空闲就创建一个新连接，等待超过 maxWati 则会报错【最大连接池数量为阈值来决定是否创建新的连接或者报错】</p></li><li><p>使用完毕还回去等待其它人用，不会物理销毁【持续存在】</p></li><li><p>每一个 connection 在连接池里都有空闲时长的，允许最大空闲时长：minEvictableldleTimeMillis，多久检测一次：timeBetweenEvictionRunsMillis</p></li><li><p>maxActive 如何配置：理论上应该设置成最大并发数 </p></li><li><p>只要连接被前端业务拿到就算不空闲了，这个时候如果说长时间占有连接，连接数是不会崩溃，连接池主动关闭是使用中的连接，属于一个高级功能</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">removeAbandoned</span>=<span class="string">“true”</span></span><br><span class="line"><span class="attr">removeAbandonedTimeout</span>=<span class="string">“60”</span></span><br><span class="line"><span class="attr">logAbandoned</span>=<span class="string">“true”</span></span><br></pre></td></tr></table></figure><br/><h3 id="Druid-连接池-SpringBoot-集成"><a href="#Druid-连接池-SpringBoot-集成" class="headerlink" title="Druid 连接池 SpringBoot 集成"></a>Druid 连接池 SpringBoot 集成</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis-plus?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">db-type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开PSCache</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">      <span class="comment">#如果运行时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">      <span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">      <span class="attr">filter:</span> <span class="string">stat,wall,log4j,config</span></span><br><span class="line">      <span class="comment">#指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment">#合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br></pre></td></tr></table></figure><h4 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h4><p><strong>Druid数据源监控</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为Springboot内置了servlet容器，所以没有web.xml，替代方法就是将ServletRegistrationBean注册进去</span></span><br><span class="line">    <span class="comment">//加入后台监控</span></span><br><span class="line">    <span class="comment">//这里其实就相当于servlet的web.xml</span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要有人登录，进行配置</span></span><br><span class="line">        <span class="comment">//bean.addUrlMappings(); 这个可以添加映射，我们在构造里已经写了</span></span><br><span class="line">        <span class="comment">//设置一些初始化参数</span></span><br><span class="line">        Map&lt;String,String&gt; initParas = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        initParas.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);<span class="comment">//它这个账户密码是固定的</span></span><br><span class="line">        initParas.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//允许谁能防伪</span></span><br><span class="line">        initParas.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//这个值为空或没有就允许所有人访问，ip白名单</span></span><br><span class="line">        <span class="comment">//initParas.put("allow","localhost");//只允许本机访问，多个ip用逗号,隔开</span></span><br><span class="line">        <span class="comment">//initParas.put("deny","");//ip黑名单，拒绝谁访问 deny和allow同时存在优先deny</span></span><br><span class="line">        initParas.put(<span class="string">"resetEnable"</span>,<span class="string">"false"</span>);<span class="comment">//禁用HTML页面的Reset按钮</span></span><br><span class="line">        bean.setInitParameters(initParas);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再配置一个过滤器，Servlet按上面的方式注册Filter也只能这样</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        <span class="comment">//可以设置也可以获取,设置一个阿里巴巴的过滤器</span></span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">//可以过滤和排除哪些东西</span></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">//把不需要监控的过滤掉,这些不进行统计</span></span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p><strong>访问 URL：<a href="http://localhost:8080/druid/login.html" target="_blank" rel="noopener">http://localhost:8080/druid/login.html</a></strong></p><p>就会到Druid的监控登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_03-46-55.png" alt=""></p><p>输入我们配置的登录用户名和密码进行登录即可访问</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_03-47-26.png" alt=""></p><h4 id="PSCache"><a href="#PSCache" class="headerlink" title="PSCache"></a>PSCache</h4><ul><li>PreparedStatement Cache 【准备语句缓存】</li><li>就要从 MySQL 的 SQL 执⾏行行过程来讲</li></ul><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-01-13.png" style="zoom: 90%;" /><p><strong>名词解释</strong></p><ol><li><p>连接器【进⾏行行数据库连接，⽤用户名密码验证】</p></li><li><p>查询缓存【key-value， key 是 SQL， value 就是结果集】</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testOnBorrow</span>: <span class="string">false</span></span><br><span class="line"><span class="attr">testOnReturn</span>: <span class="string">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements</span>: <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">query_cache_type</span> : <span class="string">DEMAND //默认的SQL都不不使⽤用查询缓存</span></span><br><span class="line"><span class="meta">mysql&gt;</span> <span class="string">select SQL_CACHE * from student where id=1; //声明使⽤用</span></span><br></pre></td></tr></table></figure><ol start="3"><li>分析器</li></ol><ul><li>词法分析【SQL的关键词进⾏行行识别】</li><li>语法分析【对语法进⾏行行分析 “use near”】</li></ul><ol start="4"><li><p>优化器器【决定我们SQL使⽤用那个⼈人索引】</p></li><li><p>执⾏器【会判断你是否对这个表有查询/更更新权限】</p></li><li><p>存储引擎【获取数据的具体⽂文件地址】</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下数据库连接池&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-15_04-35-37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;平时在使用 SpringBoot 框架结合 MyBatis 的时候有注意到数据库连接池吗？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;还真的没有过呀，还不是因为平时做的练习项目都是只注重使用而忽略了其更深层次的原理。&lt;/p&gt;
&lt;p&gt;哎！拖欠的知识终究是要花时间补回来的，顺便回顾一下吧！&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="druid" scheme="https://codeyg.top/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>实践一下--SpringBoot配置</title>
    <link href="https://codeyg.top/2021/08/06/%E5%AE%9E%E8%B7%B5--SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://codeyg.top/2021/08/06/%E5%AE%9E%E8%B7%B5--SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2021-08-06T13:58:58.000Z</published>
    <updated>2021-08-07T15:38:26.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实践是检验真理的唯一标准</p></blockquote><p><strong>本篇着重介绍一下 SpringBoot配置</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-07_19-33-18.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>首先我们得知道为什么要使用SpringBoot，其优点有哪些？</font></p><p>比如说：</p><ol><li>简化依赖【在 pom 文件中添加相关依赖即可】</li><li><font color=#008000>简化配置【一个普通的类，只需要 @Bean 注解即可成为一个 Bean 让 Spring 去管理】（√）</font></li><li>简化部署【Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包】</li><li>简化监控【可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数】</li></ol><a id="more"></a><h3 id="SpringBoot-默认配置文件"><a href="#SpringBoot-默认配置文件" class="headerlink" title="SpringBoot 默认配置文件"></a>SpringBoot 默认配置文件</h3><ul><li>SpringBoot使用默认的全局的配置文件：<code>application.properties</code>/<code>application.yml</code></li><li>配置文件名固定是是<code>application</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">application.properties</span><br><span class="line">语法结构: key=value</span><br><span class="line"></span><br><span class="line">application.yml</span><br><span class="line">语法结构: key：空格 value</span><br></pre></td></tr></table></figure><blockquote><p>个人更加的偏向于使用 yml 的形式，注意 key 后面的<font color=#008000>空格</font></p></blockquote><br/><h3 id="SpringBoot-配置文件的位置"><a href="#SpringBoot-配置文件的位置" class="headerlink" title="SpringBoot 配置文件的位置"></a>SpringBoot 配置文件的位置</h3><p>springboot启动会扫描以下位置的<code>application.properties</code>/<code>application.yml</code>文件作为其默认配置文件：</p><ul><li>优先级1：项目路径下的 config 文件夹配置文件</li><li>优先级2：项目路径下配置文件</li><li>优先级3：资源路径下的 config 文件夹配置文件</li><li><font color=#008000>优先级4：资源路径下配置文件（√）</font></li></ul><p><strong>注意</strong></p><ul><li>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</li><li>当两个配置文件同时存在的时候，相同的配置会优先加载<code>properties</code>配置文件，多余的配置的会互补配置；</li></ul><br/><h3 id="SpringBoot-多环境切换"><a href="#SpringBoot-多环境切换" class="headerlink" title="SpringBoot 多环境切换"></a>SpringBoot 多环境切换</h3><p>实际开发中，我们针对不同的应用场景，可能有不同的环境，不同的配置文件</p><p><code>profile</code>就是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p><p>涉及两种实现方式：</p><h4 id="方式一：多配置文件"><a href="#方式一：多配置文件" class="headerlink" title="方式一：多配置文件"></a>方式一：多配置文件</h4><p>我们再编写配置文件时，文件名可以是<code>application-{profile}.properties/yml</code>，用来指定多个不同的环境版本；</p><p><code>application.yml</code> 【代表主环境】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># /src/main/resources/application.yml</span><br><span class="line"># 默认使用配置</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code> 【代表开发环境配置】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /src/main/resources/application-dev.yml</span><br><span class="line">server:</span><br><span class="line">  #  端口号</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure><p><code>application-test.yml</code> 【代表测试环境配置】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /src/main/resources/application-test.yml</span><br><span class="line">server:</span><br><span class="line">  #  端口号</span><br><span class="line">  port: 8002</span><br></pre></td></tr></table></figure><p>如果未加指定，它默认使用<code>application.yml</code>主配置文件；</p><h4 id="方式二：一个配置文件【yaml的多文档块，不建议】"><a href="#方式二：一个配置文件【yaml的多文档块，不建议】" class="headerlink" title="方式二：一个配置文件【yaml的多文档块，不建议】"></a>方式二：一个配置文件【yaml的多文档块，不建议】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:  </span><br><span class="line">port: 8080</span><br><span class="line">#选择要激活那个环境块</span><br><span class="line">spring:  </span><br><span class="line">profiles:    </span><br><span class="line">active: prod</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:  </span><br><span class="line">port: 8081</span><br><span class="line">spring:  </span><br><span class="line">profiles: dev #配置环境名称dev</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:  </span><br><span class="line">port: 8082</span><br><span class="line">spring:  </span><br><span class="line">profiles: prod  #配置环境名称prod</span><br></pre></td></tr></table></figure><br/><h3 id="SpringBoot-加载指定的配置文件"><a href="#SpringBoot-加载指定的配置文件" class="headerlink" title="SpringBoot 加载指定的配置文件"></a>SpringBoot 加载指定的配置文件</h3><p>通过<code>@configurationProperties</code>注解默认从全局配置文件中获取值</p><ul><li>此时配置文件名必须为<code>application</code>才能被spring认出</li><li>其实我们可以通过<code>@PropertySource</code>指定加载的配置文件，可以自定义文件名</li></ul><br/><h3 id="SpringBoot-配置类"><a href="#SpringBoot-配置类" class="headerlink" title="SpringBoot 配置类"></a>SpringBoot 配置类</h3><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>Spring Boot 推荐使用 java 配置完全代替 XML 配置，java 配置是通过 @Configration 和 @Bean 注解实现的。二者作用如下：</p><ul><li>@Configration 注解：声明当前类是一个配置类，相当于 Spring 中的一个 XML 文件</li><li>@ComponentScan：作用就是根据定义的扫描路径，把符合扫描规则的类装配到spring容器中</li><li>@Bean 注解：作用在方法上，声明当前方法的返回值是一个 Bean</li></ul><p>@Bean 和 @Autowired 做了两件完全不同的事情：</p><ol><li>@Bean 告诉 Spring：“这是这个类的一个实例，请保留它，并在我请求时将它还给我”。</li><li>@Autowired 说：“请给我一个这个类的实例，例如，一个我之前用@Bean注释创建的实例”。</li></ol><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ol><li>@ConditionalOnBean：当容器里有指定Bean的条件下</li><li>@ConditionalOnMissingBean：当容器里没有指定 Bean 的情况下</li><li>@ConditionalOnMissingClass：当容器里没有指定类的情况下、</li><li>@ConditionalOnProperty：指定的属性是否有指定的值</li><li>@EnableConfigurationProperties的作用: 使 @ConfigurationProperties 注解的类生效。</li><li>@Scope(“prototype”) 表示每次获得 bean 都会生成一个新的对象【多例】</li><li>@AutoConfigureAfter 在加载配置的类之后再加载当前类</li></ol><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p><strong>涉及注解：</strong></p><ul><li>@EnableConfigurationProperties()【启用配置属性，指定配置类的路径或者具体类】</li><li>@ConfigurationProperties()【配置属性，去寻找配置文件】</li><li>@Configuration()【配置，声明这是一个配置类】</li><li>@Component()【组件，声明这是一个组件】</li><li>@Data()【lombok插件，生成 get 、set】</li></ul><p><strong>一、引入 SpringBoot properties 内容处理器依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>二、编写配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mall.thread"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfigProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer coreSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxSize;</span><br><span class="line">    <span class="keyword">private</span> Integer keepAliveTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、properties 文件中可以联想到</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#配置线程池</span><br><span class="line">mall.thread.coreSize=20</span><br><span class="line">mall.thread.maxSize=200</span><br><span class="line">mall.thread.keepAliveTime=10</span><br></pre></td></tr></table></figure><p><strong>四、在类中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ThreadPoolConfigProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyThreadConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">threadPoolExecutor</span><span class="params">(ThreadPoolConfigProperties pool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                pool.getCoreSize(),</span><br><span class="line">                pool.getMaxSize(),</span><br><span class="line">                pool.getKeepAliveTime(),</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100000</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实践是检验真理的唯一标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 SpringBoot配置&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-08-07_19-33-18.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;首先我们得知道为什么要使用SpringBoot，其优点有哪些？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简化依赖【在 pom 文件中添加相关依赖即可】&lt;/li&gt;
&lt;li&gt;&lt;font color=#008000&gt;简化配置【一个普通的类，只需要 @Bean 注解即可成为一个 Bean 让 Spring 去管理】（√）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;简化部署【Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包】&lt;/li&gt;
&lt;li&gt;简化监控【可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数】&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="实践篇" scheme="https://codeyg.top/categories/%E5%AE%9E%E8%B7%B5%E7%AF%87/"/>
    
    
    <category term="SpringBoot" scheme="https://codeyg.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--MySQL索引</title>
    <link href="https://codeyg.top/2021/08/05/%E9%9D%A2%E8%AF%95--MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>https://codeyg.top/2021/08/05/%E9%9D%A2%E8%AF%95--MySQL%E7%B4%A2%E5%BC%95/</id>
    <published>2021-08-05T13:58:58.000Z</published>
    <updated>2021-08-05T13:35:01.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下基于 MySQL 索引</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mysql_index.jpg" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>面试的时候经常会问到如何在大量数据查询的时候提示效率，能想到的首先一定是建立索引，那具体说说？</font></p><p><font color=#FF8C00>索引是对数据库表中一列或多列的值进行排序的一种结构。</font></p><p><font color=#FF8C00>MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</font></p><a id="more"></a><h3 id="MySQL-索引介绍"><a href="#MySQL-索引介绍" class="headerlink" title="MySQL 索引介绍"></a>MySQL 索引介绍</h3><p>索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有 MySQL 列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。</p><p>创建索引时，需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。</p><p>说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。</p><hr><h3 id="MySQL-索引的优缺点"><a href="#MySQL-索引的优缺点" class="headerlink" title="MySQL 索引的优缺点"></a>MySQL 索引的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><font color=#008000>索引大大减小了服务器需要扫描的数据量，从而大大加快数据的检索速度，这也是创建索引的最主要的原因。</font></li><li><font color=#FF8C00>索引可以帮助服务器避免排序和创建临时表</font></li><li><font color=#FF8C00>索引可以将随机IO变成顺序IO</font></li><li>索引对于 InnoDB（对索引支持行级锁）非常重要，因为它可以让查询锁更少的元组，提高了表访问并发性</li><li>关于 InnoDB、索引和锁：InnoDB 在二级索引上使用共享锁（读锁），但访问主键索引需要排他锁（写锁）</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>创建索引和维护索引要<font color=#FF8C00>耗费时间</font>，这种时间随着数据量的增加而增加</li><li>索引需要占<font color=#FF8C00>物理空间</font>，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用 的空间会更大</li><li>对表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的<font color=#FF8C00>维护速度</font></li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li><li>对于非常小的表，大部分情况下简单的全表扫描更高效；</li></ul><hr><h3 id="MySQL-索引存储结构"><a href="#MySQL-索引存储结构" class="headerlink" title="MySQL 索引存储结构"></a>MySQL 索引存储结构</h3><p><a href="https://codeyg.top/2021/06/13/%E9%9D%A2%E8%AF%95--HashMap%E7%BA%A2%E9%BB%91%E6%A0%91/"><strong>索引结构</strong></a></p><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><p><strong>B树的特征：</strong></p><ul><li><strong>关键字集合分布在整颗树中；</strong></li><li>任何一个关键字出现且只出现在一个结点中；</li><li><strong>搜索有可能在非叶子结点结束；</strong></li><li>其搜索性能等价于在关键字全集内做一次二分查找；</li><li>自动层次控制；</li></ul><h4 id="B-Tree索引-1"><a href="#B-Tree索引-1" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h4><p><strong>B+树的特征：</strong></p><ul><li><strong>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</strong></li><li><strong>不可能在非叶子结点命中；</strong></li><li><strong>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</strong></li><li>每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</li><li>更适合文件索引系统；</li></ul><h4 id="B-Tree索引-2"><a href="#B-Tree索引-2" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><p>InnoDB 使用的是B+Tree。</p><p>B+Tree：每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</p><p>B-Tree 通常意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同，很适合查找范围数据。</p><p>B-Tree 可以对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及不以通配符开始的 LIKE 使用索引。</p><h4 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h4><p>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。</p><p><font color=#008000>Hash 索引仅仅能满足”=”,“IN”和”&lt;=&gt;”查询，不能使用范围查询。</font>也不支持任何范围查询，例如WHERE price &gt; 100。<br>　　<br>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和 Hash 运算前完全一样。</p><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><p><font color=#008000>索引是占据物理空间的，在不同的存储引擎中，索引存在的文件也不同。存储引擎是基于表的。</font></p><p><strong>存储引擎为MyISAM：</strong></p><ul><li><p>*.frm：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等</p></li><li><p>*.MYD：MyISAM DATA，用于存储 MyISAM 表的数据</p></li><li><p>*.MYI：MyISAM INDEX，用于存储 MyISAM 表的索引相关信息</p></li></ul><p><strong>存储引擎为InnoDB：</strong></p><ul><li>*.frm：与表相关的元数据信息都存放在 frm 文件，包括表结构的定义信息等</li><li>*.ibd：InnoDB DATA，表数据和索引的文件。该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据</li></ul><hr><h3 id="MySQL-索引分类"><a href="#MySQL-索引分类" class="headerlink" title="MySQL 索引分类"></a>MySQL 索引分类</h3><p>MySQL 的索引有两种分类方式：逻辑分类和物理分类。</p><h4 id="逻辑分类"><a href="#逻辑分类" class="headerlink" title="逻辑分类"></a>逻辑分类</h4><h5 id="按功能划分"><a href="#按功能划分" class="headerlink" title="按功能划分"></a>按功能划分</h5><ul><li>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</li><li>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li><li>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</li><li>全文索引：它查找的是文本中的关键词，主要用于全文检索。（篇幅较长，下文有独立主题说明）</li></ul><h5 id="按列数划分"><a href="#按列数划分" class="headerlink" title="按列数划分"></a>按列数划分</h5><ul><li>单例索引：一个索引只包含一个列，一个表可以有多个单例索引。</li><li>组合索引：一个组合索引包含两个或两个以上的列。查询的时候遵循 mysql 组合索引的 “最左前缀”原则，即使用 where 时条件要按照建立索引的时候字段的排列方式放置索引才会生效。</li></ul><h4 id="物理分类"><a href="#物理分类" class="headerlink" title="物理分类"></a>物理分类</h4><h5 id="聚簇索引和非聚簇索引（辅助索引或二级索引）"><a href="#聚簇索引和非聚簇索引（辅助索引或二级索引）" class="headerlink" title="聚簇索引和非聚簇索引（辅助索引或二级索引）"></a>聚簇索引和非聚簇索引（辅助索引或二级索引）</h5><blockquote><p>聚簇是为了提高某个属性(或属性组)的查询速度，把这个或这些属性(称为聚簇码)上具有相同值的元组集中存放在连续的物理块。</p></blockquote><font color=#008000>聚簇索引（clustered index）不是单独的一种索引类型，而是一种数据存储方式。这种存储方式是依靠B+树来实现的，根据表的主键构造一棵B+树且B+树叶子节点存放的都是表的行记录数据时，方可称该主键索引为聚簇索引。聚簇索引也可理解为将数据存储与索引放到了一块，找到索引也就找到了数据。</font><p><font color=#FF8C00>非聚簇索引：数据和索引是分开的，B+树叶子节点存放的不是数据表的行记录。</font></p><p><strong>虽然 InnoDB 和 MyISAM 存储引擎都默认使用 B+ 树结构存储索引，但是只有 InnoDB 的主键索引才是聚簇索引，InnoDB 中的辅助索引以及 MyISAM 使用的都是非聚簇索引。每张表最多只能拥有一个聚簇索引。</strong></p><h5 id="聚簇索引优缺点"><a href="#聚簇索引优缺点" class="headerlink" title="聚簇索引优缺点"></a>聚簇索引优缺点</h5><p><strong>优点：</strong></p><ul><li>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的排序查找和范围查找速度非常快</li></ul><p><strong>缺点：</strong></p><ul><li>插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键（主键列不要选没有意义的自增列，选经常查询的条件列才好，不然无法体现其主键索引性能）</li><li>更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</li><li>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</li></ul><hr><h3 id="InnoDB-和-MyISAM-索引实现"><a href="#InnoDB-和-MyISAM-索引实现" class="headerlink" title="InnoDB 和 MyISAM 索引实现"></a>InnoDB 和 MyISAM 索引实现</h3><h4 id="InnoDB-索引实现"><a href="#InnoDB-索引实现" class="headerlink" title="InnoDB 索引实现"></a>InnoDB 索引实现</h4><h5 id="聚簇索引（主键索引）"><a href="#聚簇索引（主键索引）" class="headerlink" title="聚簇索引（主键索引）"></a>聚簇索引（主键索引）</h5><ol><li>InnoDB使用B+TREE存储数据，除了主键索引为聚簇索引，其它索引均为非聚簇索引。</li><li>一个表中只能存在一个聚簇索引（主键索引），但可以存在多个非聚簇索引。</li><li>InnoDB表的索引和数据是存储在一起的，<code>.idb</code>表数据和索引的文件</li></ol><p>叶子节点包含了完整的数据记录，这就是聚簇索引。因为InnoDB的数据文件（.idb）按主键聚集，所以InnoDB必须有主键（MyISAM可以没有），如果没有显示指定主键，则选取首个为唯一且非空的列作为主键索引，如果还没具备，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p><h5 id="非聚簇索引（辅助索引或二级索引）"><a href="#非聚簇索引（辅助索引或二级索引）" class="headerlink" title="非聚簇索引（辅助索引或二级索引）"></a>非聚簇索引（辅助索引或二级索引）</h5><p>在聚簇索引之外创建的索引（不是根据主键创建的）称之为辅助索引，辅助索引访问数据总是需要二次查找。辅助索引叶子节点存储的不再是行数据记录，而是主键值。首先通过辅助索引找到主键值，然后到主键索引树中通过主键值找到数据行。</p><h5 id="拓展：InnoDB-索引优化"><a href="#拓展：InnoDB-索引优化" class="headerlink" title="拓展：InnoDB 索引优化"></a>拓展：InnoDB 索引优化</h5><ul><li>InnoDB 中主键不宜定义太大，因为辅助索引也会包含主键列，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。</li><li>InnoDB 中尽量不使用非单调字段作主键（不使用多列），因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</li></ul><h4 id="MyISAM-索引实现"><a href="#MyISAM-索引实现" class="headerlink" title="MyISAM 索引实现"></a>MyISAM 索引实现</h4><ol><li>MyISAM也使用B+Tree作为索引结构，但具体实现方式却与InnoDB截然不同。MyISAM使用的都是非聚簇索引。</li><li>MyISAM表的索引和数据是分开存储的，<code>.MYD</code>表数据文件 <code>.MYI</code>表索引文件</li></ol><h5 id="MyISAM-主键索引"><a href="#MyISAM-主键索引" class="headerlink" title="MyISAM 主键索引"></a>MyISAM 主键索引</h5><p>叶子节点的存放的是数据记录的地址。也就是说索引和行数据记录是没有保存在一起的，所以MyISAM的主键索引是非聚簇索引。</p><h5 id="MyISAM-辅助索引"><a href="#MyISAM-辅助索引" class="headerlink" title="MyISAM 辅助索引"></a>MyISAM 辅助索引</h5><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。 MyISAM辅助索引也是非聚簇索引。</p><hr><h4 id="InnoDB-和-MyISAM-的索引检索过程"><a href="#InnoDB-和-MyISAM-的索引检索过程" class="headerlink" title="InnoDB 和 MyISAM 的索引检索过程"></a>InnoDB 和 MyISAM 的索引检索过程</h4><p><font color=#008000>InnoDB辅助索引的访问需要两次索引查找，第一次从辅助索引树找到主键值，第二次根据主键值到主键索引树中找到对应的行数据。</font></p><p><font color=#FF8C00>MyISM使用的是非聚簇索引，表数据存储在独立的地方，这两棵（主键和辅助键）B+树的叶子节点都使用一个地址指向真正的表数据。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</font></p><h4 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h4><ul><li>聚簇索引的叶子节点存放的是数据行（主键值也是行内数据），支持覆盖索引；而非聚簇索引的叶子节点存放的是主键值或指向数据行的指针。</li><li>由于叶子节点(数据页)只能按照一棵B+树排序，故一张表只能有一个聚簇索引。辅助索引的存在不影响聚簇索引中数据的组织，所以一张表可以有多个辅助索引。</li></ul><h3 id="MySQL-索引失效的几种情况"><a href="#MySQL-索引失效的几种情况" class="headerlink" title="MySQL 索引失效的几种情况"></a>MySQL 索引失效的几种情况</h3><p><strong><font color=#008000>1、前导模糊查询不能利用索引(like ‘%XX’或者like ‘%XX%’)</font></strong></p><p><strong><font color=#008000>2、如果是组合索引的话，如果不按照索引的顺序进行查找，比如直接使用第三个位置上的索引而忽略第一二个位置上的索引时，则会进行全表查询</font></strong></p><p><strong><font color=#008000>3、条件中有or</font></strong></p><p><strong><font color=#008000>4、索引无法存储null值，所以where的判断条件如果对字段进行了null值判断，将导致数据库放弃索引而进行全表查询</font></strong></p><p><strong><font color=#008000>5、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</font></strong></p><p><strong><font color=#008000>6、in 和 not in 也要慎用，否则会导致全表扫描</font></strong></p><p><strong><font color=#008000>7、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</font></strong></p><p><strong><font color=#008000>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</font></strong></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下基于 MySQL 索引&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mysql_index.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;面试的时候经常会问到如何在大量数据查询的时候提示效率，能想到的首先一定是建立索引，那具体说说？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF8C00&gt;索引是对数据库表中一列或多列的值进行排序的一种结构。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF8C00&gt;MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高MySQL的检索速度。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="MySQL" scheme="https://codeyg.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Thread Pool</title>
    <link href="https://codeyg.top/2021/07/27/%E9%9D%A2%E8%AF%95--%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://codeyg.top/2021/07/27/%E9%9D%A2%E8%AF%95--%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2021-07-27T13:58:58.000Z</published>
    <updated>2021-08-05T13:20:49.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Thread Pool</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_00-48-33.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>什么是线程池？</font></p><p>线程池是用来放置线程的池子。嗯，大概是这么回事吧！</p><a id="more"></a><h4 id="关于线程池"><a href="#关于线程池" class="headerlink" title="关于线程池"></a>关于线程池</h4><p>线程池（ThreadPool）是一种基于池化思想管理和使用线程的机制。它是将多个线程预先存储在一个“池子”内，当有任务出现时可以避免重新创建和销毁线程所带来性能开销，只需要从“池子”内取出相应的线程执行对应的任务即可。</p><p><strong>里巴巴在其《Java开发手册》中也强制规定：线程资源必须通过线程池提供，不允许在应用中自行显式创建线程</strong></p><h4 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h4><ol><li><p>降低资源消耗【通过重复利用已创建的线程去降低线程的创建和销毁】</p></li><li><p>提高响应速度【当任务达到时，任务可以不需要等到线程创建就能立即执行，重复利用线程】</p></li></ol><h4 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h4><ul><li>线程池是为突然大量爆发的线程设计的，通过有限的几个固定线程为大量的操作服务，减少了创建和销毁线程所需的时间，从而提高效率。</li><li>如果一个线程的时间非常长，就没必要使用线程池了，况且我们还不能控制线程池中线程的开始、挂起、和中止。</li></ul><h4 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h4><p>线程池的创建方法总共有 7 种，但总体来说可分为 2 类：</p><ul><li>一类是通过 <code>ThreadPoolExecutor</code> 创建的线程池；</li><li>另一个类是通过 <code>Executors</code> 创建的线程池。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_01-02-50.png" alt=""></p><p>线程池的创建方式总共包含以下 7 种（其中 6 种是通过 <code>Executors</code> 创建的，1 种是通过 <code>ThreadPoolExecutor</code> 创建的）：</p><ol><li><code>Executors.newFixedThreadPool</code>：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待；</li><li><code>Executors.newCachedThreadPool</code>：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；</li><li><code>Executors.newSingleThreadExecutor</code>：创建单个线程数的线程池，它可以保证先进先出的执行顺序；</li><li><code>Executors.newScheduledThreadPool</code>：创建一个可以执行延迟任务的线程池；</li><li><code>Executors.newSingleThreadScheduledExecutor</code>：创建一个单线程的可以执行延迟任务的线程池；</li><li><code>Executors.newWorkStealingPool</code>：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</li><li><strong><code>ThreadPoolExecutor</code>：最原始的创建线程池的方式，它包含了 7 个参数可供设置，重点介绍</strong>。</li></ol><h4 id="线程池内部原理"><a href="#线程池内部原理" class="headerlink" title="线程池内部原理"></a>线程池内部原理</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_01-40-35.png" alt=""></p><hr><h4 id="线程池工作流程"><a href="#线程池工作流程" class="headerlink" title="线程池工作流程"></a>线程池工作流程</h4><p><strong>1、当execute方法提交一个任务时，如果线程池中线程数小于corePoolSize,那么不管线程池中是否有空闲的线程，都会创建一个新的线程来执行任务。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-03-32.png" alt=""></p><p><strong>2、当execute方法提交一个任务时，线程池中的线程数已经达到了corePoolSize,且此时没有空闲的线程，那么则会将任务存储到workQueue中。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-19-18.png" alt=""></p><p><strong>3、如果execute提交任务时线程池中的线程数已经到达了corePoolSize,并且workQueue已满，那么则会创建新的线程来执行任务，但总线程数应该小于maximumPoolSize。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-21-20.png" alt=""></p><p><strong>4、如果线程池中的线程执行完了当前的任务，则会尝试从workQueue中取出第一个任务来执行。如果workQueue为空则会阻塞线程。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-23-56.png" alt=""></p><p><strong>5、如果execute提交任务时，线程池中的线程数达到了maximumPoolSize，且workQueue已满，此时会执行拒绝策略来拒绝接受任务。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-30-14.png" alt=""></p><p><strong>6、如果线程池中的线程数超过了corePoolSize，那么空闲时间超过keepAliveTime的线程会被销毁，但程池中线程个数会保持为corePoolSize。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-41-49.png" alt=""></p><p><strong>7、如果线程池存在空闲的线程，并且设置了allowCoreThreadTimeOut为true。那么空闲时间超过keepAliveTime的线程都会被销毁。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_02-41-33.png" alt=""></p><hr><h4 id="线程池七个参数"><a href="#线程池七个参数" class="headerlink" title="线程池七个参数"></a>线程池七个参数</h4><p><strong>分别为：</strong></p><ol><li><p><strong>corePoolSize【核心线程数】</strong></p><p>线程池维护的最小线程数量，核心线程创建后不会被回收。</p></li><li><p><strong>maximumPoolSize【最大线程数】</strong></p><p>线程池允许创建的最大线程数量。</p></li><li><p><strong>keepAliveTime【空闲线程存活时间】</strong></p><p>当一个可被回收的线程的空闲时间大于keepAliveTime，就会被回收。</p><p>可被回收的线程：</p><ol><li>设置 allowCoreThreadTimeout=true 的核心线程。</li><li>大于核心线程数的线程（非核心线程）。</li></ol></li><li><p><strong>unit【时间单位】</strong></p><p>keepAliveTime的时间单位，常用【 TimeUnit.MILLISECONDS  毫秒 】</p></li><li><p><strong>workQueue【工作队列】</strong></p><p>存放待执行任务的队列。核心线程数 &lt; 提交的任务数 &lt; 最大线程数</p><p>它仅仅用来存放被execute()方法提交的 Runnable 任务。</p></li><li><p><strong>threadFactory【线程工厂】</strong></p><p>创建线程的工厂，可以设定线程名、线程编号。</p></li><li><p><strong>handler【拒绝策略】</strong></p><p>当线程池线程数已满，并且工作队列达到限制。需要实现 RejectedExecutionHandler 接口。</p></li></ol><h4 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(index + <span class="string">" 被执行,线程名:"</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Thread Pool&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-28_00-48-33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;什么是线程池？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;线程池是用来放置线程的池子。嗯，大概是这么回事吧！&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="java" scheme="https://codeyg.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--MyBatis</title>
    <link href="https://codeyg.top/2021/07/23/%E9%9D%A2%E8%AF%95--MyBatis/"/>
    <id>https://codeyg.top/2021/07/23/%E9%9D%A2%E8%AF%95--MyBatis/</id>
    <published>2021-07-23T00:58:58.000Z</published>
    <updated>2021-08-05T13:20:43.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 MyBatis</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-logo.png" alt=""></p><p><strong>写在前面</strong></p><p>用久了 MyBatis 的逆向工程，原生的写法有点生疏了，趁着想起来赶紧复习一下！</p><a id="more"></a><h2 id="关于-MyBatis"><a href="#关于-MyBatis" class="headerlink" title="关于 MyBatis"></a>关于 MyBatis</h2><h3 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h3><p>Mybatis是一个半自动化的持久层框架，一般我们都分为三层，控制层，业务层，持久层，所谓的持久层就是专门负责写入数据库的层次。</p><h3 id="MyBatis-为什么说他是半自动化？"><a href="#MyBatis-为什么说他是半自动化？" class="headerlink" title="MyBatis 为什么说他是半自动化？"></a>MyBatis 为什么说他是半自动化？</h3><p>Hibernate 和 JPA 我们可以称为全自动化，所谓的全自动化就是他给我们直接省去了大量的 jdbc 代码，就连sql 语句我们都不用写，所以我们称他为全自动化，而Mybatis之所以称为半自动化就是虽然帮我省去了 jdbc 的一些重复代码，但是 sql 语句仍然需要我们自己写。</p><h3 id="MyBatis-的优点是什么？"><a href="#MyBatis-的优点是什么？" class="headerlink" title="MyBatis 的优点是什么？"></a>MyBatis 的优点是什么？</h3><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架；</p><p><strong>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集；</strong></p><p>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和 Java 的 POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录；</p><p><strong>并且mybatis还给我们提供了很多第三方插件（分页插件 / 逆向工程）；</strong></p><h3 id="MyBatis有哪些缺点？"><a href="#MyBatis有哪些缺点？" class="headerlink" title="MyBatis有哪些缺点？"></a>MyBatis有哪些缺点？</h3><ol><li>编写 SQL 语句时工作量很大，尤其是字段多、关联表多时，更是如此。</li><li>SQL 语句依赖于数据库，导致数据库移植性差，不能更换数据库。</li><li>框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li><li>二级缓存机制不佳。</li></ol><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>面对这些持久化框架我们应该如何来进行选择呢？</p><p>选型上都会拿 MyBatis 和 JPA 两个持久层框架一起使用，JPA 用来简单查询和新增修改是非常方便的，并且支持一对多关系。然后复杂的查询语句用 MyBatis 来完成。、</p><br/><h2 id="MyBatis-常用标签和注解"><a href="#MyBatis-常用标签和注解" class="headerlink" title="MyBatis 常用标签和注解"></a>MyBatis 常用标签和注解</h2><h3 id="了解一下"><a href="#了解一下" class="headerlink" title="了解一下"></a>了解一下</h3><p>MyBatis的常用标签有很多，比如</p><p><code>&lt;sql id=&quot;&quot;&gt;</code>：预定义可以复用的sql语句</p><p><code>&lt;include refid=&quot;&quot;&gt;</code>：根据id引用定义的sql语句</p><p><code>&lt;trim&gt;</code>：空白补全，配合<code>&lt;if&gt;</code>标签使用</p><p><code>&lt;if test=&quot;&quot;&gt;</code>：条件判断，该语句返回的true，则该标签内的语句就生效</p><p><code>&lt;bind name=&quot;&quot; value=&quot;&quot;&gt;</code>：创建一个变量，并且可以绑定到上下文</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.entity.User"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="顶级标签"><a href="#顶级标签" class="headerlink" title="顶级标签"></a>顶级标签</h3><h4 id="1、sql"><a href="#1、sql" class="headerlink" title="1、sql"></a>1、sql</h4><p><strong>作用：【可被其他语句引用的可重用语句块】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"valid"</span>&gt;</span> where id = 1 <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 引用 sql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">'queryUser'</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from user </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">'valid'</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、insert"><a href="#2、insert" class="headerlink" title="2、insert"></a>2、insert</h4><p><strong>作用：【映射插入语句】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.entity.User"</span> &gt;</span></span><br><span class="line">    insert into user (id, name)</span><br><span class="line">    values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、update"><a href="#3、update" class="headerlink" title="3、update"></a>3、update</h4><p><strong>作用：【映射更新语句】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">  update User set</span><br><span class="line">    name = #&#123;name&#125;,</span><br><span class="line">    sex= #&#123;sex&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、delete"><a href="#4、delete" class="headerlink" title="4、delete"></a>4、delete</h4><p><strong>作用：【映射删除语句】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span><br><span class="line">  delete from User where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态sql标签"><a href="#动态sql标签" class="headerlink" title="动态sql标签"></a>动态sql标签</h3><p><font color=#008000><strong>常用标签：&lt; if &gt;、&lt; where &gt;、&lt; trim &gt;、&lt; foreach &gt;</strong></font></p><h4 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h4><p><strong>作用：【where 语句的条件动态拼接】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  SELECT * FROM User</span><br><span class="line">  WHERE valid = 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!= null"</span>&gt;</span></span><br><span class="line">    AND name like #&#123;name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、choose-when-otherwise"><a href="#2、choose-when-otherwise" class="headerlink" title="2、choose (when, otherwise)"></a>2、choose (when, otherwise)</h4><p><strong>作用：【多条件分支，相当于Java中的switch语句】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  SELECT * FROM User WHERE age = 26</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name!= null"</span>&gt;</span></span><br><span class="line">      AND name like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sex!= null "</span>&gt;</span></span><br><span class="line">      AND sex like #&#123;sex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND valid = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>choose 有点像 Java 中的 switch 语句。choose执行过程中按顺序判断 when 中的条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的 sql。</p><h4 id="3、trim-where-set"><a href="#3、trim-where-set" class="headerlink" title="3、trim (where, set)"></a>3、trim (where, set)</h4><p><strong>作用：【用于添加 SQL 语句的前缀或者后缀】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND | OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- set 元素会动态前置 SET 关键字，同时也会删掉无关的逗号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以可利用 &lt; trim &gt; 来代替 &lt; where &gt; 的功能</p><ul><li><p>prefix：指定sql语句拼接的前缀</p></li><li><p>subfix：指定sql语句拼接的后缀</p></li><li><p>prefixOverrides：指定sql语句前面要去除的关键字或字符，如AND 逗号 括号等</p></li><li><p>suffixOverrides：指定sql语句后面要去除的关键字或字符</p></li></ul><h4 id="4、foreach"><a href="#4、foreach" class="headerlink" title="4、foreach"></a>4、foreach</h4><p><strong>作用：【用于在 SQL 语句中迭代一个集合，可用在构建 in 条件中】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM User</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>collection=”要遍历的集合” </li><li>item = “可以在元素体内使用的集合项”</li><li>index = “索引”</li><li>open = “开始字符串”</li><li>separator = “分隔符”</li><li>close = “结束字符串”</li></ul><h4 id="5、bind"><a href="#5、bind" class="headerlink" title="5、bind"></a>5、bind</h4><p><strong>作用：【标签表示在表达式以外创建一个变量，并将其绑定到当前的上下文】</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM User</span><br><span class="line">  WHERE name LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br/><h2 id="MyBatis-使用"><a href="#MyBatis-使用" class="headerlink" title="MyBatis 使用"></a>MyBatis 使用</h2><h3 id="1、MyBatis-中的-resultType-和-resultMap"><a href="#1、MyBatis-中的-resultType-和-resultMap" class="headerlink" title="1、MyBatis 中的 resultType 和 resultMap"></a>1、MyBatis 中的 resultType 和 resultMap</h3><p>resultType 用于返回值只有一个字段的类型，resultMap 用于返回值有多个字段的类型。至于结果是 List 还是一个，则在 Mapper 中定义返回值是List还是单个。</p><p>使用 resultType：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span>  </span><br><span class="line">        SELECT count(*) FROM USER  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 resultMap：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.entity.Blog"</span> <span class="attr">id</span>=<span class="string">"BlogResult"</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"content"</span> <span class="attr">property</span>=<span class="string">"content"</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"owner"</span> <span class="attr">property</span>=<span class="string">"owner"</span>/&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"BlogResult"</span>&gt;</span>    </span><br><span class="line">   select * from t_blog where id = #&#123;id&#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、xml中的timestamp比较"><a href="#2、xml中的timestamp比较" class="headerlink" title="2、xml中的timestamp比较"></a>2、xml中的timestamp比较</h3><p><strong>转义字符表</strong></p><table><thead><tr><th>转义</th><th>符号</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td>&lt;</td></tr><tr><td><code>&amp;gt;</code></td><td>&gt;</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td></tr><tr><td><code>&amp;apos;</code></td><td>’</td></tr><tr><td><code>&amp;quot;</code></td><td>“</td></tr></tbody></table><h3 id="3、MyBatis-批量插入"><a href="#3、MyBatis-批量插入" class="headerlink" title="3、MyBatis 批量插入"></a>3、MyBatis 批量插入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertForeach"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">insert into user</span><br><span class="line">( id,name )</span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  (</span><br><span class="line">    #&#123;item.id&#125;,</span><br><span class="line">    #&#123;item.name&#125;</span><br><span class="line">  )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、MyBatis-传递多个参数"><a href="#4、MyBatis-传递多个参数" class="headerlink" title="4、MyBatis 传递多个参数"></a>4、MyBatis 传递多个参数</h3><h4 id="方法一-使用map接口传递参数"><a href="#方法一-使用map接口传递参数" class="headerlink" title="方法一:使用map接口传递参数"></a>方法一:使用map接口传递参数</h4><p>map是一个键值对应的集合，使用者要通过阅读它的键，才能明了其作用；其次，使用map不能限定其传递的数据类型，因此业务性质不强，可读性差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findRolesByMap</span><span class="params">(Map&lt;String, Object&gt; parameterMap)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRolesByMap"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法二-使用注解传递多个参数"><a href="#方法二-使用注解传递多个参数" class="headerlink" title="方法二:使用注解传递多个参数"></a>方法二:使用注解传递多个参数</h4><p>注解 @Param 可以通过它去定义映射器的参数名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findRolesByAnnotation</span><span class="params">(@Param(<span class="string">"roleName"</span>)</span> String rolename, @<span class="title">Param</span><span class="params">(<span class="string">"note"</span>)</span> String note)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRolesByAnnotation"</span> <span class="attr">resultType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法三-通过Java-Bean传递多个参数"><a href="#方法三-通过Java-Bean传递多个参数" class="headerlink" title="方法三:通过Java Bean传递多个参数"></a>方法三:通过Java Bean传递多个参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findRolesByBean</span><span class="params">(RoleParams roleParam)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRolesByBean"</span> <span class="attr">parameterType</span>=<span class="string">"com.entity.RoleParams"</span> <span class="attr">resultType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    select id, role_name as roleName, note from t_role where role_name like concat('%', #&#123;roleName&#125;, '%') and note like concat('%', #&#123;note&#125;, '%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法四-混合使用"><a href="#方法四-混合使用" class="headerlink" title="方法四:混合使用　"></a>方法四:混合使用　</h4><p>不指定 parameterType ，需要指定具体的属性。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findByMix</span><span class="params">(@Param(<span class="string">"params"</span>)</span> RoleParams roleParams, @<span class="title">Param</span><span class="params">(<span class="string">"page"</span>)</span> PageParam PageParam)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByMix"</span> <span class="attr">resultType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    select id, role_name as roleName, note from t_role</span><br><span class="line">    where role_name like concat('%', #&#123;params.roleName&#125;, '%') and note like concat('%', #&#123;params.note&#125;, '%') limit #&#123;page.start&#125;, #&#123;page.limit&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当 n≤5 时，使用 @Param 注解传递多个参数；</li><li>当 n＞5 时，建议使用 Java Bean 方式；</li></ul><h3 id="5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）"><a href="#5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）" class="headerlink" title="5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）"></a>5、数据库字段名和实体类属性名不一致的问题（驼峰匹配）</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>查询数据的时候，查不到 userName 的信息，原因：数据库的字段名是 user_name POJO中的属性名字是userName<br>两端不一致，造成mybatis无法填充对应的字段信息。修改方法：在sql语句中使用别名。</p><h4 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h4><p>开启驼峰匹配：相当于去掉数据库名字中的下划线，然后在与java中的属性名进行对应。</p><p>数据库中的 user_name 和 java 属性中的 userName 是一样的。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h4><p>resultType 类指定返回值的类型，这样 Mybatis 会帮我们自动映射属性，即只有当类的属性名和字段名相同时，才存在映射关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.entity.User"</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们属性名和字段名不同那么我们就需要用 resultMap 来重新映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">type</span>=<span class="string">"com.ariverh.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line">    select id,name as userName from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br/><h2 id="MyBatis缓存机制"><a href="#MyBatis缓存机制" class="headerlink" title="MyBatis缓存机制"></a>MyBatis缓存机制</h2><h3 id="了解一下-1"><a href="#了解一下-1" class="headerlink" title="了解一下"></a>了解一下</h3><p>缓存机制减轻数据库压力，提高数据库性能</p><p>mybatis 的缓存分为两级：一级缓存、二级缓存</p><p>namespace 指定的是对应的 mapper 接口</p><h3 id="一级缓存："><a href="#一级缓存：" class="headerlink" title="一级缓存："></a>一级缓存：</h3><p>一级缓存为 <code>sqlsesson</code> 缓存，缓存的数据只在 SqlSession 内有效。在操作数据库的时候需要先创建 SqlSession 会话对象，在对象中有一个 HashMap 用于存储缓存数据，此 HashMap 是当前会话对象私有的，别的 SqlSession 会话对象无法访问。</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-sql-session-01.jpg" style="zoom: 50%;" /><h4 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h4><p>第一次执行 select 完毕会将查到的数据写入 SqlSession 内的 HashMap 中缓存起来</p><p>第二次执行 select 会从缓存中查数据，如果 select 同传参数一样，那么就能从缓存中返回数据，不用去数据库了，从而提高了效率。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1、如果 SqlSession 执行了 DML 操作（insert、update、delete），并 commit 了，那么 mybatis 就会清空当前 SqlSession 缓存中的所有缓存数据，这样可以保证缓存中的存的数据永远和数据库中一致，避免出现差异</p><p>2、当一个 SqlSession 结束后那么他里面的一级缓存也就不存在了， mybatis 默认是开启一级缓存，不需要配置</p><p>3、 mybatis 的缓存是基于 [namespace:sql语句:参数] 来进行缓存的，意思就是， SqlSession 的 HashMap 存储缓存数据时，是使用 [namespace:sql:参数] 作为 key ，查询返回的语句作为 value 保存的</p><p><strong>4、一级缓存只在数据库会话内部共享。</strong></p><h3 id="二级缓存："><a href="#二级缓存：" class="headerlink" title="二级缓存："></a>二级缓存：</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>在上文中提到的一级缓存中，其最大的共享范围就是一个 SqlSession 内部，如果多个 SqlSession 之间需要共享缓存，则需要使用到二级缓存。</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-sql-session-02.png" style="zoom: 80%;" /><h4 id="具体流程-1"><a href="#具体流程-1" class="headerlink" title="具体流程"></a>具体流程</h4><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><br/><h2 id="MyBatis-面试一下"><a href="#MyBatis-面试一下" class="headerlink" title="MyBatis 面试一下"></a>MyBatis 面试一下</h2><h3 id="MyBatis-中-和-区别"><a href="#MyBatis-中-和-区别" class="headerlink" title="MyBatis 中#{}和${}区别"></a>MyBatis 中#{}和${}区别</h3><p><strong>#{}</strong> 是预编译处理，像传进来的数据会加个” “（#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号）</p><p><strong>${}</strong> 就是字符串替换。直接替换掉占位符。$方式一般用于传入数据库对象。</p><p>所以为了防止 SQL 注入，能用 <strong>#{}</strong> 的不要去用 <strong>${}</strong></p><p>如果非要用 ${} 的话，那要注意防止 SQL 注入问题，可以手动判定传入的变量，进行过滤，一般 SQL 注入会输入很长的一条 SQL 语句</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 MyBatis&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/mybatis-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用久了 MyBatis 的逆向工程，原生的写法有点生疏了，趁着想起来赶紧复习一下！&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="MyBatis" scheme="https://codeyg.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--CurrentHashMap</title>
    <link href="https://codeyg.top/2021/07/22/%E9%9D%A2%E8%AF%95--currentHashMap/"/>
    <id>https://codeyg.top/2021/07/22/%E9%9D%A2%E8%AF%95--currentHashMap/</id>
    <published>2021-07-22T02:58:58.000Z</published>
    <updated>2021-07-22T04:20:44.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下  CurrentHashMap</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_09-35-56.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>使用 HashMap 如何保证线程安全？</font></p><p>答：1、使用锁（Synchronize）</p><p>​        2、使用 CurrentHashMap</p><p><font color=#008000>详细的说一下 CurrentHashMap 吧</font></p><p>好嘞~</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-10-25.png" alt=""></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>哈希表就是一种以 键-值(key-indexed) 存储数据的结构，我们只要输入待查找的值即key，即可查找到其对应的值。</p><p>哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。</p><h4 id="2-链式哈希表"><a href="#2-链式哈希表" class="headerlink" title="2.链式哈希表"></a>2.链式哈希表</h4><p>链式哈希表从根本上说是由一组链表构成。每个链表都可以看做是一个“桶”，我们将所有的元素通过散列的方式放到具体的不同的桶中。</p><p>插入元素时，首先将其键传入一个哈希函数（该过程称为哈希键），函数通过散列的方式告知元素属于哪个“桶”，然后在相应的链表头插入元素。查找或删除元素时，用同们的方式先找到元素的“桶”，然后遍历相应的链表，直到发现我们想要的元素。因为每个“桶”都是一个链表，所以链式哈希表并不限制包含元素的个数。然而，如果表变得太大，它的性能将会降低。</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-21-53.png" alt=""></p><center>哈希表的链表式结构</center><p><strong>3.应用场景</strong></p><p>缓存技术（比如redis、memcached）的核心其实就是在内存中维护一张巨大的哈希表，还有HashMap、CurrentHashMap… … </p><h3 id="ConcurrentHashMap与HashMap等的区别"><a href="#ConcurrentHashMap与HashMap等的区别" class="headerlink" title="ConcurrentHashMap与HashMap等的区别"></a>ConcurrentHashMap与HashMap等的区别</h3><h4 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h4><p>HashMap 是线程不安全的，在多线程环境下，使用 HasHmap 进行 put 操作会引起死循环，导致 CPU 利用率接近 100%，<strong>所以在并发情况下不能使用 HashMap。</strong></p><h4 id="2-HashTable"><a href="#2-HashTable" class="headerlink" title="2.HashTable"></a>2.HashTable</h4><p>HashTable和HashMap的实现原理几乎一样，差别无非是</p><ul><li><p>HashTable 不允许 key 和 value 为 null</p></li><li><p>HashTable 是线程安全的</p></li></ul><p>但是HashTable线程安全的策略实现代价却太大了，简单粗暴，get/put 所有相关操作都是s ynchronized 的，这相当于<strong>给整个哈希表加了一把大锁。</strong></p><p>多线程访问时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，在竞争激烈的并发场景中性能就会非常差。</p><h4 id="3-ConcurrentHashMap"><a href="#3-ConcurrentHashMap" class="headerlink" title="3.ConcurrentHashMap"></a>3.ConcurrentHashMap</h4><p>ConcurrentHashMap 是为了解决 HashMap 在并发环境下不安全而诞生的。其大量的利用了 volatile，final，CAS 等 lock-free 技术来减少锁竞争对于性能的影响。</p><p><strong>ConcurrentHashMap 避免了对全局加锁改成了局部加锁操作</strong></p><h3 id="JDK1-7-版本的-CurrentHashMap-的实现原理"><a href="#JDK1-7-版本的-CurrentHashMap-的实现原理" class="headerlink" title="JDK1.7 版本的 CurrentHashMap 的实现原理"></a>JDK1.7 版本的 CurrentHashMap 的实现原理</h3><p>在JDK1.7中ConcurrentHashMap采用了<strong>数组+Segment+分段锁</strong>的方式实现。</p><h4 id="1-Segment-分段锁"><a href="#1-Segment-分段锁" class="headerlink" title="1.Segment(分段锁)"></a>1.Segment(分段锁)</h4><p>ConcurrentHashMap 中的<strong>分段锁称为 Segment</strong>，它即类似于 HashMap 的结构，即内部拥有一个 Entry 数组，数组中的每个元素又是一个链表,同时又是一个 ReentrantLock（Segment继承了ReentrantLock）。</p><h4 id="2-内部结构"><a href="#2-内部结构" class="headerlink" title="2.内部结构"></a>2.内部结构</h4><p>ConcurrentHashMap 使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。如下图是ConcurrentHashMap的内部结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_10-50-44.png" alt=""></p><p>Segment 默认是<strong>16</strong>，按理说最多同时支持<strong>16</strong>个线程并发读写，但是是操作不同的 Segment，初始化时也可以指定 Segment 数量，每一个 Segment 都会有一把锁，保证线程安全。</p><h4 id="该结构的优劣势"><a href="#该结构的优劣势" class="headerlink" title="该结构的优劣势"></a>该结构的优劣势</h4><p><strong>坏处</strong>：是这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长。</p><p><strong>好处</strong>：是写操作的时候可以只对元素所在的 Segment 进行加锁即可，不会影响到其他的 Segment，在最理想的情况下，ConcurrentHashMap 可以最高同时支持 Segment 数量大小的写操作(刚好这些写操作都非常平均地分布在所有的Segment上)。</p><h3 id="JDK1-8-版本的-CurrentHashMap-的实现原理"><a href="#JDK1-8-版本的-CurrentHashMap-的实现原理" class="headerlink" title="JDK1.8 版本的 CurrentHashMap 的实现原理"></a>JDK1.8 版本的 CurrentHashMap 的实现原理</h3><h4 id="1-Node"><a href="#1-Node" class="headerlink" title="1.Node"></a>1.Node</h4><p><strong>Node</strong>：保存 key，value 及 key 的 hash 值的数据结构。其中 value 和 next 都用 volatile 修饰，保证并发的可见性。</p><h4 id="2-Table"><a href="#2-Table" class="headerlink" title="2.Table"></a>2.Table</h4><p><strong>Table</strong>：默认为null，初始化发生在第一次插入操作，默认大小为16的数组，用来存储 Node 节点数据，扩容时大小总是 2 的幂次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="2.实现方式"></a>2.实现方式</h4><p>JDK1.8 的 currentHashMap参考了 1.8HashMap 的实现方式,采用了<strong>数组+链表+红黑树</strong>的实现方式。其中大量的使用CAS操作。CAS (compare and swap)</p><p>JDK8 中彻底放弃了 Segment 转而采用的是 Node，其设计思想也不再是  JDK1.7 中的分段锁思想。</p><p>红黑树是一种性能非常好的二叉查找树，其查找性能为 <strong>O(logN)</strong>，早期完全采用链表结构时 Map 的查找时间复杂度为 <strong>O(N)</strong>。</p><h4 id="3-原理图"><a href="#3-原理图" class="headerlink" title="3.原理图"></a>3.原理图</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_11-41-51.png" alt=""></p><center>JDK8 中 currentHashMap 原理图</center><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h4><p><strong>JDK1.7版本</strong>：ReentrantLock + Segment + HashEntry，</p><p><strong>JDK1.8版本</strong>：Synchronized + CAS + Node + 红黑树</p><h4 id="原理对比（1-8-于-1-7）"><a href="#原理对比（1-8-于-1-7）" class="headerlink" title="原理对比（1.8 于 1.7）"></a>原理对比（1.8 于 1.7）</h4><p><strong>1.数据结构：</strong>取消了 Segment 分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。</p><p><strong>2.保证线程安全机制：</strong>JDK1.7 采用 segment 的分段锁机制实现线程安全，其中 segment 继承自 ReentrantLock。JDK1.8 采用 CAS + Synchronized 保证线程安全。</p><p><strong>3.锁的粒度：</strong>原来是对需要进行数据操作的 Segment 加锁，现调整为对每个数组元素加锁（Node）。</p><p><strong>4.链表转化为红黑树：</strong>定位结点的hash算法简化会带来弊端,Hash冲突加剧,因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。</p><p><strong>5.查询时间复杂度：</strong>从原来的遍历链表 O(n)，变成遍历红黑树 O(logN)。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下  CurrentHashMap&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_09-35-56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;使用 HashMap 如何保证线程安全？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;答：1、使用锁（Synchronize）&lt;/p&gt;
&lt;p&gt;​        2、使用 CurrentHashMap&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;详细的说一下 CurrentHashMap 吧&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;好嘞~&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="currentHashMap" scheme="https://codeyg.top/tags/currentHashMap/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Redis和MySQL数据一致性问题</title>
    <link href="https://codeyg.top/2021/07/22/%E9%9D%A2%E8%AF%95--Redis%E5%92%8CMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://codeyg.top/2021/07/22/%E9%9D%A2%E8%AF%95--Redis%E5%92%8CMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2021-07-22T00:58:58.000Z</published>
    <updated>2021-07-24T17:52:51.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Redis 和 MySQL 数据一致性问题</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_00-53-11.png" alt=""></p><p><strong>写在前面</strong></p><p>对于Web来说，用户量和访问量增一定程度上推动项目技术和架构的更迭和进步。</p><p>当页面并发量和访问量并不多，MySQL<code>足以支撑</code>自己逻辑业务的发展。其实可以不加缓存，最多对静态页面进行缓存即可。</p><p><font color=#008000>什么时候需要缓存？</font></p><p>页面的并发量显著增多，数据库有些压力，并且有些数据更新频率较低<code>反复被查询</code>或者查询速度<code>较慢</code>。</p><p>对高命中的对象存到 Key-Value 形式的 Redis 中，那么，如果数据被命中，那么可以不经过效率很低的 DB。从高效的 Redis 中查找到数据。</p><p>虽然还能通过静态页面缓存页面、cdn加速、甚至负载均衡这些方法提高系统并发量，但是本片博客只是针对 Redis 缓存做讨论</p><a id="more"></a><h3 id="Redis-缓存的应用"><a href="#Redis-缓存的应用" class="headerlink" title="Redis 缓存的应用"></a>Redis 缓存的应用</h3><h4 id="不使用缓存的时候"><a href="#不使用缓存的时候" class="headerlink" title="不使用缓存的时候"></a>不使用缓存的时候</h4><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-08-41.png"  /><hr><h4 id="缓存适用的高并发场景"><a href="#缓存适用的高并发场景" class="headerlink" title="缓存适用的高并发场景"></a>缓存适用的高并发场景</h4><p>缓存适用于高并发的场景，提升服务容量。</p><p>主要是将从经常被访问的数据或者查询成本较高从慢的介质中存到比较快的介质中，比如从硬盘—&gt;内存。</p><p>大多数关系数据库是基于硬盘读写的，其效率和资源有限，而 redis 是基于内存的，其读写速度差别差别很大。当并发过高关系数据库性能达到瓶颈时候，就可以策略性将常访问数据放到 redis 提高系统吞吐和并发量。</p><h5 id="常用网站为什么会响应慢？"><a href="#常用网站为什么会响应慢？" class="headerlink" title="常用网站为什么会响应慢？"></a>常用网站为什么会响应慢？</h5><p>对于常用网站和场景，关系数据库主要可能慢在两个地方：</p><ul><li>读写IO性能较差</li><li>一个数据可能通过较大量计算得到</li></ul><blockquote><p>所以使用缓存能够减少磁盘IO次数和关系数据库的计算次数</p></blockquote><p><strong>体现：</strong></p><ul><li>基于内存，读写较快</li><li>使用哈希算法直接定位结果不需要计算</li></ul><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-24-18.png"  /><hr><h3 id="Redis-缓存需要注意的问题"><a href="#Redis-缓存需要注意的问题" class="headerlink" title="Redis 缓存需要注意的问题"></a>Redis 缓存需要注意的问题</h3><p>缓存使用不当会带来很多问题，所以需要对一些细节进行认真考量和设计。</p><p><font color=#FF8C00>最难的数据一致性！</font></p><h4 id="是否用缓存"><a href="#是否用缓存" class="headerlink" title="是否用缓存"></a>是否用缓存</h4><p>项目不能为了用缓存而用缓存，缓存并一定适合所有场景！</p><p>如果对<strong>数据一致性要求极高</strong>，又或者<strong>数据频繁更改而查询并不多</strong>，又或者根本没并发量的、查询简单的不一定需要缓存，还可能浪费资源使得项目变得臃肿难维护。</p><h4 id="过期策略选择"><a href="#过期策略选择" class="headerlink" title="过期策略选择"></a>过期策略选择</h4><p>缓存装的是相对热点和常用的数据，redis 资源也是有限，需要选择一个合理的策略让缓存过期删除，根据时间来的 FIFO 是最好实现的。且 redis 在全局 key 支持过期策略。</p><p>并且过期时间也要根据系统情况合理设置，如果硬件好点当前可以稍微久一点，但是过期时间过久或者过短可能都不太好，过短可能缓存命中率不高，而过久很可能造成很多冷门数据存储在Redis中不释放。</p><h3 id="Redis-缓存数据一致性问题"><a href="#Redis-缓存数据一致性问题" class="headerlink" title="Redis 缓存数据一致性问题"></a>Redis 缓存数据一致性问题</h3><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><p><code>read</code>：从 redis 中读取，如果 redis 中没有，那么就从 MySQL 中获取更新 redis 缓存。 </p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-37-06.png" alt=""></p><hr><h4 id="写数据-【先更新数据库，再更新缓存-普通低并发-】"><a href="#写数据-【先更新数据库，再更新缓存-普通低并发-】" class="headerlink" title="写数据 【先更新数据库，再更新缓存(普通低并发)】"></a>写数据 【先更新数据库，再更新缓存(普通低并发)】</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_01-49-00.png" alt=""></p><p>先更新数据库信息，再更新Redis缓存。这是常规做法，缓存基于数据库，取自数据库。</p><p>但是其中可能遇到一些问题，例如上述如果更新缓存失败(宕机等其他状况)，将会使得数据库和 redis 数据不一致。<font color=#FF0000>造成 DB 新数据，缓存旧数据</font></p><hr><h4 id="写数据-【先删除缓存，再写入数据库-低并发优化-】"><a href="#写数据-【先删除缓存，再写入数据库-低并发优化-】" class="headerlink" title="写数据 【先删除缓存，再写入数据库(低并发优化)】"></a>写数据 【先删除缓存，再写入数据库(低并发优化)】</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-04-31.png" alt=""></p><p>这种情况能够有效避免【先更新数据库，再更新缓存】中防止写入 redis 失败的问题。将缓存删除进行更新。理想是让下次访问 redis 为空去 mysql 取得最新值到缓存中。但是这种情况仅限于低并发的场景中而不适用高并发场景!</p><p><strong>存在的问题</strong></p><p>我们在【先更新数据库，再更新缓存】讨论过如果更新库成功，缓存更新失败会导致脏数据。我们理想是删除缓存让下一个线程访问适合更新缓存。问题是：如果这下一个线程来的太早呢？</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-11-16.png" alt=""></p><p>因为在多线的情况下，无法保证那条线程优先执行。</p><p>将会出现 redis 缓存数据和 mysql 不一致</p><p><font color=#FF0000>高并发下依然会造成缓存是旧数据，DB 是新数据</font></p><hr><h4 id="写数据【延时双删策略】"><a href="#写数据【延时双删策略】" class="headerlink" title="写数据【延时双删策略】"></a>写数据【延时双删策略】</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-23-14.png" alt=""></p><p>能过缓解在【先删除缓存，再写入数据库】中在更新MySQL过程中有读的线程进入造成Redis缓存与MySQL数据不一致。</p><p>方法就是 <font color=#FF0000>删除缓存</font>-&gt;<font color=#008000>更新缓存</font>-&gt;<font color=#FF0000>延时【几百ms，可异步】再次删除缓存</font></p><p><strong>存在的问题</strong></p><p>第二次删除错误、多写多读高并发情况下对MySQL访问的压力等等，当然你可以选择用MQ等消息队列异步解决。</p><hr><h4 id="写数据【直接操作缓存，定期写入sql-适合高并发-】"><a href="#写数据【直接操作缓存，定期写入sql-适合高并发-】" class="headerlink" title="写数据【直接操作缓存，定期写入sql(适合高并发)】"></a>写数据【直接操作缓存，定期写入sql(适合高并发)】</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_02-34-36.png" alt=""></p><p>直接操作缓存，将缓存定期写入sql。</p><p>因为 redis 这种非关系数据库又基于内存操作 KV 相比传统关系型要快很多！</p><p><strong>异步更新缓存(基于订阅 binlog 的同步机制)</strong></p><p><strong>技术整体思路：</strong></p><p>MySQL binlog 增量订阅消费 + 消息队列 + 增量数据更新到 redis</p><ul><li><strong>读Redis</strong>：热数据基本都在 redis</li><li><strong>写MySQL</strong>：增删改都是操作 mysql</li><li><strong>更新Redis数据</strong>：mysql 的数据操作 binlog，来更新到 redis</li></ul><p><strong>数据操作主要分为两大块：</strong></p><ul><li>一个是全量(将全部数据一次写入到 redis)</li><li>一个是增量（实时更新）</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Redis 和 MySQL 数据一致性问题&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_00-53-11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于Web来说，用户量和访问量增一定程度上推动项目技术和架构的更迭和进步。&lt;/p&gt;
&lt;p&gt;当页面并发量和访问量并不多，MySQL&lt;code&gt;足以支撑&lt;/code&gt;自己逻辑业务的发展。其实可以不加缓存，最多对静态页面进行缓存即可。&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;什么时候需要缓存？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;页面的并发量显著增多，数据库有些压力，并且有些数据更新频率较低&lt;code&gt;反复被查询&lt;/code&gt;或者查询速度&lt;code&gt;较慢&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对高命中的对象存到 Key-Value 形式的 Redis 中，那么，如果数据被命中，那么可以不经过效率很低的 DB。从高效的 Redis 中查找到数据。&lt;/p&gt;
&lt;p&gt;虽然还能通过静态页面缓存页面、cdn加速、甚至负载均衡这些方法提高系统并发量，但是本片博客只是针对 Redis 缓存做讨论&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="redis" scheme="https://codeyg.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Spring 循环依赖以及三级缓存</title>
    <link href="https://codeyg.top/2021/07/21/%E9%9D%A2%E8%AF%95--Spring%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8F%8A%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://codeyg.top/2021/07/21/%E9%9D%A2%E8%AF%95--Spring%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8F%8A%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</id>
    <published>2021-07-21T01:00:00.000Z</published>
    <updated>2021-07-22T01:38:31.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Spring 循环依赖以及三级缓存</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-45-33.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>什么是循环依赖？</font></p><p>简单的说就是 A 依赖 B，B 依赖 A 这样就构成了循环依赖。</p><p><font color=#008000>具体说一说 spring 是如何解决循环依赖的吧</font></p><p>让我好好想一想……</p><a id="more"></a><h3 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h3><p>所谓的循环依赖是指，A 依赖 B，B 又依赖 A，它们之间形成了循环依赖。或者是 A 依赖 B，B 依赖 C，C 又依赖 A，形成了循环依赖。更或者是自己依赖自己。</p><p>举个图解荔枝：</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_22-16-10.png" style="zoom:90%;" /><p>举个代码荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanB</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> BeanA beanA;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanA</span><span class="params">(BeanA beanA)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.beanA = beanA;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BeanB beanB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanB</span><span class="params">(BeanB beanB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanB = beanB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanA"</span> <span class="attr">class</span>=<span class="string">"com.ase.BeanA"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanB"</span> <span class="attr">ref</span>=<span class="string">"beanB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanB"</span> <span class="attr">class</span>=<span class="string">"com.ase.BeanB"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanA"</span> <span class="attr">ref</span>=<span class="string">"beanA"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按照上面的例子，Spring 启动后，读取如上的配置文件，会按顺序先实例化 A，但是创建的时候又发现它依赖了 B，接着就去实例化 B ，同样又发现它依赖了 A ，从而导致了无限循环，淦！</p><p><strong>尝试思考</strong></p><p>Spring 实例化对象分两步：</p><p>第一步，会先创建一个原始对象，只是没有设置属性，可以理解为”半成品”—— 官方叫 A 对象的早期引用（EarlyBeanReference）；</p><p>第二步，当实例化 B 的时候发现依赖了 A， B 就会把这个“半成品”设置进去先完成实例化，既然 B 完成了实例化，所以 A 就可以获得 B 的引用，也完成实例化了，这其实就是 Spring 解决循环依赖的思想；</p><hr><h3 id="循环依赖发生的时机"><a href="#循环依赖发生的时机" class="headerlink" title="循环依赖发生的时机"></a>循环依赖发生的时机</h3><h4 id="Bean-实例化"><a href="#Bean-实例化" class="headerlink" title="Bean 实例化"></a>Bean 实例化</h4><p>主要分为三步，如图：</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_22-33-22.png" style="zoom:80%;" /><p>问题出现在：第一步和第二步的过程中，也就是填充属性 / 方法的过程中</p><h4 id="Spring-如何解决的"><a href="#Spring-如何解决的" class="headerlink" title="Spring 如何解决的"></a>Spring 如何解决的</h4><ul><li>Spring 为了解决单例的循环依赖问题，使用了 <strong>三级缓存</strong> ，递归调用时发现 Bean 还在创建中即为循环依赖</li><li>单例模式的 Bean 保存在如下的数据结构中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**一级缓存，用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 二级缓存：存放原始的 bean 对象（尚未填充属性），用于解决循环依赖 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 三级级缓存：存放 bean 工厂对象，用于解决循环依赖 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">bean 的获取过程：先从一级获取，失败再从二级、三级里面获取</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建中状态：是指对象已经 new 出来了但是所有的属性均为 null 等待被 init</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>一级缓存：singletonObjects，存放完全实例化属性赋值完成的 Bean，直接可以使用。</li><li>二级缓存：earlySingletonObjects，存放早期 Bean 的引用，尚未属性装配的 Bean</li><li>三级缓存：singletonFactories，三级缓存，存放实例化完成的 Bean工厂。</li></ul><h4 id="循环依赖的解决流程图"><a href="#循环依赖的解决流程图" class="headerlink" title="循环依赖的解决流程图"></a>循环依赖的解决流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-22_00-13-55.png" alt=""></p><hr><h4 id="A、B-相互依赖"><a href="#A、B-相互依赖" class="headerlink" title="A、B 相互依赖"></a>A、B 相互依赖</h4><p>检测循环依赖的过程如下：</p><ul><li><p>A 创建过程中需要 B，于是 <strong>A 将自己放到三级缓里面</strong> ，去实例化 B</p></li><li><p>B 实例化的时候发现需要 A，于是 B 先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了</p><ul><li><strong>然后把三级缓存里面的这个 A 放到二级缓存里面，并删除三级缓存里面的 A</strong></li><li>B 顺利初始化完毕，<strong>将自己放到一级缓存里面</strong>（此时B里面的A依然是创建中状态）</li></ul></li><li><p>然后回来接着创建 A，此时 B 已经创建结束，直接从一级缓存里面拿到 B ，然后完成创建，<strong>并将自己放到一级缓存里面</strong></p></li><li><p>如此一来便解决了循环依赖的问题</p></li></ul><p><strong>总结</strong></p><p>先让最底层对象完成初始化，通过三级缓存与二级缓存提前曝光创建中的 Bean，让其他 Bean 率先完成初始化。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><font color=#FF8C00>Spring 还是有一些无法解决的循环依赖！</font></p><p>使用构造器注入其他 Bean 的实例，这个就没办法了，要手动改代码。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Spring 循环依赖以及三级缓存&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-45-33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;什么是循环依赖？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;简单的说就是 A 依赖 B，B 依赖 A 这样就构成了循环依赖。&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;具体说一说 spring 是如何解决循环依赖的吧&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;让我好好想一想……&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="Spring" scheme="https://codeyg.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Redis 五种数据结构详解</title>
    <link href="https://codeyg.top/2021/07/21/%E9%9D%A2%E8%AF%95--Redis%205%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://codeyg.top/2021/07/21/%E9%9D%A2%E8%AF%95--Redis%205%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-07-21T00:08:08.000Z</published>
    <updated>2021-07-22T01:38:50.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Redis 的五种数据结构</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-42-43.png" alt=""></p><p><strong>写在前面</strong></p><p>Redis 是基于 C 语言编写的开源非关系型内存数据库，可以用作数据库、缓存、消息中间件。</p><p>Redis 的五种数据结构详解，包括这五种的数据结构的底层原理实现。</p><a id="more"></a><h4 id="Redis的五种数据结构"><a href="#Redis的五种数据结构" class="headerlink" title="Redis的五种数据结构"></a>Redis的五种数据结构</h4><ol><li><code>String</code>：字符串类型</li><li><code>List</code>：列表类型</li><li><code>Set</code>：无序集合类型</li><li><code>ZSet</code>：有序集合类型</li><li><code>Hash</code>：哈希表类型</li></ol><h4 id="Redis核心对象"><a href="#Redis核心对象" class="headerlink" title="Redis核心对象"></a>Redis核心对象</h4><p>在Redis中有一个<strong>「核心的对象」</strong>叫做 <code>redisObject</code> ，是用来表示所有的 key 和 value 的，用 redisObject 结构体来表示<code>String、Hash、List、Set、ZSet</code>五种数据类型。</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_09-28-52.png" alt=""></p><p>在redisObject中<strong>「type表示属于哪种数据类型，encoding表示该数据的存储方式」</strong>，也就是底层的实现的该数据类型的数据结构。</p><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>redis 中的字符串和 c 语言中的字符串类型却是有明显的区别。</p><p>string 类型的数据结构存储方式有三种<code>int、raw、embstr</code>。</p><p><strong>未完待续……</strong></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Redis 的五种数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_08-42-43.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis 是基于 C 语言编写的开源非关系型内存数据库，可以用作数据库、缓存、消息中间件。&lt;/p&gt;
&lt;p&gt;Redis 的五种数据结构详解，包括这五种的数据结构的底层原理实现。&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="redis" scheme="https://codeyg.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--MySQL 存储引擎</title>
    <link href="https://codeyg.top/2021/07/19/%E9%9D%A2%E8%AF%95--MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>https://codeyg.top/2021/07/19/%E9%9D%A2%E8%AF%95--MySQL%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2021-07-19T13:58:58.000Z</published>
    <updated>2021-07-22T01:38:18.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 MySQL 存储引擎</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_00-12-04.png" alt=""></p><p><strong>写在前面</strong></p><p>本文依照数据库 5.7 来描述滴~</p><p><font color=#008000>明确一点：</font></p><p>数据库实例（instance）才是真正用于操作数据库文件的。</p><p>MySQL 是一个单进程、多线程架构的数据库；</p><p>在集群的情况下，一个数据库对应对个数据库实例。</p><a id="more"></a><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>数据库：由一个个文件组成（二进制）</p><p>数据库实例：执行类似于（Insert、Update、Delete）来更改数据库的内容</p><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ul><li>Atomicity（原子性）</li><li>Consistency（一致性）</li><li>Isolation（隔离性）</li><li>Durability（持久性）</li></ul><br/><h3 id="MySQL-存储引擎对比"><a href="#MySQL-存储引擎对比" class="headerlink" title="MySQL 存储引擎对比"></a>MySQL 存储引擎对比</h3><table><thead><tr><th align="center">特点</th><th align="center">MyISAM</th><th align="center">InnoDB</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">批量插入的速度</td><td align="center">高</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center"><font color=#008000>事务安全</font></td><td align="center">-</td><td align="center"><font color=#008000>支持</font></td><td align="center">-</td></tr><tr><td align="center">全文索引</td><td align="center">支持</td><td align="center">不支持</td><td align="center">不支持</td></tr><tr><td align="center"><font color=#008000>锁机制</font></td><td align="center"><font color=#008000>表锁</font></td><td align="center"><font color=#008000>行锁</font></td><td align="center"><font color=#008000>表锁</font></td></tr><tr><td align="center">存储限制</td><td align="center">256 TB</td><td align="center">64 T</td><td align="center">RAM</td></tr><tr><td align="center">B 树索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">哈希索引</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">集群索引</td><td align="center">-</td><td align="center">支持</td><td align="center">-</td></tr><tr><td align="center">数据缓存</td><td align="center">-</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">索引缓存</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">数据可压缩</td><td align="center">支持</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">空间使用</td><td align="center">低</td><td align="center">高</td><td align="center">N/A</td></tr><tr><td align="center"><font color=#008000>内存使用</font></td><td align="center"><font color=#008000>低</font></td><td align="center"><font color=#008000>高</font></td><td align="center"><font color=#008000>中</font></td></tr><tr><td align="center"><font color=#008000>支持外键</font></td><td align="center"><font color=#008000>不支持</font></td><td align="center"><font color=#008000>支持</font></td><td align="center"><font color=#008000>不支持</font></td></tr></tbody></table><hr><h3 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h3><h4 id="MySQL-插件式存储引擎概念"><a href="#MySQL-插件式存储引擎概念" class="headerlink" title="MySQL 插件式存储引擎概念"></a>MySQL 插件式存储引擎概念</h4><p><strong>MySQL 存储引擎（核心）</strong></p><p><font color=#FF8C00>存储引擎是基于表的，而不是数据库</font></p><p><strong>MySQL 默认存储引擎</strong></p><p>使用下面的语句可以修改数据库临时的默认存储引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET default_storage_engine &#x3D; &lt;存储引擎名&gt;</span><br></pre></td></tr></table></figure><p>但是当再次重启客户端时，默认存储引擎仍然是 InnoDB</p><h3 id="表锁概念"><a href="#表锁概念" class="headerlink" title="表锁概念"></a>表锁概念</h3><h4 id="行锁和表锁"><a href="#行锁和表锁" class="headerlink" title="行锁和表锁"></a>行锁和表锁</h4><p>在mysql 的 InnoDB引擎支持行锁，与Oracle不同，mysql的行锁是通过索引加载的，即是行锁是加在索引响应的行上的，要是对应的SQL语句没有走索引，则会全表扫描，</p><p>行锁则无法实现，取而代之的是表锁。</p><p><strong>表锁</strong>：不会出现死锁，发生锁冲突几率高，并发低。</p><p><strong>行锁：</strong>会出现死锁，发生锁冲突几率低，并发高。</p><p><strong>锁冲突：</strong>例如说事务A将某几行上锁后，事务B又对其上锁，锁不能共存否则会出现锁冲突。<strong>（但是共享锁可以共存，共享锁和排它锁不能共存，排它锁和排他锁也不可以）</strong></p><p><strong>死锁：</strong>例如说两个事务，事务A锁住了1-5行，同时事务B锁住了6-10行，此时事务A请求锁住6-10行，就会阻塞直到事务B施放6-10行的锁，而随后事务B又请求锁住1-5行，事务B也阻塞直到事务A释放1-5行的锁。死锁发生时，会产生 Deadlock 错误。</p><p><font color=#FF8C00>锁是对表操作的，所以自然锁住全表的表锁就不会出现死锁</font></p><h4 id="行锁的类型"><a href="#行锁的类型" class="headerlink" title="行锁的类型"></a>行锁的类型</h4><p>行锁分 共享锁 和 排它锁</p><p>共享锁：</p><p>又称读锁，当一个事务对某几行上读锁时，允许其他事务对这几行进行读操作，但不允许其进行写操作，也不允许其他事务给这几行上排它锁，但允许上读锁。</p><p>排它锁：</p><p>又称写锁，当一个事务对某几个上写锁时，不允许其他事务写，但允许读。更不允许其他事务给这几行上任何锁。包括写锁。</p><p>举个荔枝：</p><p>上共享锁的写法：<font color=#008000>lock in share mode</font> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  math from results where math &gt; 60 lock in share mode；</span><br></pre></td></tr></table></figure><p>上排它锁的写法：<font color=#008000>for update</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select math from results where math &gt; 60 for update</span><br></pre></td></tr></table></figure><h4 id="行锁的实现"><a href="#行锁的实现" class="headerlink" title="行锁的实现"></a>行锁的实现</h4><ol><li><p>行锁必须有索引才能实现，否则会自动锁全表，那么就不是行锁了。</p></li><li><p>两个事务不能锁同一个索引，例如：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 事务A先执行：</span><br><span class="line">select math from results where math &gt; 60 for update;</span><br><span class="line"> </span><br><span class="line"># 事务B再执行：</span><br><span class="line">select math from results where math &lt; 60 for update；</span><br><span class="line"># 这样的话，事务 B 是会阻塞的。如果事务 B 把 math 索引换成其他索引就不会阻塞，</span><br><span class="line"># 但注意，换成其他索引锁住的行不能和 math 索引锁住的行有重复。</span><br></pre></td></tr></table></figure><br/><h3 id="InnoDB-存储引擎"><a href="#InnoDB-存储引擎" class="headerlink" title="InnoDB 存储引擎"></a>InnoDB 存储引擎</h3><p><font color=#FF8C00>5.8版本后的默认存储引擎</font></p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol><li>支持事务的安装</li><li>灾难恢复型好</li><li>使用行级锁</li><li>实现了缓冲处理</li><li>支持外键</li><li>适合大型的数据库网站</li></ol><br/><h3 id="MyISAM-存储引擎"><a href="#MyISAM-存储引擎" class="headerlink" title="MyISAM 存储引擎"></a>MyISAM 存储引擎</h3><p><font color=#FF8C00>5.8版本的默认存储引擎</font></p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ol><li>支持全文索引</li></ol><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ol><li><p>不支持事务</p></li><li><p>不支持行锁</p></li></ol><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>MYD 和 MYI</p><p>其缓冲池中只存索引文件，而不是缓冲数据文件；</p><ul><li>MYD：用来存放数据文件（Date）</li><li>MYI：用来存放索引文件（Index）</li></ul><p>5.0 版本前：默认支持表的大小为 4 GB；</p><p>5.0 版本时：默认支持表的大小为 256 TB；</p><br/><h3 id="Memory-存储引擎"><a href="#Memory-存储引擎" class="headerlink" title="Memory 存储引擎"></a>Memory 存储引擎</h3><p>将表中的数据存放在内存当中，一旦数据库重新启动或者崩溃，则表中的数据都将消失。</p><p>适合用于存储临时数据的临时表。</p><p>默认使用的是哈希索引而不是 B+ 树索引；</p><p>只支持表锁，不支持 text 和 blob 列类型。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 MySQL 存储引擎&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-21_00-12-04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文依照数据库 5.7 来描述滴~&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;明确一点：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;数据库实例（instance）才是真正用于操作数据库文件的。&lt;/p&gt;
&lt;p&gt;MySQL 是一个单进程、多线程架构的数据库；&lt;/p&gt;
&lt;p&gt;在集群的情况下，一个数据库对应对个数据库实例。&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="MySQL 存储引擎" scheme="https://codeyg.top/tags/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>jdk8新特性--stream</title>
    <link href="https://codeyg.top/2021/07/17/jdk8%E6%96%B0%E7%89%B9%E6%80%A7--stream/"/>
    <id>https://codeyg.top/2021/07/17/jdk8%E6%96%B0%E7%89%B9%E6%80%A7--stream/</id>
    <published>2021-07-17T14:58:58.000Z</published>
    <updated>2021-07-18T21:29:24.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p>jdk1.8新特性知识点：</p><p><strong>Lambda 表达式、函数式接口、方法引用和构造器调用、Stream API、接口中的默认方法和静态方法、新时间日期 API</strong></p><p><strong>本篇着重介绍一下 stream 流</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-29-30.png" alt=""></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><font color=#008000>什么是 stream 流？</font></p><p>Java8 中，Collection 新增了两个流方法，分别是 Stream() 和 parallelStream()</p><p>Java8 中添加了一个新的接口类 Stream，相当于高级版的 Iterator，它可以通过 Lambda 表达式对集合进行大批量数据操作，或 者各种非常便利、高效的聚合数据操作。</p><p>Stream 将要处理的元素集合看作一种流，在流的过程中，借助 Stream API 对流中的元素进行操作，比如：筛选、排序、聚合等。</p><p><font color=#008000>jdk8 为什么要引入 stream 流？</font></p><p>在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。</p><p><font color=#6AAFE6>流不存储数据</font></p><a id="more"></a><h3 id="stream-概述"><a href="#stream-概述" class="headerlink" title="stream 概述"></a>stream 概述</h3><p>Stream可以由数组或集合创建，对流的操作分为两种：</p><ol><li>中间操作，每次返回一个新的流，可以有多个。</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ol><p>另外，Stream有几个特性：</p><ol><li>stream 不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream 不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>stream 具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ol><p>stream 是元素的集合，这点让 stream 看起来用些类似 Iterator</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_00-46-42.png" alt=""></p><br/><h3 id="stream-的创建"><a href="#stream-的创建" class="headerlink" title="stream 的创建"></a>stream 的创建</h3><h4 id="通过集合数组创建"><a href="#通过集合数组创建" class="headerlink" title="通过集合数组创建"></a>通过集合数组创建</h4><ol><li><p>通过 java.util.Collection.stream() 方法用集合创建流</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamCreateTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamCreateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 创建一个顺序流</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">// 创建一个并行流</span></span><br><span class="line">        Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>使用 java.util.Arrays.stream(T[] array) 方法用数组创建流</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamCreateTest2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamCreateTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        IntStream stream = Arrays.stream(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>使用 Stream 的静态方法：of()、iterate()、generate()</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamCreateTest3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamCreateTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">3</span>).limit(<span class="number">4</span>);</span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">3</span>);</span><br><span class="line">        stream3.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br/><h4 id="stream-和-parallelStream"><a href="#stream-和-parallelStream" class="headerlink" title="stream 和 parallelStream"></a>stream 和 parallelStream</h4><p><font color=#008000>stream</font> 是顺序流，由主线程按顺序对流执行操作</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_23-56-01.png" style="zoom:70%;" /><p><font color=#008000>parallelStream</font> 并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_23-56-15.png" style="zoom:70%;" /><p>如果流中的数据量足够大，并行流可以加快处速度。</p><p>除了直接创建并行流，还可以通过<code>parallel()</code>把顺序流转换成并行流</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"parallelSum = "</span> + parallelSum(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parallelSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>, i -&gt; i + <span class="number">1</span>).limit(n).parallel().reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="stream-的使用"><a href="#stream-的使用" class="headerlink" title="stream 的使用"></a>stream 的使用</h3><p>在使用 stream 之前，先看一下：<code>Optional</code></p><p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+        +--------+     +--------+     +-----+     +---------+</span><br><span class="line">| stream of elements + -----&gt; | filter + --&gt; | sorted + --&gt; | map + --&gt; | collect |</span><br><span class="line">+--------------------+        +--------+     +--------+     +-----+     +---------+</span><br></pre></td></tr></table></figure><p><strong>stream（图示）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-23-04.png" alt=""></p><hr><p><strong>stream–collect（图示）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-23-39.png" alt=""></p><hr><h4 id="遍历-匹配（foreach-find-match）"><a href="#遍历-匹配（foreach-find-match）" class="headerlink" title="遍历/匹配（foreach/find/match）"></a>遍历/匹配（foreach/find/match）</h4><p><code>Stream</code>也是支持类似集合的遍历和匹配元素的，只是<code>Stream</code>中的元素是以<code>Optional</code>类型存在的。</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-39-44.png" style="zoom:80%;" /><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输出符合条件的元素</span></span><br><span class="line">        list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 匹配第一个</span></span><br><span class="line">        Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).findFirst();</span><br><span class="line">        <span class="comment">// 匹配任意（适用于并行流）</span></span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; <span class="number">6</span>).findAny();</span><br><span class="line">        <span class="comment">// 是否包含符合特定条件的元素</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(x -&gt; x &lt; <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"匹配第一个值："</span> + findFirst.get());</span><br><span class="line">        System.out.println(<span class="string">"匹配任意一个值："</span> + findAny.get());</span><br><span class="line">        System.out.println(<span class="string">"是否存在大于6的值："</span> + anyMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="筛选（filter）"><a href="#筛选（filter）" class="headerlink" title="筛选（filter）"></a>筛选（filter）</h4><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-40-26.png" style="zoom:80%;" /><p>举个荔枝：</p><p>筛选出<code>Integer</code>集合中大于7的元素，并打印出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">        stream.filter(x -&gt; x &gt; <span class="number">7</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="聚合（max-min-count"><a href="#聚合（max-min-count" class="headerlink" title="聚合（max/min/count)"></a>聚合（max/min/count)</h4><p><code>max</code>、<code>min</code>、<code>count</code>这些字眼在 mysql 中我们常用它们进行数据统计。</p><p>java stream 中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_01-46-58.png" style="zoom:80%;" /><p>举个荔枝：</p><p>获取<code>String</code>集合中最长的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation3();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"adnm"</span>, <span class="string">"admmt"</span>, <span class="string">"pot"</span>, <span class="string">"xbangd"</span>, <span class="string">"weoujgsd"</span>);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">        System.out.println(<span class="string">"最长的字符串："</span> + max.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举个荔枝：</p><p>获取Integer集合中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自然排序</span></span><br><span class="line">        Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">        <span class="comment">// 自定义排序</span></span><br><span class="line">        Optional&lt;Integer&gt; max2 = list.stream().max((o1, o2) -&gt; o1.compareTo(o2));</span><br><span class="line">        System.out.println(<span class="string">"自然排序的最大值："</span> + max.get());</span><br><span class="line">        System.out.println(<span class="string">"自定义排序的最大值："</span> + max2.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="映射（map-flatMap）"><a href="#映射（map-flatMap）" class="headerlink" title="映射（map / flatMap）"></a>映射（map / flatMap）</h4><p>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中</p><p>分为<code>map</code>和<code>flatMap</code>：</p><ul><li><code>map</code>：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li></ul><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-29-38.png" style="zoom:80%;" /><ul><li><code>flatMap</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li></ul><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-30-15.png" style="zoom:80%;" /><p>举个荔枝：</p><p>英文字符串数组的元素全部改为大写、整数数组每个元素+3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] strArr = &#123; <span class="string">"abcd"</span>, <span class="string">"bcdd"</span>, <span class="string">"defde"</span>, <span class="string">"fTr"</span> &#125;;</span><br><span class="line">        List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; intList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>);</span><br><span class="line">        List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"每个元素大写："</span> + strList);</span><br><span class="line">        System.out.println(<span class="string">"每个元素+3："</span> + intListNew);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举个荔枝：</p><p>将两个字符数组合并成一个新的字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"m,k,l,a"</span>, <span class="string">"1,3,5,7"</span>);</span><br><span class="line">        List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// 将每个元素转换成一个stream</span></span><br><span class="line">            String[] split = s.split(<span class="string">","</span>);</span><br><span class="line">            Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"处理前的集合："</span> + list);</span><br><span class="line">        System.out.println(<span class="string">"处理后的集合："</span> + listNew);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="归约（reduce）"><a href="#归约（reduce）" class="headerlink" title="归约（reduce）"></a>归约（reduce）</h4><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作</p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_02-52-43.png" style="zoom:80%;" /><p>举个荔枝：</p><p>求<code>Integer</code>集合的元素之和、乘积和最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 求和方式1</span></span><br><span class="line">        Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">        <span class="comment">// 求和方式2</span></span><br><span class="line">        Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class="line">        <span class="comment">// 求和方式3</span></span><br><span class="line">        Integer sum3 = list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求乘积</span></span><br><span class="line">        Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求最大值方式1</span></span><br><span class="line">        Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class="line">        <span class="comment">// 求最大值写法2</span></span><br><span class="line">        Integer max2 = list.stream().reduce(<span class="number">1</span>, Integer::max);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list求和："</span> + sum.get() + <span class="string">","</span> + sum2.get() + <span class="string">","</span> + sum3);</span><br><span class="line">        System.out.println(<span class="string">"list求积："</span> + product.get());</span><br><span class="line">        System.out.println(<span class="string">"list求和："</span> + max.get() + <span class="string">","</span> + max2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="收集（collect）"><a href="#收集（collect）" class="headerlink" title="收集（collect）"></a>收集（collect）</h4><p><code>collect</code>，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合</p><blockquote><p><code>collect</code>主要依赖<code>java.util.stream.Collectors</code>类内置的静态方法</p></blockquote><h5 id="归集（toList-toSet-toMap）"><a href="#归集（toList-toSet-toMap）" class="headerlink" title="归集（toList/toSet/toMap）"></a>归集（toList/toSet/toMap）</h5><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里</p><p><code>toList</code>、<code>toSet</code>和<code>toMap</code>：</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">20</span>);</span><br><span class="line">        List&lt;Integer&gt; listNew = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">        Set&lt;Integer&gt; set = list.stream().filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Anni"</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; <span class="number">8000</span>)</span><br><span class="line">                .collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br><span class="line">        System.out.println(<span class="string">"toList:"</span> + listNew);</span><br><span class="line">        System.out.println(<span class="string">"toSet:"</span> + set);</span><br><span class="line">        System.out.println(<span class="string">"toMap:"</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toList:[<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">20</span>]</span><br><span class="line">toSet:[<span class="number">4</span>, <span class="number">20</span>, <span class="number">6</span>]</span><br><span class="line">toMap:&#123;Tom=Person&#123;name=<span class="string">'Tom'</span>, salary=<span class="number">8900</span>, age=<span class="number">23</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;, Anni=Person&#123;name=<span class="string">'Anni'</span>, salary=<span class="number">8200</span>, age=<span class="number">24</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="统计（count-averaging）"><a href="#统计（count-averaging）" class="headerlink" title="统计（count/averaging）"></a>统计（count/averaging）</h5><p>Collectors提供了一系列用于数据统计的静态方法：</p><ul><li>计数：count</li><li>平均值：averagingInt、averagingLong、averagingDouble</li><li>最值：maxBy、minBy</li><li>求和：summingInt、summingLong、summingDouble</li><li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li></ul><p>举个荔枝：</p><p>统计员工人数、平均工资、工资总额、最高工资</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求总数</span></span><br><span class="line">        Long count = personList.stream().collect(Collectors.counting());</span><br><span class="line">        <span class="comment">// 求平均工资</span></span><br><span class="line">        Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class="line">        <span class="comment">// 求最高工资</span></span><br><span class="line">        Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));</span><br><span class="line">        <span class="comment">// 求工资之和</span></span><br><span class="line">        Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">        <span class="comment">// 一次性统计所有信息</span></span><br><span class="line">        DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"员工总数："</span> + count);</span><br><span class="line">        System.out.println(<span class="string">"员工平均工资："</span> + average);</span><br><span class="line">        System.out.println(<span class="string">"员工工资总和："</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"员工工资所有统计："</span> + collect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">员工总数：<span class="number">3</span></span><br><span class="line">员工平均工资：<span class="number">7900.0</span></span><br><span class="line">员工工资总和：<span class="number">23700</span></span><br><span class="line">员工工资所有统计：DoubleSummaryStatistics&#123;count=<span class="number">3</span>, sum=<span class="number">23700.000000</span>, min=<span class="number">7000.000000</span>, average=<span class="number">7900.000000</span>, max=<span class="number">8900.000000</span>&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="分组（partitioningBy-groupingBy）"><a href="#分组（partitioningBy-groupingBy）" class="headerlink" title="分组（partitioningBy/groupingBy）"></a>分组（partitioningBy/groupingBy）</h5><ul><li>分区：将<code>stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。</li><li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_03-54-51.png" alt=""></p><p>举个荔枝：</p><p>将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Anni"</span>, <span class="number">8200</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Owen"</span>, <span class="number">9500</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Alisa"</span>, <span class="number">7900</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将员工按薪资是否高于8000分组</span></span><br><span class="line">        Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line">        <span class="comment">// 将员工按性别分组</span></span><br><span class="line">        Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line">        <span class="comment">// 将员工先按性别分组，再按地区分组</span></span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class="line">        System.out.println(<span class="string">"员工按薪资是否大于8000分组情况："</span> + part);</span><br><span class="line">        System.out.println(<span class="string">"员工按性别分组情况："</span> + group);</span><br><span class="line">        System.out.println(<span class="string">"员工按性别、地区："</span> + group2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">员工按薪资是否大于<span class="number">8000</span>分组情况：&#123;<span class="keyword">false</span>=[Person&#123;name=<span class="string">'Jack'</span>, salary=<span class="number">7000</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'Washington'</span>&#125;, Person&#123;name=<span class="string">'Lily'</span>, salary=<span class="number">7800</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'Washington'</span>&#125;, Person&#123;name=<span class="string">'Alisa'</span>, salary=<span class="number">7900</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;], <span class="keyword">true</span>=[Person&#123;name=<span class="string">'Tom'</span>, salary=<span class="number">8900</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Anni'</span>, salary=<span class="number">8200</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Owen'</span>, salary=<span class="number">9500</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;]&#125;</span><br><span class="line">员工按性别分组情况：&#123;female=[Person&#123;name=<span class="string">'Lily'</span>, salary=<span class="number">7800</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'Washington'</span>&#125;, Person&#123;name=<span class="string">'Anni'</span>, salary=<span class="number">8200</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Alisa'</span>, salary=<span class="number">7900</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;], male=[Person&#123;name=<span class="string">'Tom'</span>, salary=<span class="number">8900</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Jack'</span>, salary=<span class="number">7000</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'Washington'</span>&#125;, Person&#123;name=<span class="string">'Owen'</span>, salary=<span class="number">9500</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;]&#125;</span><br><span class="line">员工按性别、地区：&#123;female=&#123;New York=[Person&#123;name=<span class="string">'Anni'</span>, salary=<span class="number">8200</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Alisa'</span>, salary=<span class="number">7900</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'New York'</span>&#125;], Washington=[Person&#123;name=<span class="string">'Lily'</span>, salary=<span class="number">7800</span>, age=<span class="number">0</span>, sex=<span class="string">'female'</span>, area=<span class="string">'Washington'</span>&#125;]&#125;, male=&#123;New York=[Person&#123;name=<span class="string">'Tom'</span>, salary=<span class="number">8900</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;, Person&#123;name=<span class="string">'Owen'</span>, salary=<span class="number">9500</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'New York'</span>&#125;], Washington=[Person&#123;name=<span class="string">'Jack'</span>, salary=<span class="number">7000</span>, age=<span class="number">0</span>, sex=<span class="string">'male'</span>, area=<span class="string">'Washington'</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="接合（joining）"><a href="#接合（joining）" class="headerlink" title="接合（joining）"></a>接合（joining）</h5><p><code>joining</code>可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line"></span><br><span class="line">        String names = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        System.out.println(<span class="string">"所有员工的姓名："</span> + names);</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">        String string = list.stream().collect(Collectors.joining(<span class="string">"-"</span>));</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串："</span> + string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所有员工的姓名：Tom,Jack,Lily</span><br><span class="line">拼接后的字符串：A-B-C</span><br></pre></td></tr></table></figure><hr><h5 id="归约（reduce）-1"><a href="#归约（reduce）-1" class="headerlink" title="归约（reduce）"></a>归约（reduce）</h5><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持</p><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">"female"</span>, <span class="string">"Washington"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每个员工减去起征点后的薪资之和</span></span><br><span class="line">        Integer sum = personList.stream().collect(Collectors.reducing(<span class="number">0</span>, Person::getSalary, (i, j) -&gt; (i + j - <span class="number">5000</span>)));</span><br><span class="line">        System.out.println(<span class="string">"员工扣税薪资总和："</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// stream的reduce</span></span><br><span class="line">        Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">        System.out.println(<span class="string">"员工薪资总和："</span> + sum2.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">员工扣税薪资总和：<span class="number">8700</span></span><br><span class="line">员工薪资总和：<span class="number">23700</span></span><br></pre></td></tr></table></figure><hr><h4 id="排序（sorted）"><a href="#排序（sorted）" class="headerlink" title="排序（sorted）"></a>排序（sorted）</h4><p>有两种排序：</p><ul><li>sorted()：自然排序，流中元素需实现 Comparable 接口</li><li>sorted (Comparator com)：Comparator 排序器自定义排序</li></ul><p>举个荔枝：</p><p>将员工按工资由高到低（工资一样则按年龄由大到小）排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Sherry"</span>, <span class="number">9000</span>, <span class="number">24</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">8900</span>, <span class="number">22</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">9000</span>, <span class="number">25</span>, <span class="string">"male"</span>, <span class="string">"Washington"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="number">8800</span>, <span class="number">26</span>, <span class="string">"male"</span>, <span class="string">"New York"</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"Alisa"</span>, <span class="number">9000</span>, <span class="number">26</span>, <span class="string">"female"</span>, <span class="string">"New York"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按工资升序排序（自然排序）</span></span><br><span class="line">        List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 按工资倒序排序</span></span><br><span class="line">        List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">                .map(Person::getName).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 先按工资再按年龄升序排序</span></span><br><span class="line">        List&lt;String&gt; newList3 = personList.stream()</span><br><span class="line">                .sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 先按工资再按年龄自定义排序（降序）</span></span><br><span class="line">        List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">                <span class="keyword">return</span> p2.getAge() - p1.getAge();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p2.getSalary() - p1.getSalary();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).map(Person::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"按工资升序排序："</span> + newList);</span><br><span class="line">        System.out.println(<span class="string">"按工资降序排序："</span> + newList2);</span><br><span class="line">        System.out.println(<span class="string">"先按工资再按年龄升序排序："</span> + newList3);</span><br><span class="line">        System.out.println(<span class="string">"先按工资再按年龄自定义降序排序："</span> + newList4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</span><br><span class="line">先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</span><br></pre></td></tr></table></figure><hr><h4 id="提取-组合"><a href="#提取-组合" class="headerlink" title="提取/组合"></a>提取/组合</h4><p>流也可以进行合并、去重、限制、跳过等操作</p><p><strong>去重</strong></p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-39-03.png" style="zoom:80%;" /><p><strong>限制</strong></p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-40-11.png" style="zoom:80%;" /><p><strong>跳过</strong></p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-19_04-39-31.png" style="zoom:80%;" /><p>举个荔枝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        streamOperation4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">streamOperation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] arr1 = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span> &#125;;</span><br><span class="line">        String[] arr2 = &#123; <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span> &#125;;</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line">        <span class="comment">// concat:合并两个流 distinct：去重</span></span><br><span class="line">        List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// limit：限制从流中获得前n个数据</span></span><br><span class="line">        List&lt;Integer&gt; collect = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// skip：跳过前n个数据</span></span><br><span class="line">        List&lt;Integer&gt; collect2 = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>).skip(<span class="number">1</span>).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"流合并："</span> + newList);</span><br><span class="line">        System.out.println(<span class="string">"limit："</span> + collect);</span><br><span class="line">        System.out.println(<span class="string">"skip："</span> + collect2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</span><br><span class="line">先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</span><br><span class="line">先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jdk1.8新特性知识点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lambda 表达式、函数式接口、方法引用和构造器调用、Stream API、接口中的默认方法和静态方法、新时间日期 API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 stream 流&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-18_22-29-30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;&lt;font color=#008000&gt;什么是 stream 流？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Java8 中，Collection 新增了两个流方法，分别是 Stream() 和 parallelStream()&lt;/p&gt;
&lt;p&gt;Java8 中添加了一个新的接口类 Stream，相当于高级版的 Iterator，它可以通过 Lambda 表达式对集合进行大批量数据操作，或 者各种非常便利、高效的聚合数据操作。&lt;/p&gt;
&lt;p&gt;Stream 将要处理的元素集合看作一种流，在流的过程中，借助 Stream API 对流中的元素进行操作，比如：筛选、排序、聚合等。&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;jdk8 为什么要引入 stream 流？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;在 Java8 之前，我们通常是通过 for 循环或者 Iterator 迭代来重新排序合并数据，又或者通过重新定义 Collections.sorts 的 Comparator 方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。&lt;/p&gt;
&lt;p&gt;&lt;font color=#6AAFE6&gt;流不存储数据&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="jdk8新特性" scheme="https://codeyg.top/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="stream" scheme="https://codeyg.top/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Maven依赖冲突</title>
    <link href="https://codeyg.top/2021/07/17/%E9%9D%A2%E8%AF%95--Maven/"/>
    <id>https://codeyg.top/2021/07/17/%E9%9D%A2%E8%AF%95--Maven/</id>
    <published>2021-07-17T13:58:58.000Z</published>
    <updated>2021-08-16T10:04:28.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下关于 Maven 的依赖冲突 ：</strong> </p><hr><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/maven.png" style="zoom: 50%;" /><p><strong>写在前面</strong></p><p>之前在使用 maven 的时候还真的没有特意的留意过关于依赖冲突的问题。</p><p>这不，面试中被问到还有点猝不及防！</p><p>来吧，一起来回顾一遍~</p><a id="more"></a><h3 id="Maven-是什么？"><a href="#Maven-是什么？" class="headerlink" title="Maven 是什么？"></a>Maven 是什么？</h3><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p><hr><h3 id="Maven-坐标"><a href="#Maven-坐标" class="headerlink" title="Maven 坐标"></a>Maven 坐标</h3><p>【一个完整的坐标信息，由 groupId、artifactId、version、packaging、classifier 组成】</p><h4 id="GroupId"><a href="#GroupId" class="headerlink" title="GroupId"></a>GroupId</h4><p><strong>定义当前 Maven 项目从属的实际项目；</strong></p><ol><li>Maven 项目和实际项目不一定是一一对应的</li><li>groupId 不应该同开发项目的公司或组织对应；</li><li>groupId 的表述形式同 <a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 包名的表述方式类似，通常与域名反向一一对应；</li></ol><h4 id="ArtifactId"><a href="#ArtifactId" class="headerlink" title="ArtifactId"></a>ArtifactId</h4><p><strong>定义实际项目中的一个 Maven 项目（实际项目中的一个模块）</strong></p><p>推荐命名的方式为：实际项目名称-模块名称；</p><h4 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h4><p><strong>定义 Maven 当前所处的版本</strong></p><h4 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h4><p><strong>定义 Maven 项目的打包方式【jar、war】</strong></p><hr><h3 id="Maven-POM"><a href="#Maven-POM" class="headerlink" title="Maven POM"></a>Maven POM</h3><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><p>POM 中可以指定以下配置：</p><ul><li>项目依赖 （√）</li><li>插件（√）</li><li>执行目标（√）</li><li>项目构建 profile（√）</li><li>项目版本（√）</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul><p>举个荔枝：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Maven-生命周期"><a href="#Maven-生命周期" class="headerlink" title="Maven 生命周期"></a>Maven 生命周期</h3><h4 id="Maven-构建生命周期"><a href="#Maven-构建生命周期" class="headerlink" title="Maven 构建生命周期"></a>Maven 构建生命周期</h4><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_15-49-52.png" alt=""></p><table><thead><tr><th align="center">阶段</th><th align="center">处理</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">验证 validate</td><td align="center">验证项目</td><td align="center">验证项目是否正确且所有必须信息是可用的</td></tr><tr><td align="center">编译 compile</td><td align="center">执行编译</td><td align="center">源代码编译在此阶段完成</td></tr><tr><td align="center">测试 test</td><td align="center">测试</td><td align="center">使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td align="center">包装 package</td><td align="center">打包</td><td align="center">创建JAR/WAR包如在 pom.xml 中定义提及的包</td></tr><tr><td align="center">检查 verify</td><td align="center">检查</td><td align="center">对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td align="center">安装 install</td><td align="center">安装</td><td align="center">安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td align="center">部署 deploy</td><td align="center">部署</td><td align="center">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table><h4 id="mvn-打包比较常用功能（重点）"><a href="#mvn-打包比较常用功能（重点）" class="headerlink" title="mvn 打包比较常用功能（重点）"></a>mvn 打包比较常用功能（重点）</h4><ul><li><p><code>clean</code>：执行该命令会删除项目路径下的 <font color=#FF8C00>target</font> 文件，但是不会删除本地的 maven 仓库已经生成的 jar 文件。</p></li><li><p><code>compile</code>：编译命令，会在项目路径下生成一个 <font color=#FF8C00>target</font> 目录，在该目录中包含一个classes文件夹，里面全是生成的class文件及字节码文件。</p></li><li><p><code>package</code>：这个命令会在你的项目路径下一个 <font color=#FF8C00>target</font> 目录，并且拥有 compile 命令的功能进行编译，同时会在 <font color=#FF8C00>target</font> 目录下生成项目的 jar/war 文件。</p></li><li><p><code>install</code>：该命令包含了 package 命令功能，不但会在项目路径下生成 class 文件和 jar 包，同时会在本地 maven 仓库生成 jar 文件，供其他项目使用。</p></li></ul><p>注意：</p><p><font color=#FF8C00>同时执行多次install或者package命令会每次都更新jar文件</font></p><hr><h3 id="Maven-仓库"><a href="#Maven-仓库" class="headerlink" title="Maven 仓库"></a>Maven 仓库</h3><h4 id="Maven-仓库类型"><a href="#Maven-仓库类型" class="headerlink" title="Maven 仓库类型"></a>Maven 仓库类型</h4><p>Maven 仓库有三种类型：</p><ul><li>本地（local）：Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。</li><li>中央（central）：Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。</li><li>远程（remote）：如果 Maven 在中央仓库中也找不到依赖的文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。</li></ul><h4 id="Maven-依赖搜索顺序"><a href="#Maven-依赖搜索顺序" class="headerlink" title="Maven 依赖搜索顺序"></a>Maven 依赖搜索顺序</h4><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p><ul><li><strong>步骤 1</strong> － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li><li><strong>步骤 2</strong> － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li><li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li><li><strong>步骤 4</strong> － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li></ul><h4 id="Maven-阿里云-Aliyun-仓库"><a href="#Maven-阿里云-Aliyun-仓库" class="headerlink" title="Maven 阿里云(Aliyun)仓库"></a>Maven 阿里云(Aliyun)仓库</h4><p>修改 <code>maven</code> 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Maven-的排除、归类和优化依赖"><a href="#Maven-的排除、归类和优化依赖" class="headerlink" title="Maven 的排除、归类和优化依赖"></a>Maven 的排除、归类和优化依赖</h3><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>Maven 可能会自动引入快照版本的依赖，而快照版本的依赖是不稳定的，这时候就需要避免引入快照版本。这样的话需要用一种方式告知 Maven 排除快照版本的依赖引入，这种做法就是排除依赖。</p><p>直接依赖的配置里面添加 exclusions（除外） → exclusion（排除）元素，指定要排除依赖的 groupId 和 artifactId 就行。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="归类依赖"><a href="#归类依赖" class="headerlink" title="归类依赖"></a>归类依赖</h4><p>在引用依赖的时候，很多情况需要引入一个 Maven 项目的多个模块，这些模块都应该是相同的版本。</p><p>例如在下次升级，需要将 1.0 版本升级成 2.0 版本，这样就需要将 org.springframework 的每个模块的版本都统一更改，这样做很容易出现不一致的情况，就很容易出错。</p><p>为了避免出现这种情况，可以在 pom.xml 中定义一个属性名称描述版本的值。</p><p>举个荔枝：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.2.16.RELEASE,3.1.4.RELEASE --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.spring.version</span>&gt;</span>4.2.7.RELEASE<span class="tag">&lt;/<span class="name">project.build.spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.build.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="优化依赖"><a href="#优化依赖" class="headerlink" title="优化依赖"></a>优化依赖</h4><p> Maven 定位依赖的方式、传递依赖的规则以及怎么样排除依赖等。但是要实现这些动作，还必须对项目中的依赖有全面的了解，这样才能更有效地达到目的。</p><p>查看依赖的相关命令</p><p>列出所有的依赖列表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mvn dependency:list</span><br></pre></td></tr></table></figure><p>以树形结构方式，列出依赖和层次关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mvn dependency:tree</span><br></pre></td></tr></table></figure><p>分析主代码、测试代码编译的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mvn dependency:analyze</span><br></pre></td></tr></table></figure><hr><h3 id="面试一下"><a href="#面试一下" class="headerlink" title="面试一下"></a>面试一下</h3><h4 id="什么是依赖冲突-版本冲突"><a href="#什么是依赖冲突-版本冲突" class="headerlink" title="什么是依赖冲突/版本冲突?"></a>什么是依赖冲突/版本冲突?</h4><p>Maven 的依赖机制会导致 jar 包的冲突</p><blockquote><p>举个例子，在项目中，使用了两个 jar 包，分别是 A 和 B。<br>现在 A 需要依赖另一个 jar 包 C，B 也需要依赖 C。<br>但是 A 依赖的 C 的版本是 1.0，B 依赖的C的版本是 2.0。<br>这时候，Maven 会将这 1.0 的 C 和 2.0 的 C 都下载到你的项目中，这样你的项目中就存在了不同版本的 C。</p></blockquote><p>这时Maven会采用<a href="#dependency"><font color=#FF8C00>最短路径优先原则</font></a>（即，根据寻找到的依赖路径中最短的），来决定使用哪个版本的 jar 包，而另一个无用的 jar 包则未被使用，这就是所谓的依赖冲突。</p><p>注意：</p><p>在大多数时候，依赖冲突可能并不会对系统造成什么异常，因为 Maven 始终选择了一个 jar 包来使用。<br>但是，不排除在某些特定条件下，会出现类似找不到类的异常。<br>所以，只要存在依赖冲突，最好还是解决掉，不要给系统留下隐患。</p><p>解决办法：</p><p>最经典的就是 log4j 的依赖排除，使用 Maven 提供的标签 exclusion</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>log4j-core 本身是依赖了 log4j-api 的，但是因为一些其他的模块也依赖了 log4j-api，并且两个 log4j-api 版本不同，所以我们使用标签排除掉 log4j-core 所依赖的 log4j-api，这样 Maven 就不会下载 log4j-core 所依赖的 log4j-api 了，也就保证了我们的项目中只有一个版本的 log4j-api。</p><h4 id="maven-的依赖原则"><a href="#maven-的依赖原则" class="headerlink" title="maven 的依赖原则"></a><span id="dependency">maven 的依赖原则</span></h4><p>maven 有三种原则依赖原则</p><p><font color=#008000>当一个项目中出现重复引用依赖 jar 包时，maven 一般有如下三种原则处理 jar</font></p><ol><li>最短路径原则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; C -&gt; D(v1)</span><br><span class="line">F -&gt; G -&gt; D(v2)</span><br></pre></td></tr></table></figure><p>这个时候项目中就出现了两个版本的 D，这时 maven 会采用最短路径原则，选择 v2 版本的 D，因为 v1 版本的 D 是由 A 包间接依赖的，整个依赖路径长度为 3，而 v2 版本的 D 是由 F 包间接依赖的，整个依赖路径长度为 2。</p><ol start="2"><li>优先声明原则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; D(v1)</span><br><span class="line">F -&gt; G -&gt; D(v2)</span><br></pre></td></tr></table></figure><p>如果两个 jar 包版本路径深度相同，则使用优先声明的版本 v1</p><ol start="3"><li>多次直接引不同版本的 jar 时，使用最后声明的版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 pom 文件中，同时引用了如上两个版本，则会使用 4.3.20.RELEASE 版本（最后声明的版本）</p><h4 id="install-和-package-的区别"><a href="#install-和-package-的区别" class="headerlink" title="install 和 package 的区别"></a>install 和 package 的区别</h4><p>Maven install 安装指令，其实做了 2 件事情：</p><ol><li>将项目打包（jar/war），将打包结果放到项目下的 <font color=#FF8C00>target</font> 目录下；</li><li>同时将上述打包结果放到<font color=#FF8C00>本地仓库</font>的相应目录中，供其他项目或模块引用；</li></ol><p>Maven package 打包指令，其实就做了 1 件事：</p><ol><li>将项目打包（jar/war），将打包结果放到项目下的  <font color=#FF8C00>target</font> 目录下 （要先 clean）；</li></ol><p>注意：</p><p> clean 命令作用是：清理项目中 <font color=#FF8C00>target</font> 目录下文件；</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下关于 Maven 的依赖冲突 ：&lt;/strong&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/maven.png&quot; style=&quot;zoom: 50%;&quot; /&gt;



&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前在使用 maven 的时候还真的没有特意的留意过关于依赖冲突的问题。&lt;/p&gt;
&lt;p&gt;这不，面试中被问到还有点猝不及防！&lt;/p&gt;
&lt;p&gt;来吧，一起来回顾一遍~&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="maven" scheme="https://codeyg.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--布隆过滤器</title>
    <link href="https://codeyg.top/2021/07/16/%E9%9D%A2%E8%AF%95--%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://codeyg.top/2021/07/16/%E9%9D%A2%E8%AF%95--%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-07-16T13:58:58.000Z</published>
    <updated>2021-07-22T01:39:29.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下布隆过滤器</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-11-56.png" alt=""></p><p><strong>写在前面</strong></p><p><font color=#008000>为啥要写一篇关于布隆过滤器的博客？</font></p><p>还不是因为上集说到的 redis 中遇到缓存穿透的其中一个解决方案。</p><p>下面我们来详细的介绍一下 “ Bloom Filter ”</p><a id="more"></a><p>百度了一下：</p><p>布隆过滤器本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure）</p><p>特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在” 。</p><p> 相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。 </p><p><font color=#008000>讲述布隆过滤器的原理之前，我们先思考一下，通常你判断某个元素是否存在用的是什么？ </font></p><p>应该蛮多人回答 HashMap 吧，确实可以将值映射到 HashMap 的 Key，然后可以在 O (1) 的时间复杂度内返回结果，效率奇高。</p><p>了解布隆过滤器原理之前，先回顾下 Hash 函数原理。</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-00-27.png" alt=""></p><p>所有散列函数都有如下基本特性：</p><ul><li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为<strong>单向散列函数</strong>。</li><li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“<strong>散列碰撞</strong>（collision）”。</li></ul><p>但是用 hash 表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。</p><h4 id="布隆过滤器数据结构"><a href="#布隆过滤器数据结构" class="headerlink" title="布隆过滤器数据结构"></a>布隆过滤器数据结构</h4><p>布隆过滤器是一个 bit 向量或者说 bit 数组，长这样：</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-12-52.png" alt=""></p><p>如果我们要映射一个值到布隆过滤器中，我们需要使用<strong>多个不同的哈希函数</strong>生成<strong>多个哈希值，</strong>并对每个生成的哈希值指向的 bit 位置 1，例如针对值 “baidu” 和三个不同的哈希函数分别生成了哈希值 1、4、7（橙色部分）则上图转变为：</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-13-24.png" alt=""></p><p>我们现在再存一个值 “tencent”，如果哈希函数返回 3、4、8 （紫色部分）图继续变为：</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-41-55.png" alt=""></p><p>值得注意的是，4 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此它被覆盖了（绿色部分）</p><p>现在我们如果想查询 “google” 这个值是否存在，哈希函数返回了 1、5、8 三个值，结果我们发现 5 这个 bit 位上的值为 0，<strong>说明没有任何一个值映射到这个 bit 位上</strong>;</p><p>因此我们可以很确定地说 “google” 这个值不存在。而当我们需要查询 “baidu” 这个值是否存在的话，那么哈希函数必然会返回 1、4、7，然后我们检查发现这三个 bit 位上的值均为 1;</p><p>那么我们可以说 “baidu” <strong>存在了么？答案是不可以，只能是 “baidu” 这个值可能存在。</strong></p><p>这是为什么呢？</p><p>答案跟简单，因为随着增加的值越来越多，被置为 1 的 bit 位也会越来越多，这样某个值 “taobao” 即使没有被存储过，但是万一哈希函数返回的三个 bit 位，例如：1、3、8 都被其他值置位了 1 ，那么程序还是会判断 “taobao” 这个值存在。</p><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-44-00.png" alt=""></p><h4 id="布隆过滤器优点"><a href="#布隆过滤器优点" class="headerlink" title="布隆过滤器优点"></a>布隆过滤器优点</h4><p>相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。</p><p>布隆过滤器存储空间和插入/查询时间都是常数。</p><p>另外, Hash 函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</p><p>布隆过滤器可以表示全集，其它任何数据结构都不能；</p><p>k 和 m 相同，使用同一组 Hash 函数的两个布隆过滤器的交并差运算可以使用位操作进行。</p><h4 id="布隆过滤器缺点"><a href="#布隆过滤器缺点" class="headerlink" title="布隆过滤器缺点"></a>布隆过滤器缺点</h4><p>布隆过滤器的缺点和优点一样明显。误算率（False Positive）是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。</p><p>另外，一般情况下不能从布隆过滤器中删除元素. 我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。</p><p>然而要保证安全的删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面. 这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。</p><h4 id="布隆过滤器的使用场景："><a href="#布隆过滤器的使用场景：" class="headerlink" title="布隆过滤器的使用场景："></a>布隆过滤器的使用场景：</h4><p>在程序的世界中，布隆过滤器是程序员的一把利器，利用它可以快速地解决项目中一些比较棘手的问题。</p><p>如网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题。</p><p>布隆过滤器的典型应用有：</p><ul><li>数据库防止穿库。 Google Bigtable，HBase 和 Cassandra 以及 Postgresql 使用BloomFilter来减少不存在的行或列的磁盘查找。避免代价高昂的磁盘查找会大大提高数据库查询操作的性能。</li><li>业务场景中判断用户是否阅读过某视频或文章，比如抖音或头条，当然会导致一定的误判，但不会让用户看到重复的内容。</li><li>缓存宕机、缓存击穿场景，一般判断用户是否在缓存中，如果在则直接返回结果，不在则查询db，如果来一波冷数据，会导致缓存大量击穿，造成雪崩效应，这时候可以用布隆过滤器当缓存的索引，只有在布隆过滤器中，才去查询缓存，如果没查询到，则穿透到db。如果不在布隆器中，则直接返回。</li><li>WEB拦截器，如果相同请求则拦截，防止重复被攻击。用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。可以提高缓存命中率。Squid 网页代理缓存服务器在 cache digests 中就使用了布隆过滤器。Google Chrome浏览器使用了布隆过滤器加速安全浏览服务</li><li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据。</li><li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间。</li></ul><h4 id="布隆过滤器的使用（Java版）"><a href="#布隆过滤器的使用（Java版）" class="headerlink" title="布隆过滤器的使用（Java版）"></a>布隆过滤器的使用（Java版）</h4><ol><li>需要引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个布隆过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"TestBloomFilterTest测试类"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBloomFilterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"===============测试开始==============="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"===============测试结束==============="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"布隆过滤器"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BloomFilterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BloomFilter&lt;String&gt; filter = BloomFilter.create(</span><br><span class="line">                Funnels.stringFunnel(Charset.defaultCharset()),</span><br><span class="line">                <span class="number">1000</span>,</span><br><span class="line">                <span class="number">0.001</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        filter.put(<span class="string">"baidu.com"</span>);</span><br><span class="line">        filter.put(<span class="string">"tencent.com"</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"布隆过滤器中是否含有 baidu.com? &#123;&#125;"</span>,filter.mightContain(<span class="string">"baidu.com"</span>));</span><br><span class="line">        log.info(<span class="string">"布隆过滤器中是否含有 google.com? &#123;&#125;"</span>,filter.mightContain(<span class="string">"google.com"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>结果</li></ol><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_03-35-30.png" alt=""></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>本质上布隆过滤器是一种数据结构，特点是高效地插入和查询，可以用来确定<font color=#FF8C00>某个值一定不存在或者可能存在</font></p><p>回到 redis 中遇到缓存穿透的其中一个解决方案，布隆过滤器能够过滤掉一定不存在的值，也就是说，我们可以把数据库中所有的数据存储到布隆过滤器中，一旦有非法的值传进来，就能够轻而易举的判断出该值对于数据库来说是否有效，从而避免无谓的查询。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下布隆过滤器&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-11-56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;为啥要写一篇关于布隆过滤器的博客？&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;还不是因为上集说到的 redis 中遇到缓存穿透的其中一个解决方案。&lt;/p&gt;
&lt;p&gt;下面我们来详细的介绍一下 “ Bloom Filter ”&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="redis" scheme="https://codeyg.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>每日一面--Redis</title>
    <link href="https://codeyg.top/2021/07/15/%E9%9D%A2%E8%AF%95--Redis/"/>
    <id>https://codeyg.top/2021/07/15/%E9%9D%A2%E8%AF%95--Redis/</id>
    <published>2021-07-15T13:58:58.000Z</published>
    <updated>2021-07-22T01:38:24.832Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天一篇面试小知识</p></blockquote><p><strong>本篇着重介绍一下 Redis</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-16_21-42-34.png" alt=""></p><p><strong>写在前面</strong></p><h4 id="为什么不直接访问数据库？要在中间加一个Redis缓存？"><a href="#为什么不直接访问数据库？要在中间加一个Redis缓存？" class="headerlink" title="为什么不直接访问数据库？要在中间加一个Redis缓存？"></a><font color=#008000>为什么不直接访问数据库？要在中间加一个Redis缓存？</font></h4><p>其实我在了解redis之前一直有这样一个疑问，但是既然使用redis作为中间缓存一定是有道理的！</p><p>那么一起来看一下使用redis有哪些好处吧~</p><a id="more"></a><p><strong>原因：</strong></p><ol><li>Redis 可以用几十 G 内存来做缓存；</li><li>Redis 的缓存可以持久化 （RBD &amp; AOF）；</li><li>Redis 可以实现分布式的缓存；</li><li>Redis 可以处理每秒百万级的并发，是专业的缓存服务；</li><li>Redis 缓存有过期机制；</li><li>Redis 有丰富的 API。</li></ol><p>其中redis最典型的应用场景，当做缓存使用。</p><p>因为传统的关系型数据库如Mysql已经不能适用所有的场景了，比如秒杀的库存扣减，APP首页的访问流量高峰等等……</p><ul><li>服务在处理请求时先从redis里获取结果，获取到了就可以直接返回，没有获取到的话再从数据库里获取，然后存到redis里以供下次使用。</li><li>用redis的好处是可以做到分布式，有状态的数据都存在redis里，使业务服务层无状态，以便业务层有很高的可扩展性。</li></ul><h4 id="先来说下redis是什么吧？"><a href="#先来说下redis是什么吧？" class="headerlink" title="先来说下redis是什么吧？"></a><font color=#008000>先来说下redis是什么吧？</font></h4><p>我：Redis是C语言开发的一个开源的高性能键值对（key-value）的内存数据库；</p><p>它是一种NoSQL（非关系型数据库）的数据库。</p><p>可以用作数据库、缓存、消息中间件等。</p><p>我接着说：Redis作为一个内存数据库。</p><ol><li>性能优秀，数据在内存中，读写速度非常快，支持并发10W QPS；</li><li>单进程单线程，是线程安全的，采用IO多路复用机制；</li><li>丰富的数据类型；</li><li>支持数据持久化。可以将内存中数据保存在磁盘中，重启时加载；</li><li>主从复制，哨兵，高可用；</li><li>可以用作分布式锁；</li><li>可以作为消息中间件使用，支持发布订阅。</li></ol><br/><h4 id="具体说一下Redis有哪些数据结构呀？"><a href="#具体说一下Redis有哪些数据结构呀？" class="headerlink" title="具体说一下Redis有哪些数据结构呀？"></a><font color=#008000>具体说一下Redis有哪些数据结构呀？</font></h4><p>答：字符串（String）、字典（Hash）、列表（List）、集合（Set）、有序集合（SortedSet）</p><p><font color=#FF8C00>后面了解到还有：HyperLogLog、Geo、Pub/Sub 【这是加分的内容】</font></p><br/><h4 id="使用过Redis分布式锁么，它是怎么回事？"><a href="#使用过Redis分布式锁么，它是怎么回事？" class="headerlink" title="使用过Redis分布式锁么，它是怎么回事？"></a><font color=#008000>使用过Redis分布式锁么，它是怎么回事？</font></h4><p>答：先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p><br/><h4 id="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"><a href="#假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？" class="headerlink" title="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"></a><font color=#008000>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？</font></h4><p>（这道题很经典啊，网上见过~）</p><p>答：使用<code>keys</code>指令可以扫出指定模式的key列表 【 key  keys xxx*】</p><br/><h4 id="那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"><a href="#那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？" class="headerlink" title="那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"></a><font color=#008000>那如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</font></h4><p>答：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。</p><p><font color=#FF8C00>后面了解到：这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</font></p><br/><h4 id="使用过Redis做异步队列么，你是怎么用的？"><a href="#使用过Redis做异步队列么，你是怎么用的？" class="headerlink" title="使用过Redis做异步队列么，你是怎么用的？"></a><font color=#008000>使用过Redis做异步队列么，你是怎么用的？</font></h4><p>答：一般使用list结构作为队列，<code>rpush</code>生产消息，<code>lpop</code>消费消息。list还有个指令叫<code>blpop</code>，在没有消息的时候，它会阻塞住直到消息到来。</p><br/><h4 id="能不能生产一次消费多次呢？"><a href="#能不能生产一次消费多次呢？" class="headerlink" title="能不能生产一次消费多次呢？"></a><font color=#008000>能不能生产一次消费多次呢？</font></h4><p>答：使用pub/sub主题订阅者模式，可以实现 1:N 的消息队列。</p><br/><h4 id="pub-su-b有什么缺点？"><a href="#pub-su-b有什么缺点？" class="headerlink" title="pub/su b有什么缺点？"></a><font color=#008000>pub/su b有什么缺点？</font></h4><p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如<code>RabbitMQ</code>等。</p><br/><h4 id="Redis是怎么持久化的？"><a href="#Redis是怎么持久化的？" class="headerlink" title="Redis是怎么持久化的？"></a><font color=#008000>Redis是怎么持久化的？</font></h4><p>（送分题~）</p><p>答：RBD 和 AOF </p><ul><li><p>RDB做镜像全量持久化，即将整个Redis内存数据持久化到一个文件。</p></li><li><p>AOF做增量持久化，AOF会将redis中每一步对数据修改的操作记录（日志）append到相应的文件中。</p></li></ul><br/><h4 id="那说一下-RBD-和-AOF-的优劣，及其原理吧"><a href="#那说一下-RBD-和-AOF-的优劣，及其原理吧" class="headerlink" title="那说一下 RBD 和 AOF 的优劣，及其原理吧"></a><font color=#008000>那说一下 RBD 和 AOF 的优劣，及其原理吧</font></h4><p>答：</p><p><strong>RDB</strong></p><p>优点：</p><ul><li>二进制压缩文件，恢复速度快</li></ul><p>缺点：</p><ul><li>可能丢失数据（服务器宕机的时候）</li></ul><p>原理：</p><p><strong>fork</strong> 和 <strong>cow</strong></p><ul><li>fork是指redis通过创建子进程来进行RDB操作；</li><li>cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</li></ul><p><strong>AOF</strong></p><p>优点：</p><ul><li>不易丢失数据，数据完整性好</li></ul><p>缺点：</p><ul><li>每一步操作都记录，相对影响性能</li><li>数据恢复慢，文件较大</li></ul><p>原理：</p><p>为了降低 IO 消耗，AOF 写文件时，会先将数据写到缓冲区，然后再把缓冲区的内容 flush 到磁盘，这个过程叫做 fsync。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ appendfsync always  //每次写操作都flush，影响性能</span><br><span class="line">$ appendfsync everysec  //每秒flush</span><br><span class="line">$ appendfsync no  //消极等待OS刷新(一般30s),可能丢失数据</span><br></pre></td></tr></table></figure><p>相比于always的激进和no的消极，everysec在性能和数据完整性上取了一个折中。</p><br/><h4 id="是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？"><a href="#是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？" class="headerlink" title="是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？"></a><font color=#008000>是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？</font></h4><p>答：</p><ul><li><p>Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。</p></li><li><p>Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。</p></li></ul><br/><h4 id="Redis-会遇到的缓存雪崩，缓存穿透，缓存击穿吧"><a href="#Redis-会遇到的缓存雪崩，缓存穿透，缓存击穿吧" class="headerlink" title="Redis 会遇到的缓存雪崩，缓存穿透，缓存击穿吧"></a><font color=#008000>Redis 会遇到的缓存雪崩，缓存穿透，缓存击穿吧</font></h4><p>先来了解一下缓存雪崩，缓存穿透，缓存击穿是什么意思！</p><p>一、缓存雪崩</p><p><strong>含义：</strong></p><p>缓存雪崩表示在某一时间段，缓存集中失效，导致请求全部走数据库，有可能搞垮数据库，使整个服务瘫痪。</p><p>使缓存集中失效的原因：</p><ol><li><p>redis服务器挂掉了。</p></li><li><p>对缓存数据设置了相同的过期时间，导致某时间段内缓存集中失效。（√）</p></li></ol><p><strong>解决方案：</strong></p><ol><li><p>针对原因1，可以实现redis的高可用，Redis Cluster 或者 Redis Sentinel(哨兵) 等方案。</p></li><li><p>针对原因2，设置缓存过期时间时加上一个随机值，避免缓存在同一时间过期。</p></li></ol><p>举个荔枝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置过期时间加上一个随机值</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'article_content_1'</span>, <span class="string">'文章内容'</span>, 60 + mt_rand(1, 60));</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'article_content_2'</span>, <span class="string">'文章内容'</span>, 60 + mt_rand(1, 60));</span><br></pre></td></tr></table></figure><ol start="3"><li>使用双缓存策略，设置两个缓存，原始缓存和备用缓存，原始缓存失效时，访问备用缓存，备用缓存失效时间设置长点。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 原始缓存</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'article_content_2'</span>, <span class="string">'文章内容'</span>, 60);</span><br><span class="line"><span class="comment">## 设置备用缓存，失效时间设置长点</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'article_content_backup_2'</span>, <span class="string">'文章内容'</span>, 1800);</span><br></pre></td></tr></table></figure><p>二、缓存穿透</p><p><strong>含义：</strong></p><p>缓存穿透表示查询一个一定不存在的数据，由于没有获取到缓存，所以没写入缓存，导致这个不存在的数据每次都需要去数据库查询，失去了缓存的意义。</p><p>请求的数据大量的没有获取到缓存，导致走数据库，有可能搞垮数据库，使整个服务瘫痪。</p><p>比如文章表，一般我们的主键ID都是无符号的自增类型，有些人想要搞垮你的数据库，每次请求都用负数ID，而ID为负数的记录在数据库根本就没有。</p><p><strong>解决方案：</strong></p><ol><li>对于像ID为负数的非法请求直接过滤掉，采用<a href="https://codeyg.top/2021/07/16/%E9%9D%A2%E8%AF%95--%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"><font color=#FF8C00>布隆过滤器 ( Bloom Filter )</font> </a>。</li><li>禁用IP 限制IP访问。</li><li><strong>限流</strong> 每秒最多访问3次。</li><li>针对在数据库中找不到记录的，我们仍然将该空数据存入缓存中，当然一般会设置一个较短的过期时间。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置文章ID为-10000的缓存为空</span><br><span class="line"><span class="variable">$id</span> = -10000;</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'article_content_'</span> . <span class="variable">$id</span>, <span class="string">''</span>, 60);</span><br><span class="line"> </span><br><span class="line">var_dump(<span class="variable">$redis</span>-&gt;get(<span class="string">'article_content_'</span> . <span class="variable">$id</span>));</span><br></pre></td></tr></table></figure><p>三、缓存击穿</p><p><strong>含义：</strong></p><p>缓存击穿表示某个key的缓存非常热门，有很高的并发一直在访问，如果该缓存失效，那同时会走数据库，压垮数据库。</p><p>缓存击穿与缓存雪崩的区别是这里针对的是某一热门 key 缓存，而雪崩针对的是大量缓存的集中失效。</p><p><strong>解决方案：</strong></p><ol><li>让该热门 key 的缓存永不过期。</li><li>使用互斥锁，通过 redis 的 setnx 实现互斥锁。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRedis</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">    $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> $redis;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lock</span>(<span class="params">$key, $random</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $redis = getRedis();</span><br><span class="line">    <span class="comment">//设置锁的超时时间，避免释放锁失败，del()操作失败，产生死锁。</span></span><br><span class="line">    $ret = $redis-&gt;<span class="keyword">set</span>($key, $random, ['nx', 'ex' =&gt; 3 * 60]);</span><br><span class="line">    return $ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//解锁</span><br><span class="line">function unLock($key, $random)</span><br><span class="line">&#123;</span><br><span class="line">    $redis = getRedis();</span><br><span class="line">    <span class="comment">//这里的随机数作用是，防止更新缓存操作时间过长，超过了锁的有效时间，导致其他请求拿到了锁。</span></span><br><span class="line">    <span class="comment">//但上一个请求更新缓存完毕后，如果不加判断直接删除锁，就会误删其他请求创建的锁。</span></span><br><span class="line">    <span class="keyword">if</span> ($redis-&gt;<span class="keyword">get</span>($key) == $random) &#123;</span><br><span class="line">        $redis-&gt;del($key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从缓存中获取文章数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArticleInCache</span>(<span class="params">$id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $redis = getRedis();</span><br><span class="line">    $key = <span class="string">'article_content_'</span> . $id;</span><br><span class="line">    $ret = $redis-&gt;<span class="keyword">get</span>($key);</span><br><span class="line">    if ($ret === false) &#123;</span><br><span class="line">        <span class="comment">//生成锁的key</span></span><br><span class="line">        $lockKey = $key . <span class="string">'_lock'</span>;</span><br><span class="line">        <span class="comment">//生成随机数，用于设置锁的值，后面释放锁时会用到</span></span><br><span class="line">        $random = mt_rand();</span><br><span class="line">        <span class="comment">//拿到互斥锁</span></span><br><span class="line">        <span class="keyword">if</span> (lock($lockKey, $random)) &#123;</span><br><span class="line">            <span class="comment">//这里是伪代码，表示从数据库中获取文章数据</span></span><br><span class="line">            $value = $db-&gt;getArticle($id);</span><br><span class="line">            <span class="comment">//更新缓存，过期时间可以根据情况自已调整</span></span><br><span class="line">            $redis-&gt;<span class="keyword">set</span>($key, $value, 2 * 60);</span><br><span class="line">            //释放锁</span><br><span class="line">            unLock($lockKey, $random);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            <span class="comment">//等待200毫秒，然后重新获取缓存值，让其他获取到锁的进程取得数据并设置缓存</span></span><br><span class="line">            usleep(<span class="number">200</span>);</span><br><span class="line">            getArticleInCache($id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每天一篇面试小知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇着重介绍一下 Redis&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-16_21-42-34.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;为什么不直接访问数据库？要在中间加一个Redis缓存？&quot;&gt;&lt;a href=&quot;#为什么不直接访问数据库？要在中间加一个Redis缓存？&quot; class=&quot;headerlink&quot; title=&quot;为什么不直接访问数据库？要在中间加一个Redis缓存？&quot;&gt;&lt;/a&gt;&lt;font color=#008000&gt;为什么不直接访问数据库？要在中间加一个Redis缓存？&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;其实我在了解redis之前一直有这样一个疑问，但是既然使用redis作为中间缓存一定是有道理的！&lt;/p&gt;
&lt;p&gt;那么一起来看一下使用redis有哪些好处吧~&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="进阶" scheme="https://codeyg.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="redis" scheme="https://codeyg.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>日积月累</title>
    <link href="https://codeyg.top/2021/07/01/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    <id>https://codeyg.top/2021/07/01/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/</id>
    <published>2021-06-30T23:07:07.000Z</published>
    <updated>2021-08-25T15:59:24.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>面试中遇到问题的相关总结</p></blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-13-27.png" alt=""></p><a id="more"></a><h4 id="1、-Autowired和-Resource的区别是什么？"><a href="#1、-Autowired和-Resource的区别是什么？" class="headerlink" title="1、@Autowired和@Resource的区别是什么？"></a><font color=#008000>1、@Autowired和@Resource的区别是什么？</font></h4><p>联系：</p><ul><li>@Autowired和@Resource注解都是作为bean对象注入的时候使用的；</li><li>两者都可以声明在字段和setter方法上；</li></ul><p>区别：</p><ul><li>@Autowired注解是Spring提供的，而@Resource注解是J2EE本身提供的；</li><li>@Autowird注解默认通过byType方式注入，而@Resource注解默认通过byName方式注入；</li><li>@Autowired注解注入的对象需要在IOC容器中存在，否则需要加上属性required=false，表示忽略当前要注入的bean，如果有直接注入，没有跳过，不会报错；</li></ul><p>其实 @Autowired 注入首先根据 byType 注入，当类型大于1时在根据 byName 注入。</p><hr><h4 id="2、HashMap与ConcurrentHashMap的区别？"><a href="#2、HashMap与ConcurrentHashMap的区别？" class="headerlink" title="2、HashMap与ConcurrentHashMap的区别？"></a><font color=#008000>2、HashMap与ConcurrentHashMap的区别？</font></h4><p>相同点：</p><ul><li>首先两者的相同点在于底层都是数组+链表实现实现的；</li></ul><p>区别：</p><ul><li>HashMap是线程非安全的，ConcurrentHashMap是线程安全的</li></ul><hr><h4 id="3、处理哈希冲突的方法？"><a href="#3、处理哈希冲突的方法？" class="headerlink" title="3、处理哈希冲突的方法？"></a><font color=#008000>3、处理哈希冲突的方法？</font></h4><ul><li>开放定址法</li><li>链地址法（√）</li><li>再散列法</li></ul><hr><h4 id="4、包装类和基本数据类型的区别？"><a href="#4、包装类和基本数据类型的区别？" class="headerlink" title="4、包装类和基本数据类型的区别？"></a><font color=#008000>4、包装类和基本数据类型的区别？</font></h4><p>包装类：</p><ul><li><p>优点：</p><ul><li>可以赋值为null</li><li>提供了一系列的方法常用的有：parseInt(String s)、tostring()、valueOf(String s)、equals( object object)、i.compareto(integer anotherIntger)</li><li><font color=#FF8C00>集合中不允许放基本数据类型，只能放包装类！</font></li></ul></li><li><p>缺点：</p><ul><li>由于每个值分别包装在对象中，所以ArrayList的效率远远低于int[]数组</li></ul></li></ul><p>基本数据类型：</p><ul><li><p>优点：</p><ul><li>计算效率高</li><li>不会由于常量池而引起比较大小的错误</li></ul></li><li><p>缺点：</p><ul><li>当数据库查询出结果封装到结果集时,如何返回的值为null时,会将结果赋值给字段,运行时会报错,不能将null值赋值给基本数据类型</li></ul></li></ul><p><strong>两者的区别：</strong><br>1、声明方式不同，基本类型不适用new关键字，而包装类型需要使用new关键字来在堆中分配存储空间；<br>2、存储方式及位置不同，基本类型是直接将变量值存储在堆栈中，而包装类型是将对象放在堆中，然后通过引用来使用；<br>3、初始值不同，基本类型的初始值如int为0，boolean为false，而包装类型的初始值为null<br>4、使用方式不同，基本类型直接赋值直接使用就好，而包装类型在集合如Collection、Map时会使用到。<br>5、包装类都是继承Number 接口实现Compareble 接口的</p><hr><h4 id="5、MyISAM-和-INNODB-的区别？"><a href="#5、MyISAM-和-INNODB-的区别？" class="headerlink" title="5、MyISAM 和 INNODB 的区别？"></a><font color=#008000>5、MyISAM 和 INNODB 的区别？</font></h4><ol><li><p>事务安全：</p><p>MyISAM 不支持事务（×）</p><p>INNODB  支持事务（√）</p></li><li><p>外键 ：</p><p>MyISAM 不支持外键（×）</p><p> INNODB 支持外键（√）</p></li><li><p>锁机制：</p><p>MyISAM 是表锁</p><p>INNODB 是行锁</p></li><li><p>查询和添加速度：</p><p>MyISAM 批量插入速度快</p></li><li><p>支持全文索引：</p><p>MyISAM 支持全文索引（√）</p><p>INNODB 不支持全文索引（×）</p></li><li><p>MyISAM 内存空间使用率比 INNODB 低</p></li></ol><p>Memory 存储，比如我们数据变化频繁，不需要入库，同时又频繁的查询和修改，我们考虑使用 memory, 速度极快. （如果 mysql 重启的话，数据就不存在了）</p><hr><h4 id="6、Java中final、finally、finalize的区别与用法"><a href="#6、Java中final、finally、finalize的区别与用法" class="headerlink" title="6、Java中final、finally、finalize的区别与用法"></a><font color=#008000>6、Java中final、finally、finalize的区别与用法</font></h4><ul><li>final：java中的关键字，修饰符。<br>1.如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。<br>2.如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<ul><li>被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。</li><li>被声明final的方法只能使用，不能重载。</li></ul></li><li>finally：java的一种异常处理机制。<br>　　finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li><li>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</li></ul><hr><h4 id="7、try-catch-finally"><a href="#7、try-catch-finally" class="headerlink" title="7、try-catch-finally"></a><font color=#008000>7、try-catch-finally</font></h4><ol><li>异常处理语法结构中只有 try 块是必需的，也就是说，如果没有 try 块，则不能有后面的 catch 块和 finally 块；</li><li>catch 块和 finally 块都是可选的，但 catch 块和 finally 块至少出现其中之一，也可以同时出现；</li><li>可以有多个 catch 块，捕获父类异常的 catch 块必须位于捕获子类异常的后面；</li><li>不能只有 try 块，既没有 catch 块，也没有 finally 块；</li><li>多个 catch 块必须位于 try 块之后，finally 块必须位于所有的 catch 块之后。</li><li>finally 与 try 语句块匹配的语法格式，此种情况会导致异常丢失，所以不常见。</li></ol><hr><h4 id="8、Java中常见的五种异常"><a href="#8、Java中常见的五种异常" class="headerlink" title="8、Java中常见的五种异常"></a><font color=#008000>8、Java中常见的五种异常</font></h4><ol><li>ClassCastException【类转换异常】</li><li>IndexOutOfBoundsException【数组越界】</li><li>NullPointerException【空指针】</li><li>IllegalAccessException【安全权限异常】</li><li>IOException【输入输出异常】</li></ol><hr><h4 id="9、Java中垃圾回收的目的？什么时候进行？"><a href="#9、Java中垃圾回收的目的？什么时候进行？" class="headerlink" title="9、Java中垃圾回收的目的？什么时候进行？"></a><font color=#008000>9、Java中垃圾回收的目的？什么时候进行？</font></h4><p>垃圾回收是在内存中中存在<strong>没有引用的对象</strong>或<strong>超过作用域的对象时</strong>进行垃圾回收，垃圾回收的目的是识别并且丢弃不再使用的对象来释放和重用资源。</p><p>目的：<br>回收堆中不再使用的对象，释放资源。<br>回收时间：当对象失去引用后，系统会在合适的时间回收它所占的内存。</p><ul><li>老年代的对象所需要的内存大于老年代剩余内存，则会触发老年代 GC（Full GC）。</li><li>当程序调用System.gc() 时也会触发Full GC。</li></ul><hr><h4 id="10、什么是内存泄漏？"><a href="#10、什么是内存泄漏？" class="headerlink" title="10、什么是内存泄漏？"></a><font color=#008000>10、什么是内存泄漏？</font></h4><p>【<strong>out of memory</strong>】</p><p>当一个对象已经不需要再使用本该被回收时，另外一个正在使用的对象持有它的引用从而导致它不能被回收，这导致本该被回收的对象不能被回收而停留在堆内存中。</p><p><strong>内存溢出的原因以及解决方法</strong></p><ol><li><p>内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</p></li><li><p>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</p></li><li><p>代码中存在死循环或循环产生过多重复的对象实体；</p></li><li><p>启动参数内存值设定的过小</p></li></ol><p>内存溢出的解决方案：</p><p>第一步，修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p><p>第二步，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</p><p>第三步，对代码进行走查和分析，找出可能发生内存溢出的位置。</p><hr><h4 id="11、String-s-new-String-“xyz”-创建几个String对象？"><a href="#11、String-s-new-String-“xyz”-创建几个String对象？" class="headerlink" title="11、String s = new String(“xyz”);创建几个String对象？"></a><font color=#008000>11、String s = new String(“xyz”);创建几个String对象？</font></h4><p>两个或一个</p><ul><li>第一次调用 new String(“xyz”); 时，会在堆内存中创建一个字符串对象，同时在字符串常量池中创建一个对象 “xyz”</li><li>第二次调用 new String(“xyz”); 时，只会在堆内存中创建一个字符串对象，指向之前在字符串常量池中创建的 “xyz”</li></ul><hr><h4 id="12、类加载器工作机制？"><a href="#12、类加载器工作机制？" class="headerlink" title="12、类加载器工作机制？"></a><font color=#008000>12、类加载器工作机制？</font></h4><ol><li>装载：将Java二进制代码导入jvm中，生成Class文件。</li><li>连接：<ul><li>校验：检查载入Class文件数据的正确性 </li><li>准备：给类的静态变量分配存储空间</li><li>解析：将符号引用转成直接引用</li></ul></li><li>初始化：对类的静态变量，静态方法和静态代码块执行初始化工作。<br>双亲委派模型：类加载器收到类加载请求，首先将请求委派给父类加载器完成 用户自定义加载器-&gt;应用程序加载器-&gt;扩展类加载器-&gt;启动类加载器。</li></ol><hr><h4 id="13、Spring中的Controller-，Service，Dao是不是线程安全的？"><a href="#13、Spring中的Controller-，Service，Dao是不是线程安全的？" class="headerlink" title="13、Spring中的Controller ，Service，Dao是不是线程安全的？"></a><font color=#008000>13、Spring中的Controller ，Service，Dao是不是线程安全的？</font></h4><ol><li>在@Controller/@Service等容器中，默认情况下，scope 值是单例 singleton 的，也是线程不安全的。</li><li>尽量不要在@Controller/@Service等容器中定义静态变量，不论是单例 (singleton) 还是多实例 (prototype) 他都是线程不安全的。</li><li>默认注入的 Bean 对象，在不设置 scope 的时候他也是线程不安全的。</li><li>一定要定义变量的话，用 ThreadLocal 来封装，这个是线程安全的</li></ol><hr><h4 id="14、Java-中-sleep-和-wait-的区别？"><a href="#14、Java-中-sleep-和-wait-的区别？" class="headerlink" title="14、Java 中 sleep() 和 wait() 的区别？"></a><font color=#008000>14、Java 中 sleep() 和 wait() 的区别？</font></h4><ol><li>这两个方法来自不同的类分别是，sleep 来自 Thread 类，和 wait 来自 Object 类。</li><li>最主要是 sleep 方法没有释放锁，而 wait 方法释放了锁，使得其他线程可以使用同步控制块或者方法。</li><li>使用范围：wait，notify 和 notifyAll 只能在同步控制方法或者同步控制块里面使用，而 sleep 可以在任何地方使用。</li><li>sleep 必须捕获异常，而 wait，notify 和 notifyAll 不需要捕获异常。</li></ol><hr><h4 id="15、-bean-注解和-component注解的区别"><a href="#15、-bean-注解和-component注解的区别" class="headerlink" title="15、@bean 注解和 @component注解的区别"></a><font color=#008000>15、@bean 注解和 @component注解的区别</font></h4><ol><li><p>@Component 注解作用于类</p><p>@Bean 注解作用于方法</p></li><li><p>@Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中【@ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中】</p><p>@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。</p></li><li><p>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 @Bean 来实现。</p></li></ol><p> <strong>未完待续 … …</strong></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;面试中遇到问题的相关总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/PaulGeorge123/cloudimg@master/img/all/Snipaste_2021-07-17_04-13-27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="面试篇" scheme="https://codeyg.top/categories/%E9%9D%A2%E8%AF%95%E7%AF%87/"/>
    
    
    <category term="日积月累" scheme="https://codeyg.top/tags/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
  </entry>
  
</feed>
